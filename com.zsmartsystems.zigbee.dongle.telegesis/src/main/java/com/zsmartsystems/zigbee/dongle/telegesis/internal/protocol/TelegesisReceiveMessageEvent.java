/**
 * Copyright (c) 2016-2018 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.telegesis.internal.protocol;

import com.zsmartsystems.zigbee.IeeeAddress;

/**
 * Class to implement the Telegesis command <b>Receive Message</b>.
 * <p>
 * An incoming message not addressed to the AT command endpoint.  EUI64 is only shown if included
 * in network frame header
 * <p>
 * This class provides methods for processing Telegesis AT API commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class TelegesisReceiveMessageEvent extends TelegesisFrame implements TelegesisEvent {
    /**
     * RX response field
     */
    private IeeeAddress ieeeAddress;

    /**
     * RX response field
     */
    private Integer networkAddress;

    /**
     * RX response field
     */
    private Integer profileId;

    /**
     * RX response field
     */
    private Integer destinationEp;

    /**
     * RX response field
     */
    private Integer sourceEp;

    /**
     * RX response field
     */
    private Integer clusterId;

    /**
     * RX response field
     */
    private int[] messageData;

    /**
     * RX response field
     */
    private Integer rssi;

    /**
     * RX response field
     */
    private Integer lqi;

    /**
     *
     * @return the ieeeAddress as {@link IeeeAddress}
     */
    public IeeeAddress getIeeeAddress() {
        return ieeeAddress;
    }

    /**
     *
     * @return the networkAddress as {@link Integer}
     */
    public Integer getNetworkAddress() {
        return networkAddress;
    }

    /**
     *
     * @return the profileId as {@link Integer}
     */
    public Integer getProfileId() {
        return profileId;
    }

    /**
     *
     * @return the destinationEp as {@link Integer}
     */
    public Integer getDestinationEp() {
        return destinationEp;
    }

    /**
     *
     * @return the sourceEp as {@link Integer}
     */
    public Integer getSourceEp() {
        return sourceEp;
    }

    /**
     *
     * @return the clusterId as {@link Integer}
     */
    public Integer getClusterId() {
        return clusterId;
    }

    /**
     *
     * @return the messageData as {@link int[]}
     */
    public int[] getMessageData() {
        return messageData;
    }

    /**
     *
     * @return the rssi as {@link Integer}
     */
    public Integer getRssi() {
        return rssi;
    }

    /**
     *
     * @return the lqi as {@link Integer}
     */
    public Integer getLqi() {
        return lqi;
    }


    @Override
    public void deserialize(int[] data) {
        initialiseDeserializer(data);

        // Deserialize the fields for the "RX" response
        if (testPrompt(data, "RX:")) {
            setDeserializer(3);

            // Deserialize field "ieee Address" [optional]
            pushDeserializer();
            ieeeAddress = deserializeIeeeAddress();
            if (ieeeAddress == null) {
                popDeserializer();
            } else {
                stepDeserializer();
            }

            // Deserialize field "network Address"
            networkAddress = deserializeInt16();
            stepDeserializer();

            // Deserialize field "profile Id"
            profileId = deserializeInt16();
            stepDeserializer();

            // Deserialize field "destination Ep"
            destinationEp = deserializeInt8();
            stepDeserializer();

            // Deserialize field "source Ep"
            sourceEp = deserializeInt8();
            stepDeserializer();

            // Deserialize field "cluster Id"
            clusterId = deserializeInt16();
            stepDeserializer();

            // Deserialize field "message Data"
            messageData = deserializeData();
            stepDeserializer();

            // Deserialize field "rssi" [optional]
            pushDeserializer();
            rssi = deserializeSInt8();
            if (rssi == null) {
                popDeserializer();
            } else {
                stepDeserializer();
            }

            // Deserialize field "lqi" [optional]
            lqi = deserializeInt8();
        }
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(928);
        builder.append("TelegesisReceiveMessageEvent [ieeeAddress=");
        builder.append(ieeeAddress);
        builder.append(", networkAddress=");
        builder.append(networkAddress);
        builder.append(", profileId=");
        builder.append(profileId);
        builder.append(", destinationEp=");
        builder.append(destinationEp);
        builder.append(", sourceEp=");
        builder.append(sourceEp);
        builder.append(", clusterId=");
        builder.append(clusterId);
        builder.append(", messageData=");
        if (messageData == null) {
            builder.append("null");
        } else {
            for (int cnt = 0; cnt < messageData.length; cnt++) {
                if (cnt > 0) {
                    builder.append(' ');
                }
                builder.append(String.format("%02X", messageData[cnt]));
            }
        }
        builder.append(", rssi=");
        builder.append(rssi);
        builder.append(", lqi=");
        builder.append(lqi);
        builder.append(']');
        return builder.toString();
    }
}
