<cluster xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="zigbee-description.xsd" code="0x0700">
    <name>Price</name>
    <description>The Price Cluster provides the mechanism for communicating Gas, Energy, or Water pricing information within the premises. This pricing information is distributed to the ESI from either the utilities or from regional energy providers. The ESI conveys the information (via the Price Cluster mechanisms) to other Smart Energy devices.</description>
    <description>Events carried using this cluster include a timestamp with the assumption that target devices maintain a real time clock. Devices can acquire and synchronize their internal clocks via the ZCL Time server. If a device does not support a real time clock it is assumed that the device will interpret and utilize the &#8220;Start Now&#8221; value within the Time field.</description>
    <command code="0x00" source="client">
        <name>Get Current Price Command</name>
        <description>This command initiates a PublishPrice command for the current time. On receipt of this command, the device shall send a PublishPrice command for the currently scheduled time.</description>
        <field type="BITMAP_8_BIT" class="CommandOptionsBitmap">
            <name>Command Options</name>
        </field>
    </command>
    <command code="0x01" source="client">
        <name>Get Scheduled Prices Command</name>
        <description>This command initiates a PublishPrice command for available price events. A server device shall be capable of storing five price events at a minimum On receipt of this command, the device shall send a PublishPrice command for the currently scheduled time.</description>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>UTCTime stamp representing the minimum ending time for any scheduled or currently active pricing events to be resent. If a command has a StartTime of 0x00000000, replace that StartTime with the current time stamp.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Events</name>
            <description>Represents the maximum number of events to be sent. A value of 0 would indicate all available events are to be returned. Example: Number of Events = 1 would return the first event with an EndTime greater than or equal to the value of StartTime field in the GetScheduledPrices command. (EndTime would be StartTime plus Duration of the event listed in the device&#8217;s event table).</description>
        </field>
    </command>
    <command code="0x02" source="client">
        <name>Price Acknowledgement Command</name>
        <description>The PriceAcknowledgement command provides the ability to acknowledge a previously sent PublishPrice command. It is mandatory for 1.1 and later devices. For SE 1.0 devices, the command is optional.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32 bit field containing a unique identifier for the commodity provider</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider.</description>
        </field>
        <field type="UTCTIME">
            <name>Price Ack Time</name>
            <description>Time price acknowledgement generated.</description>
        </field>
        <field type="BITMAP_8_BIT" class="PriceControlMaskBitmap">
            <name>Control</name>
            <description>Identifies the Price Control or Block Period Control options for the event.</description>
        </field>
    </command>
    <command code="0x03" source="client">
        <name>Get Block Period Command</name>
        <description>This command initiates a PublishBlockPeriod command for the currently scheduled block periods. A server device shall be capable of storing at least two commands, the current period and a period to be activated in the near future. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no events available.</description>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>UTCTime stamp representing the minimum ending time for any scheduled or currently block period events to be resent. If a command has a Start Time of 0x00000000, replace that Start Time with the current time stamp.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Events</name>
            <description>An 8 bit Integer which indicates the maximum number of Publish Block Period commands that can be sent. Example: Number of Events = 1 would return the first event with an EndTime greater than or equal to the value of Start Time field in the GetBlockPeriod(s) command. (EndTime would be StartTime plus Duration of the event listed in the device&#8217;s event table). Number of Events = 0 would return all available Publish Block Periods, starting with the current block in progress. 8460 command. The least significant nibble represents an enumeration of the tariff (Generation Meters shall use the &#8216;Received&#8217; Tariff.). If the TariffType is not specified, the server shall assume that the request is for the &#8216;Delivered&#8217; Tariff. The most significant nibble is reserved.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
        </field>
    </command>
    <command code="0x04" source="client">
        <name>Get Conversion Factor Command</name>
        <description>This command initiates a PublishConversionFactor command(s) for scheduled conversion factor updates. A server device shall be capable of storing at least two instances, the current and (if available) next instance to be activated in the future. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no conversion factor updates available</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of values to be returned by the corresponding PublishConversionFactor command. The first returned PublishConversionFactor command shall be the instance which is active or becomes active at or after the stated Earliest Start Time. If more than one instance is requested, the active and scheduled instances shall be sent with ascending ordered StartTime.</description>
            <description>Min. Issuer Event ID Field A 32-bit integer representing the minimum Issuer Event ID of values to be returned by the corresponding PublishCalorificValue command. A value of 0xFFFFFFFF means not specified; the server shall return values irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8-bit integer which represents the maximum number of PublishConversionFactor commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishConversionFactor commands shall be returned.</description>
        </field>
    </command>
    <command code="0x05" source="client">
        <name>Get Calorific Value Command</name>
        <description>This command initiates a PublishCalorificValue command(s) for scheduled calorific value updates. A server device shall be capable of storing at least two instances, the current and (if available) next instance to be activated in the future. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no conversion factor updates available</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of values to be returned by the corresponding PublishCalorificValue command. The first returned PublishCalorificValue command shall be the instance which is active or becomes active at or after the stated Earliest Start Time. If more than one instance is requested, the active and scheduled instances shall be sent with ascending ordered Start Time.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
            <description>A 32-bit integer representing the minimum Issuer Event ID of values to be returned by the corresponding PublishCalorificValue command. A value of 0xFFFFFFFF means not specified; the server shall return values irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8-bit Integer which represents the maximum number of PublishCalorificValue commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishCalorificValue commands shall be returned.</description>
        </field>
    </command>
    <command code="0x06" source="client">
        <name>Get Tariff Information Command</name>
        <description>This command initiates PublishTariffInformation command(s) for scheduled tariff updates. A server device shall be capable of storing at least two instances, current and the next instance to be activated in the future. &lt;br&gt; One or more PublishTariffInformation commands are sent in response to this command. To obtain the complete tariff details, further GetPriceMatrix and GetBlockThesholds commands must be sent using the start time and IssuerTariffID obtained from the appropriate PublishTariffInformation command.</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of tariffs to be returned by the corresponding PublishTariffInformation command. The first returned PublishTariffInformation command shall be the instance which is active or becomes active at or after the stated EarliestStartTime. If more than one command is requested, the active and scheduled commands shall be sent with ascending ordered StartTime.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
            <description>A 32-bit integer representing the minimum Issuer Event ID of tariffs to be returned by the corresponding PublishTariffInformation command. A value of 0xFFFFFFFF means not specified; the server shall return tariffs irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8-bit integer which represents the maximum number of PublishTariffInformation commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishTariffInformation commands shall be returned.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff.). The most significant nibble is reserved.</description>
        </field>
    </command>
    <command code="0x07" source="client">
        <name>Get Price Matrix Command</name>
        <description>This command initiates a PublishPriceMatrix command for the scheduled Price Matrix updates. A server device shall be capable of storing at least two instances, current and next instance to be activated in the future. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no Price Matrix updates available.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>IssuerTariffID indicates the tariff to which the requested Price Matrix belongs.</description>
        </field>
    </command>
    <command code="0x08" source="client">
        <name>Get Block Thresholds Command</name>
        <description>This command initiates a PublishBlockThreshold command for the scheduled Block Threshold updates. A server device shall be capable of storing at least two instances, current and next instance to be activated in the future. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no Price Matrix updates available.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>IssuerTariffID indicates the tariff to which the requested Price Matrix belongs.</description>
        </field>
    </command>
    <command code="0x09" source="client">
        <name>Get CO2 Value Command</name>
        <description>This command initiates PublishCO2Value command(s) for scheduled CO2 conversion factor updates. A server device shall be capable of storing at least two instances, current and (if available) next instance to be activated in the future.</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of values to be returned by the corresponding PublishCO2Value command. The first returned PublishCO2Value command shall be the instance which is active or becomes active at or after the stated EarliestStartTime. If more than one instance is requested, the active and scheduled instances shall be sent with ascending ordered StartTime.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
            <description>A 32-bit integer representing the minimum Issuer Event ID of values to be returned by the corresponding PublishCO2Value command. A value of 0xFFFFFFFF means not specified; the server shall return values irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8-bit Integer which represents the maximum number of PublishCO2Value commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishCO2Value commands shall be returned.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An optional 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). A value of 0xFF means not specified. If the TariffType is not specified, the server shall return all C02 values regardless of tariff type. The most significant nibble is reserved.</description>
        </field>
    </command>
    <command code="0x0A" source="client">
        <name>Get Tier Labels Command</name>
        <description>This command allows a CLIENT to retrieve the tier labels associated with a given tariff; this command initiates a PublishTierLabels command from the server.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity supplier. This is used to identify the tariff that the labels apply to.</description>
        </field>
    </command>
    <command code="0x0B" source="client">
        <name>Get Billing Period Command</name>
        <description>This command initiates one or more PublishBillingPeriod commands for currently scheduled billing periods.</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of billing periods to be returned by the corresponding PublishBillingPeriod command. The first returned PublishBillingPeriod command shall be the instance which is active or becomes active at or after the stated EarliestStartTime. If more than one instance is requested, the active and scheduled instances shall be sent with ascending ordered StartTime.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
            <description>A 32-bit integer representing the minimum Issuer Event ID of billing periods to be returned by the corresponding PublishBillingPeriod command. A value of 0xFFFFFFFF means not specified; the server shall return periods irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8 bit Integer which indicates the maximum number of PublishBillingPeriod commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishBillingPeriod commands shall be returned.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the TariffType of the requested Billing Period information. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). A value of 0xFF means not specified. If the TariffType is not specified, the server shall return Billing Period information regardless of its type. The most significant nibble is reserved.</description>
        </field>
    </command>
    <command code="0x0C" source="client">
        <name>Get Consolidated Bill Command</name>
        <description>This command initiates one or more PublishConsolidatedBill commands with the requested billing information.</description>
        <field type="UTCTIME">
            <name>Earliest Start Time</name>
            <description>UTCTime stamp indicating the earliest start time of billing information to be returned by the corresponding PublishConsolidatedBill command. The first returned PublishConsolidatedBill command shall be the instance which is active or becomes active at or after the stated EarliestStartTime. If more than one instance is requested, the active and scheduled instances shall be sent with ascending ordered StartTime.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Min . Issuer Event ID</name>
            <description>A 32-bit integer representing the minimum Issuer Event ID of billing information to be returned by the corresponding PublishConsolidatedBill command. A value of 0xFFFFFFFF means not specified; the server shall return information irrespective of the value of the Issuer Event ID.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Commands</name>
            <description>An 8 bit Integer which indicates the maximum number of PublishConsolidatedBill commands that can be sent. A value of 0 would indicate all available PublishConsolidatedBill commands shall be returned.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An optional 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). A value of 0xFF means not specified. If the TariffType is not specified, the server shall return all billing information regardless of tariff type. The most significant nibble is reserved.</description>
        </field>
    </command>
    <command code="0x0D" source="client">
        <name>Cpp Event Response</name>
        <description>The CPPEventResponse command is sent from a CLIENT (IHD) to the ESI to notify it of a Critical Peak Pricing event authorization.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="CppEventResponseCppAuthEnum">
            <name>Cpp Auth</name>
            <description>An 8-bit enumeration identifying the status of the CPP event. This field shall contain the &#8216;Accepted&#8217; or &#8216;Rejected&#8217; values.</description>
        </field>
    </command>
    <command code="0x0E" source="client">
        <name>Get Credit Payment Command</name>
        <description>This command initiates PublishCreditPayment commands for the requested credit payment information.</description>
        <field type="UTCTIME">
            <name>Latest End Time</name>
            <description>UTCTime stamp indicating the latest CreditPaymentDate of records to be returned by the corresponding PublishCreditPayment commands. The first returned PublishCreditPayment command shall be the most recent record with its CreditPaymentDate equal to or older than the Latest End Time provided.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Records</name>
            <description>An 8-bit integer that represents the maximum number of PublishCreditPayment commands that the CLIENT is willing to receive in response to this command. A value of 0 would indicate all available PublishCreditPayment commands shall be returned. If more than one record is requested, the PublishCreditPayment commands should be returned with descending ordered CreditPaymentDate. If fewer records are available than are being requested, only those available are returned.</description>
        </field>
    </command>
    <command code="0x0F" source="client">
        <name>Get Currency Conversion Command</name>
        <description>This command initiates a PublishCurrencyConversion command for the currency conversion factor updates. A server shall be capable of storing both the old and the new currencies. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there are no currency conversion factor updates available</description>
    </command>
    <command code="0x10" source="client">
        <name>Get Tariff Cancellation Command</name>
        <description>This command initiates the return of the last CancelTariff command held on the associated server. &lt;br&gt; A ZCL Default response with status NOT_FOUND shall be returned if there is no CancelTariff command available.</description>
    </command>
    <command code="0x00" source="server">
        <name>Publish Price Command</name>
        <description>The Publish Price command is generated in response to receiving a Get Current Price command, in response to a Get Scheduled Prices command, and when an update to the pricing information is available from the commodity provider, either before or when a TOU price becomes active. Additionally the Publish Price Command is generated when Block Pricing is in effect. When a Get Current Price or Get Scheduled Prices command is received over a ZigBee Smart Energy network, the Publish Price command should be sent unicast to the requester. In the case of an update to the pricing information from the commodity provider, the Publish Price command should be unicast to all individually registered devices implementing the Price Cluster on the ZigBee Smart Energy network. &lt;br&gt; Devices capable of receiving this command must be capable of storing and supporting at least two pricing information instances, the current active price and the next price. By supporting at least two pricing information instances, receiving devices will allow the Publish Price command generator to publish the next pricing information during the current pricing period. &lt;br&gt; Nested and overlapping Publish Price commands are not allowed. The current active price will be replaced if new price information is received by the ESI. In the case of overlapping events, the event with the newer Issuer Event ID takes priority over all nested and overlapping events. All existing events that overlap, even partially, should be removed. The only exception to this is that if an event with a newer Issuer Event ID overlaps with the end of the current active price but is not yet active, the active price is not deleted but its duration is modified to 0xFFFF (until changed) so that the active price ends when the new event begins.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="OCTET_STRING">
            <name>Rate Label</name>
            <description>A ZCL Octet String field capable of storing a 12 character string (the first Octet indicates length) containing commodity provider- specific information regarding the current billing rate. The String shall be encoded in the UTF-8 format. This field allows differentiation when a commodity provider may have multiple pricing plans.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new pricing information is provided that replaces older pricing information for the same time period, this field allows devices to determine which information is newer. It is expected that the value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish Price command was issued. Thus, newer pricing information will have a value in the Issuer Event ID field that is larger than older pricing information.</description>
        </field>
        <field type="UTCTIME">
            <name>Current Time</name>
            <description>A UTCTime field containing the current time as determined by the device. This field provides an extra value-added feature for the broadcast price signals.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="UnitOfMeasureEnum">
            <name>Unit Of Measure</name>
            <description>An 8-bit enumeration field identifying the commodity as well as its base unit of measure. The enumeration used for this field shall match one of the UnitOfMeasure values using a pure binary format as defined in the Metering cluster.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Currency</name>
            <description>An unsigned 16-bit field containing identifying information concerning the local unit of currency used in the price field. This field allows the displaying of the appropriate symbol for a currency (i.e.: $). The value of the currency field should match the values defined by ISO 4217. Price Trailing Digit and Price Tier (mandatory): An 8-bit field used to determine where the decimal point is located in the price field and to indicate the current pricing tier as chosen by the commodity provider. The most significant nibble is the Trailing Digit sub-field which indicates the number of digits to the right of the decimal point. The least significant nibble is an enumerated field containing the current Price Tier. An 8-bit BitMap where the most significant nibble is an enumerated sub-field representing the maximum number of price tiers available, and the least significant nibble is an enumerated sub-field indicating the register tier used with the current Price Tier. Valid values for the Number of Price Tiers sub-field are from 0 to 15 reflecting no tiers in use (0) to fifteen or more tiers available (15). The meaning of value 0xF is dependant on the value of the optional the Extended Number of Price Tiers field. Absence of this field, or a value of 0x00 in this field, indicates that maximum number of tiers available is fifteen. Where the Extended Number of Price Tiers field contains a non-zero value, the maximum number of tiers available is determined by the sum of the values of the Number of Price Tiers sub-field and the Extended Number of Price Tiers field.</description>
        </field>
        <field type="BITMAP_8_BIT" class="PriceTrailingDigitAndPriceTierBitmap">
            <name>Price Trailing Digit And Tier</name>
        </field>
        <field type="BITMAP_8_BIT" class="PriceNumberOfPriceTiersAndRegisterTierBitmap">
            <name>Number Of Price Tiers</name>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime field to denote the time at which the price signal becomes valid. A Start Time of 0x00000000 is a special time denoting &#8220;now&#8221;. If the device would send a price with a Start Time of now, adjust the Duration In Minutes field to correspond to the remainder of the price. An unsigned 16-bit field used to denote the amount of time in minutes after the Start Time during which the price signal is valid. Maximum value means &#8220;until changed&#8221;. If Block Charging only is in use, the Duration in Minutes field of the Publish Price command shall be set to 0xFFFF indicating the price is valid &#8220;until changed&#8221;.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Duration</name>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Price</name>
            <description>An unsigned 32-bit field containing the price of the commodity measured in base unit of Currency per Unit of Measure with the decimal point located as indicated by the Price Trailing Digit field when the commodity is delivered to the premises.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Price Ratio</name>
            <description>An unsigned 8-bit field that gives the ratio of the price denoted in the Price field to the &#8220;normal&#8221; price chosen by the commodity provider. This field is thought to be useful in situations where CLIENT devices may simply be interested in pricing levels or ratios. The value in this field should be scaled by a factor of 0.1, giving a range of ratios from 0.1 to 25.4. A value of 0xFF indicates the field is not used and 0x00 is an invalid value.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Generation Price</name>
            <description>An unsigned 32-bit field containing the price of the commodity measured in base unit of Currency per Unit of Measure with the decimal point located as indicated by the Price Trailing Digit field when the commodity is received from the premises. An example use of this field is in energy markets where the price of electricity from the grid is different than the price of electricity placed on the grid. A value of 0xFFFFFFFF indicates the field is not used.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Generation Price Ratio</name>
            <description>An unsigned 8-bit field that gives the ratio of the price denoted in the Generation Price field to the &#8220;normal&#8221; price chosen by the commodity provider. This field is thought to be useful in situations where CLIENT devices may simply be interested in pricing levels or ratios. The value in this field should be scaled by a factor of 0.1, giving a range of ratios from 0.1 to 25.4 A value of 0xFF indicates the field is not used and 0x00 is an invalid value.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Alternate Cost Delivered</name>
            <description>An unsigned 32-bit Integer field that provides a mechanism to describe an alternative measure of the cost of the energy consumed. An example of an Alternate Cost might be the emissions of CO2 for each kWh of electricity consumed providing a measure of the environmental cost. Another example is the emissions of CO2 for each cubic meter of gas consumed (for gas metering). A different value for each price tier may be provided which can be used to reflect the different mix of generation that is associated with different TOU rates. A value of 0xFFFFFFFF indicates the field is not used.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="AlternateCostUnitEnum">
            <name>Alternate Cost Unit</name>
            <description>An 8-bit enumeration identifying the unit for the Alternate Cost Delivered field. A value of 0xFF indicates the field is not used.</description>
        </field>
        <field type="BITMAP_8_BIT" class="AlternateCostTrailingDigitBitmap">
            <name>Alternate Cost Trailing Digit</name>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Block Thresholds</name>
        </field>
        <field type="BITMAP_8_BIT" class="PriceControlMaskBitmap">
            <name>Price Control</name>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Generation Tiers</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="GenerationTierEnum">
            <name>Generation Tier</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="ExtendedNumberOfPriceTiersEnum">
            <name>Extended Number Of Price Tiers</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="ExtendedPriceTierEnum">
            <name>Extended Price Tier</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="ExtendedRegisterTierEnum">
            <name>Extended Register Tier</name>
        </field>
    </command>
    <command code="0x01" source="server">
        <name>Publish Block Period Command</name>
        <description>The Publish Block Period command is generated in response to receiving a Get Block Period(s) command or when an update to the block tariff schedule is available from the commodity provider. When the Get Block Period(s) command is received over the ZigBee Smart Energy network, the Publish Block Period command(s) should be sent unicast to the requestor. In the case of an update to the block tariff schedule from the commodity provider, the Publish Block Period command should be unicast to all individually registered devices implementing the Price Cluster on the ZigBee Smart Energy network. &lt;br&gt; Devices capable of receiving this command must be capable of storing and supporting two block periods, the current active block and the next block. By supporting two block periods, receiving devices will allow the Publish Block Period command generator to publish the next block information during the current block period.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new block period information is provided that replaces older information for the same period, this field allows devices to determine which information is newer. It is expected that the value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish Block Period command was issued. Thus, newer block period information will have a value in the Issuer Event ID field that is larger than older block information.</description>
        </field>
        <field type="UTCTIME">
            <name>Block Period Start Time</name>
            <description>A UTCTime field to denote the time at which the block tariff period starts. A start time of 0x00000000 is a special time denoting &#8220;now&#8221;. If the device would send an event with a Start Time of now, adjust the Duration In Minutes field to correspond to the remainder of the event. A start date/time of 0xFFFFFFFF shall cause an existing PublishBlockPeriod command with the same Provider ID and Issuer Event ID to be cancelled (note that, in markets where permanently active price information is required for billing purposes, it is recommended that a replacement/superseding Publish Block Period command is used in place of this cancellation mechanism).</description>
            <description>Where the Duration Timebase is set to a value other than Minutes, the Duration Control sub field provides further clarification; where Duration Control is set to Start of Timebase, the Block Period Start Time shall be set to 00:00:00 on the applicable date, and where Duration Control is set to End of Timebase, the Block Period Start Time shall be set to 23:59:59 on the applicable date.</description>
        </field>
        <field type="UNSIGNED_24_BIT_INTEGER">
            <name>Block Period Duration</name>
            <description>An unsigned 24-bit field to denote the block tariff period . The duration units are defined by the Block Period Duration Type field. Maximum value (0xFFFFFF) means &apos;until changed&apos;.</description>
        </field>
        <field type="BITMAP_8_BIT">
            <name>Block Period Control</name>
            <description>Identifies additional control options for the block period event. A value of 0x00 indicates field not used. Indicates whether a Price Acknowledgment command shall be returned on receipt of this Publish Block Period command. Repeating Block: Indicates whether a block period repeats on expiry. Note that the interaction between Block and Billing periods is out of scope of this specification.</description>
        </field>
        <field type="BITMAP_8_BIT" class="BlockPeriodControlBitmap">
            <name>Block Period Duration Type</name>
            <description>An 8-bit bitmap where the least significant nibble is an enumerated sub-field indicating the time base used for the duration, and the most significant nibble is an enumerated sub-field providing duration control</description>
            <description>Where the Duration Timebase is set to a value other than Minutes, the Duration Control sub field provides further clarification; Start of Timebase indicates that the duration shall run from the START of the respective day, week or month, whereas End of Timebase shall indicate that the duration runs from the END of the respective day, week or month. The Duration Control sub-field shall be set to Not Specified when a timebase of Minutes is in use.</description>
        </field>
        <field type="BITMAP_8_BIT" class="BlockPeriodDurationTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). The most significant nibble is reserved.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="TariffTypeEnum">
            <name>Tariff Resolution Period</name>
            <description>An 8 bit enumeration identifying the resolution period for the block tariff.</description>
            <description>The Tariff Resolution of Block Period means that the Block Tariff is applied based on calculations to the Block Thresholds defined in the command set without smoothing. The Tariff resolution period of 1 Day means that the application should apply &#8220;daily resolution&#8221;, with recalculation of the thresholds through the Block Period to achieve the same result for the end of the Block Period but smoothing out the tariff application for the customer. This is described as follows:</description>
        </field>
    </command>
    <command code="0x02" source="server">
        <name>Publish Conversion Factor Command</name>
        <description>The PublishConversionFactor command is sent in response to a GetConversionFactor command or if a new conversion factor is available. Clients shall be capable of storing at least two instances of the Conversion Factor, the currently active one and the next one.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime field to denote the time at which the value becomes valid. The value remains valid until replaced by a newer one.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Conversion Factor</name>
            <description>See Price Cluster Commodity attributes.</description>
        </field>
        <field type="BITMAP_8_BIT" class="ConversionFactorTrailingDigitBitmap">
            <name>Conversion Factor Trailing Digit</name>
            <description>See Price Cluster Commodity attributes.</description>
        </field>
    </command>
    <command code="0x03" source="server">
        <name>Publish Calorific Value Command</name>
        <description>The PublishCalorificValue command is sent in response to a GetCalorificValue command or if a new calorific value is available. Clients shall be capable of storing at least two instances of the Calorific Value, the currently active one and the next one.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Calorific Value</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="CalorificValueUnitEnum">
            <name>Calorific Value Unit</name>
        </field>
        <field type="BITMAP_8_BIT" class="CalorificValueTrailingDigitBitmap">
            <name>Calorific Value Trailing Digit</name>
        </field>
    </command>
    <command code="0x04" source="server">
        <name>Publish Tariff Information Command</name>
        <description>The PublishTariffInformation command is sent in response to a GetTariffInformation command or if new tariff information is available (including Price Matrix and Block Thresholds). Clients should be capable of storing at least two instances of the Tariff Information, the currently active and the next one. Note that there may be separate tariff information for consumption delivered and received. &lt;br&gt; Note that the payload for this command could be up to 61 bytes in length, therefore fragmentation may be required. &lt;br&gt; If the CLIENT is unable to store this PublishTariffInformation command, the device should respond using a ZCL Default Response with a status of INSUFFICIENT_SPACE.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>A unique identifier for the commodity supplier. The ProviderID in this command will always be the one stored as the attribute except for the case where a change of supplier is pending and the new supplier wishes to publish its tariff information in advance.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity supplier.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime  field to denote the time at which the price signal becomes valid. A start date/time of 0x00000000 shall indicate that the command should be executed immediately. An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type as detailed in Table D-108 (Generation Meters shall use the &#8216;Received&#8217; Tariff), the most significant nibble represents an enumeration specifying the charging scheme</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeChargingSchemeBitmap">
            <name>Tariff Type</name>
        </field>
        <field type="OCTET_STRING">
            <name>Tariff Label</name>
            <description>The format and use of this field is the same as for the TariffLabel attribute or ReceivedTariffLabel attribute (depending on TariffType). The format and use of this field is the same as for the NumberofPriceTiersInUse attribute or ReceivedNumberofPriceTiersInUse attribute (depending on TariffType/Charging Scheme). The format and use of this field is the same as for the NumberofBlockThresholdsInUse attribute or ReceivedNumberofBlockThresholdsInUse attribute (depending on TariffType/Charging Scheme).</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Price Tiers</name>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Block Thresholds</name>
        </field>
        <field type="ENUMERATION_8_BIT" class="UnitOfMeasureEnum">
            <name>Unit Of Measure</name>
            <description>The format and use of this field is the same as for the Unit of Measure attribute.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Currency</name>
            <description>The format and use of this field is the same as for the Currency attribute.</description>
        </field>
        <field type="BITMAP_8_BIT" class="PriceTrailingDigitBitmap">
            <name>Price Trailing Digit</name>
            <description>The format and use of this field is the same as for the PriceTrailingDigit attribute.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Standing Charge</name>
            <description>The format and use of this field is the same as for the StandingCharge attribute. A value of 0xFFFFFFFF indicates the field is not used. When publishing Received tariffs (according to TariffType) this field should be set to 0xFFFFFFFF.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER" class="TierBlockModeEnum">
            <name>Tier Block Mode</name>
            <description>The format and use of this field is the same as for the TierBlockMode attribute or ReceivedTierBlockMode attribute (depending on TariffType ). In case of TOU or Block Charging only, this field is not used and shall be set to 0xFF. For combined Block/TOU charging, this field is mandatory and must be set to a valid value.</description>
        </field>
        <field type="UNSIGNED_24_BIT_INTEGER">
            <name>Block Threshold Multiplier</name>
            <description>BlockThresholdMultiplier provides a value to be multiplied against Threshold parameter(s). If present, this attribute must be applied to all Block Threshold values to derive values that can be compared against the CurrentBlockPeriodConsumptionDelivered attribute within the Metering cluster. This parameter must be used in conjunction with the BlockThresholdDivisor parameter(s). In case no multiplier is defined, this field shall be set to 1.</description>
        </field>
        <field type="UNSIGNED_24_BIT_INTEGER">
            <name>Block Threshold Divisor</name>
            <description>BlockThresholdDivisor provides a value to divide the result of applying the ThresholdMultiplier attribute to Block Threshold values to derive values that can be compared against the CurrentBlockPeriodConsumptionDelivered attribute within the Metering cluster. This attribute must be used in conjunction with the BlockThresholdMultiplier parameter(s). In case no divisor is defined, this field shall be set to 1.</description>
        </field>
    </command>
    <command code="0x05" source="server">
        <name>Publish Price Matrix Command</name>
        <description>The PublishPriceMatrix command is used to publish the Block Price Information Set (up to 15 tiers x 15 blocks) and the Extended Price Information Set (up to 48 tiers). The PublishPriceMatrix command is sent in response to a GetPriceMatrix command. Clients should be capable of storing at least two instances of the Price Matrix, the currently active and the next one. There may be a separate Price Matrix for consumption delivered and received; in this case, each Price Matrix will be identified by a different IssuerTariffId value. The Price server shall send only the number of tiers and blocks as defined in the corresponding PublishTariffInformation command (NumberofPriceTiersinUse, NumberofBlockThresholdsinUse+1) &lt;br&gt; The maximum application payload may not be sufficient to transfer all Price Matrix elements in one command. Therefore the ESI may send as many PublishPriceMatrix commands as needed. In this case the first command shall have CommandIndex set to 0, the second to 1 and so on; all associated commands shall use the same value of Issuer Event ID. Note that, in this case, it is the client&#8217;s responsibility to ensure that it receives all associated PublishPriceMatrix commands before any of the payloads can be used.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime  field to denote the time at which the price signal becomes valid. A start date/time of 0x00000000 shall indicate that the command should be executed immediately.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity supplier. This must match the Issuer Tariff ID sent in the related PublishTariffInformation command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Command Index</name>
            <description>The Command Index is used to count the payload fragments in the case that an entire payload does not fit into one message. The Command Index starts at 0 and is incremented for each fragment belonging to the same command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Total Number Of Commands</name>
            <description>In the case that an entire payload does not fit into one message, the Total Number of Commands field indicates the total number of sub-commands in the message. An 8-bit bitmap, the least significant bit of which specifies the information type stored in the sub payload. The remaining bits are reserved. the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="BITMAP_8_BIT" class="PriceMatrixSubPayloadControlBitmap">
            <name>Sub Payload Control</name>
        </field>
        <field class="PriceMatrixSubPayload">
            <name>Price Matrix Sub Payload</name>
        </field>
    </command>
    <command code="0x06" source="server">
        <name>Publish Block Thresholds Command</name>
        <description>The PublishBlockThresholds command is sent in response to a GetBlockThresholds command. Clients should be capable of storing at least two instances of the Block Thresholds, the currently active and the next one. &lt;br&gt; There may be a separate set of Block Thresholds for consumption delivered and received; in this case, each set of Block Thresholds will be identified by a different IssuerTariffId value. &lt;br&gt; The price server shall send only the number of block thresholds in use (NumberofBlockThresholdsInUse) as defined in the PublishTariffInformation command. &lt;br&gt; The maximum application payload may not be sufficient to transfer all thresholds in one command. In this case the Price server may send two consecutive PublishBlockThreshold commands (CommandIndex set to 0 and 1 respectively); both commands shall use the same value of Issuer Event ID. Note that, in this case, it is the client&#8217;s responsibility to ensure that it receives all associated PublishBlockThreshold commands before any of the payloads can be used.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime  field to denote the time at which the price signal becomes valid. A start date/time of 0x00000000 shall indicate that the command should be executed immediately.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity supplier. This must match the Issuer Tariff ID sent in the related PublishTariffInformation command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Command Index</name>
            <description>The Command Index is used to count the payload fragments in the case where the entire payload does not fit into one message. The Command Index starts at 0 and is incremented for each fragment belonging to the same command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Total Number Of Commands</name>
            <description>In the case where the entire payload does not fit into one message, the Total Number of Commands field indicates the total number of sub9242 commands in the message. The Sub-Payload Control bitmap specifies the usage of the information contained within the Block Threshold Sub-Payload The BlockThreshold Sub-Payload consists of multiple sets of data which consist of a Tier ID, Block Threshold Count and the threshold values associated with the stated Tier. The number of thresholds contained in any one set is identified in the NumberOfBlockThresholds sub-field.</description>
        </field>
        <field type="BITMAP_8_BIT" class="BlockThresholdSubPayloadControlBitmap">
            <name>Sub Payload Control</name>
            <description>The Sub-Payload Control bitmap specifies the usage of the information contained within the Block Threshold Sub-Payload.</description>
        </field>
        <field class="BlockThresholdSubPayload">
            <name>Block Threshold Sub Payload</name>
            <description>The BlockThreshold Sub-Payload consists of multiple sets of data which consist of a Tier ID, Block Threshold Count and the threshold values associated with the stated Tier. The number of thresholds contained in any one set is identified in the NumberOfBlockThresholds sub-field.</description>
        </field>
    </command>
    <command code="0x07" source="server">
        <name>Publish CO2 Value Command</name>
        <description>The PublishCO2Value command is sent in response to a GetCO2Value command or if a new CO2 conversion factor is available. Clients should be capable of storing at least two instances of the CO2 conversion factor, the currently active and the next one.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime  field to denote the time at which the CO2 value becomes valid. A start date/time of 0x00000000 shall indicate that the command should be executed immediately. A start date/time of 0xFFFFFFFF shall cause an existing PublishCO2Value command with the same Provider ID and Issuer Event ID to be cancelled (note that, in markets where permanently active price information is required for billing purposes, it is recommended that a replacement/superseding PublishCO2Value command is used in place of this cancellation mechanism).</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type as detailed in Table D-108 (Generation Meters shall use the &#8216;Received&#8217; Tariff). The most significant nibble is reserved.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>CO2 Value</name>
            <description>The format and use of this field is the same as for the CO2 attribute or ReceivedCO2 attribute (depending on TariffType) as defined in D.4.2.2.7.9 and D.4.2.2.15.6 respectively. A value of 0xFFFFFFFF indicates field not used. The format and use of this field is the same as for the CO2Unit attribute or ReceivedCO2Unit attribute (depending on TariffType) as defined in D.4.2.2.7.10 and D.4.2.2.15.7 respectively. A value of 0xFF indicates field not used. The format and use of this field is the same as for the CO2TrailingDigit attribute or ReceivedCO2TrailingDigit attribute (depending on TariffType) as defined in D.4.2.2.7.11 and D.4.2.2.15.8 respectively. A value of 0xFF indicates field not used.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="CO2UnitEnum">
            <name>CO2 Value Unit</name>
        </field>
        <field type="BITMAP_8_BIT" class="CO2TrailingDigitBitmap">
            <name>CO2 Value Trailing Digit</name>
        </field>
    </command>
    <command code="0x08" source="server">
        <name>Publish Tier Labels Command</name>
        <description>The PublishTierLabels command is generated in response to receiving a GetTierLabels command or when there is a tier label change</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. It is expected that the value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity supplier. This is used to identify the tariff that the labels apply to.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Command Index</name>
            <description>The Command Index is used to count the payload fragments in the case where the entire payload does not fit into one message. The Command Index starts at 0 and is incremented for each fragment belonging to the same command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Total Number Of Commands</name>
            <description>In the case where the entire payload does not fit into one message, the Total Number of Commands field indicates the total number of sub commands in the message.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Number Of Labels</name>
            <description>The number of Tier ID/Tier Label sets contained within the command.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Tier ID</name>
            <description>The tier number that the associated Tier Label applies to.</description>
        </field>
        <field type="OCTET_STRING">
            <name>Tier Label</name>
            <description>ZCL Octet String field capable of storing a 12 character string (the first character indicates the string length, represented in hexadecimal format) encoded in the UTF-8 format.</description>
        </field>
    </command>
    <command code="0x09" source="server">
        <name>Publish Billing Period Command</name>
        <description>The PublishBillingPeriod command is generated in response to receiving a GetBillingPeriod(s) command or when an update to the Billing schedule is available from the commodity supplier. Nested and overlapping PublishBillingPeriod commands are not allowed. In the case of overlapping billing periods, the period with the newer IssuerEventID takes priority over all nested and overlapping periods. All existing periods that overlap, even partially, should be removed. Note however that there may be separate billing schedules for consumption delivered and received.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Billing Period Start Time</name>
            <description>A UTCTime  field to denote the time at which the billing period starts. A start time of 0x00000000 is a special time denoting &#8220;now&#8221;. A start date/time of 0xFFFFFFFF shall cause an existing PublishBillingPeriod command with the same Provider ID and Issuer Event ID to be cancelled (note that, in markets where permanently active price information is required for billing purposes, it is recommended that a replacement/superseding PublishBillingPeriod command is used in place of this cancellation mechanism).</description>
        </field>
        <field type="UNSIGNED_24_BIT_INTEGER" class="BillingPeriodDurationEnum">
            <name>Billing Period Duration</name>
            <description>An unsigned 24-bit field to denote the billing period duration. The duration units are defined by the Billing Period Duration Type field. Billing periods are always repeating, i.e. after BillingPeriodDuration has elapsed since a BillingPeriodStartTime, a new billing period will start with the same duration.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER" class="BillingPeriodDurationTypeEnum">
            <name>Billing Period Duration Type</name>
            <description>An 8-bit bitmap where the least significant nibble is an enumerated sub-field indicating the time base used for the duration, and the most significant nibble is an enumerated sub-field providing duration control.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). The most significant nibble is reserved.</description>
        </field>
    </command>
    <command code="0x0A" source="server">
        <name>Publish Consolidated Bill Command</name>
        <description>The PublishConsolidatedBill command is used to make consolidated billing information from previous billing periods available to other end devices. This command is issued in response to a GetConsolidatedBill command or if new billing information is available. Nested and overlapping PublishConsolidatedBill commands are not allowed. In the case of overlapping consolidated bills, the bill with the newer IssuerEventID takes priority over all nested and overlapping bills. All existing bills that overlap, even partially, should be removed. &lt;br&gt; Note however that there may be separate consolidated bills for consumption delivered and received.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Billing Period Start Time</name>
            <description>A UTCTime  field containing the start time of the related billing period. A start date/time of 0x00000000 shall indicate that the command should be executed immediately. A start date/time of 0xFFFFFFFF shall cause an existing PublishConsolidatedBill command with the same Provider ID and Issuer Event ID to be cancelled (note that, in markets where permanently active price information is required for billing purposes, it is recommended that a replacement/superseding PublishConsolidatedBill command is used in place of this cancellation mechanism).</description>
        </field>
        <field type="UNSIGNED_24_BIT_INTEGER" class="BillingPeriodDurationEnum">
            <name>Billing Period Duration</name>
            <description>An unsigned 24-bit field denoting the duration of the related billing period. The duration units are defined by the Billing Period Duration Type field.</description>
        </field>
        <field type="UNSIGNED_8_BIT_INTEGER" class="BillingPeriodDurationTypeEnum">
            <name>Billing Period Duration Type</name>
            <description>An 8-bit bitmap where the least significant nibble is an enumerated sub-field indicating the time base used for the duration, and the most significant nibble is an enumerated sub-field providing duration control.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type as detailed in</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Consolidated Bill</name>
            <description>An unsigned 32-bit field containing the consolidated bill value for the stated billing period. The Consolidated Bill field should be provided in the same currency as used in the Price cluster.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Currency</name>
            <description>An unsigned 16-bit field containing identifying information concerning the local unit of currency used in the Consolidated Bill field. The value of the currency field should match the values defined by ISO 4217.</description>
        </field>
        <field type="BITMAP_8_BIT" class="BillTrailingDigitBitmap">
            <name>Bill Trailing Digit</name>
            <description>An 8-bit field used to determine where the decimal point is located in the Consolidated Bill field. The most significant nibble contains the Trailing Digit sub field which indicates the number of digits to the right of the decimal point.</description>
        </field>
    </command>
    <command code="0x0B" source="server">
        <name>Publish Cpp Event Command</name>
        <description>The PublishCPPEvent command is sent from an ESI to its Price clients to notify them of a Critical Peak Pricing (CPP) event. &lt;br&gt; When the PublishCPPEvent command is received, the IHD or Meter shall act in one of two ways: 1. It shall notify the consumer that there is a CPP event that requires acknowledgment. The acknowledgement shall be either to accept the CPPEvent or reject the CPPEvent (in which case it shall send the CPPEventResponse command, with the CPPAuth parameter set to Accepted or Rejected). It is recommended that the CPP event is ignored until a consumer either accepts or rejects the event. 2. The CPPAuth parameter is set to &#8220;Forced&#8221;, in which case the CPPEvent has been accepted.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information. A start date/time of 0x00000000 shall indicate that the command should be executed immediately. A start date/time of 0xFFFFFFFF shall cause an existing PublishCPPEvent command with the same Provider ID and Issuer Event ID to be cancelled (note that, in markets where permanently active price information is required for billing purposes, it is recommended that a replacement/superseding PublishCPPEvent command is used in place of this cancellation mechanism). Duration in Minutes: Defines the duration of the CPP event.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Duration In Minutes</name>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff published in this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). The most significant nibble is reserved.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="CppPriceTierEnum">
            <name>Cpp Price Tier</name>
            <description>An 8-bit enumeration identifying the price tier associated with this CPP event. The price(s) contained in the active price matrix for that price tier will override the normal pricing scheme. Prices &#8216;CPP1&#8217; and &#8216;CPP2&#8217; are reserved for this purposes.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="PublishCppEventCppAuthEnum">
            <name>Cpp Auth</name>
            <description>An 8-bit enumeration identifying the status of the CPP event:</description>
        </field>
    </command>
    <command code="0x0C" source="server">
        <name>Publish Credit Payment Command</name>
        <description>The PublishCreditPayment command is used to update the credit payment information when available. &lt;br&gt; Nested and overlapping PublishCreditPayment commands are not allowed. In the case of overlapping credit payments, the payment with the newer Issuer Event ID takes priority over all nested and overlapping payments. All existing payments that overlap, even partially, should be removed.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Credit Payment Due Date</name>
            <description>A UTCTime field containing the time that the next credit payment is due.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Credit Payment Overdue Amount</name>
            <description>An unsigned 32-bit field denoting the current amount this is overdue from the consumer. This field should be provided in the same currency as used in the Price cluster.</description>
        </field>
        <field type="ENUMERATION_8_BIT" class="CreditPaymentStatusEnum">
            <name>Credit Payment Status</name>
            <description>An 8-bit enumeration identifying the current credit payment status.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Credit Payment</name>
            <description>An unsigned 32-bit field denoting the last credit payment. This field should be provided in the same currency as used in the Price cluster.</description>
        </field>
        <field type="UTCTIME">
            <name>Credit Payment Date</name>
            <description>A UTCTime  field containing the time at which the last credit payment was made.</description>
        </field>
        <field type="OCTET_STRING">
            <name>Credit Payment Ref</name>
            <description>An string of between 0-20 octets used to denote the last credit payment reference used by the energy supplier.</description>
        </field>
    </command>
    <command code="0x0D" source="server">
        <name>Publish Currency Conversion Command</name>
        <description>The PublishCurrencyConversion command is sent in response to a GetCurrencyConversion command or when a new currency becomes available.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Event ID</name>
            <description>Unique identifier generated by the commodity provider. When new information is provided that replaces older information for the same time period, this field allows devices to determine which information is newer. The value contained in this field is a unique number managed by upstream servers or a UTC based time stamp (UTCTime data type) identifying when the Publish command was issued. Thus, newer information will have a value in the Issuer Event ID field that is larger than older information.</description>
        </field>
        <field type="UTCTIME">
            <name>Start Time</name>
            <description>A UTCTime  field to denote the time at which the new currency becomes valid. A start date/time of 0x00000000 shall indicate that the command should be executed immediately. A start date/time of 0xFFFFFFFF shall cause an existing but pending PublishCurrencyConversion command with the same Provider ID and Issuer Event ID to be cancelled.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Old Currency</name>
            <description>An unsigned 16-bit field containing identifying information concerning the old local unit of currency used in the Price cluster. The value of the Old Currency field should match the values defined by ISO 4217.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>New Currency</name>
            <description>An unsigned 16-bit field containing identifying information concerning the new local unit of currency used in the Price cluster. The value of the New Currency field should match the values defined by ISO 4217.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Conversion Factor</name>
            <description>The format and use of this field is the same as for the ConversionFactor attribute.</description>
        </field>
        <field type="BITMAP_8_BIT" class="ConversionFactorTrailingDigitBitmap">
            <name>Conversion Factor Trailing Digit</name>
            <description>The format and use of this field is the same as for the ConversionFactorTrailingDigit attribute.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER" class="CurrencyChangeControlEnum">
            <name>Currency Change Control Flags</name>
            <description>A 32-bit mask that denotes the functions that are required to be carried out on processing of this command.</description>
        </field>
    </command>
    <command code="0x0E" source="server">
        <name>Cancel Tariff Command</name>
        <description>The CancelTariff command indicates that all data associated with a particular tariff instance should be discarded. &lt;br&gt; In markets where permanently active price information is required for billing purposes, it is recommended that replacement/superseding PublishTariffInformation, PublishPriceMatrix, PublishBlockThresholds and PublishTierLabels commands are used in place of a CancelTariff command.</description>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Provider ID</name>
            <description>An unsigned 32-bit field containing a unique identifier for the commodity provider. This field allows differentiation in deregulated markets where multiple commodity providers may be available.</description>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Issuer Tariff ID</name>
            <description>Unique identifier generated by the commodity Supplier. All parts of a tariff instance shall have the same Issuer Tariff ID.</description>
        </field>
        <field type="BITMAP_8_BIT" class="TariffTypeBitmap">
            <name>Tariff Type</name>
            <description>An 8-bit bitmap identifying the type of tariff to be cancelled by this command. The least significant nibble represents an enumeration of the tariff type (Generation Meters shall use the &#8216;Received&#8217; Tariff). The most significant nibble is reserved.</description>
        </field>
    </command>
    <attribute code="0x0000" type="UNSIGNED_8_BIT_INTEGER" side="client" optional="true" writable="true" reportable="false" minimum="0x00" maximum="0x3C" default="0x05">
        <name>Price Increase Randomize Minutes</name>
        <description>The PriceIncreaseRandomizeMinutes attribute represents the maximum amount of time to be used when randomizing the response to a price increase. Note that although the granularity of the attribute is in minutes, it is recommended the granularity of the randomization used within a responding device be in seconds or smaller. If a device responds to a price increase it must choose a random amount of time, in seconds or smaller, between 0 and PriceIncreaseRandomizeMinutes minutes. The device must implement that random amount of time before or after the price change. How and if a device will respond to a price increase is up to the manufacturer. Whether to respond before or after the price increase is also up to the manufacturer.</description>
        <description>As an example, a water heater with a PriceIncreaseRandomizeMinutes set to 6 could choose to lower its set point 315 seconds (but not more than 360 seconds) before the price increases.</description>
        <description>The valid range for this attribute is 0x00 to 0x3C.</description>
        <description>If PriceIncreaseRandomizeMinutes or PriceDecreaseRandomizeMinutes attributes are not supported by the CLIENT, then it should use the default values for the attributes as specified in the Price CLIENT Cluster Attribute table.</description>
    </attribute>
    <attribute code="0x0001" type="UNSIGNED_8_BIT_INTEGER" side="client" optional="true" writable="true" reportable="false" minimum="0x00" maximum="0x3C" default="0x0F">
        <name>Price Decrease Randomize Minutes</name>
        <description>The PriceDecreaseRandomizeMinutes attribute represents the maximum number of minutes to be used when randomizing the response to a price decrease. Note that although the granularity of the attribute is in minutes, it is recommended the granularity of the randomization used within a responding device be in seconds or smaller. If a device responds to a price decrease it must choose a random amount of time, in seconds or smaller, between 0 and PriceDecreaseRandomizeMinutes minutes and implement that random amount of time before or after the price change. How and if a device will respond to a price decrease is up to the manufacturer. Whether to respond before or after the price increase is also up to the manufacturer.</description>
        <description>As an example, a dishwasher with a PriceDecreaseRandomizeMinutes set to 15 could choose to start its wash cycle 723 seconds (but not more than 900 seconds) after the price decreases. The valid range for this attribute is 0x00 to 0x3C.</description>
    </attribute>
    <attribute code="0x0002" type="ENUMERATION_8_BIT" side="client" optional="true" writable="true" reportable="false">
        <name>Commodity Type Client</name>
        <description>CommodityType provides a label for identifying the type of pricing client present. The attribute is an enumerated value representing the commodity. The defined values are represented by the non-mirrored values (0-127) in the MeteringDeviceType attribute enumerations.</description>
    </attribute>
    <attribute code="0x0000" arraystart="1" arraycount="48" type="CHARACTER_STRING" side="server" optional="true" writable="true" reportable="false">
        <name>Tier {{count}} Price Label</name>
    </attribute>
    <attribute code="0x0100" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x010F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Block Threshold Count</name>
        <description>Where a single set of thresholds is used, the BlockThresholdCount attribute indicates the number of applicable BlockNThresholds. Where more than one set of thresholds is used, each set will be accompanied by an appropriate TierNBlockThresholdCount attribute.</description>
    </attribute>
    <attribute code="0x0110" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 1 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x011F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 1 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0120" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 2 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x012F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 2 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0130" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 3 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x013F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 3 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0140" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 4 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x014F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 4 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0150" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 5 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x015F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 5 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0160" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 6 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x016F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 6 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0170" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 7 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x017F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 7 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0180" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 8 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x018F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 8 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0190" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 9 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x019F" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 9 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01A0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 10 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01AF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 10 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01B0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 11 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01BF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 11 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01C0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 12 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01CF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 12 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01D0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 13 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01DF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 13 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01E0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 14 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01EF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 14 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x01F0" arraystart="1" arraycount="15" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 15 Block {{count}} Threshold</name>
        <description>Attributes Block1Threshold through Block15Threshold represent the block threshold values for a given period (typically the billing cycle). These values may be updated by the utility on a seasonal or annual basis. The thresholds are established such that crossing the threshold of energy consumption for the present block activates the next higher block, which can affect the energy rate in a positive or negative manner. The values are absolute and always increasing. The values represent the threshold at the end of a block. The Unit of Measure will be based on the</description>
    </attribute>
    <attribute code="0x01FF" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 15 Block Threshold Count</name>
        <description>The TierNBlockThresholdCount attributes hold the number of block thresholds applicable to a given tier. These attributes are used in the case when a combination (TOU/Hybrid) tariff has a separate set of thresholds for each TOU tier. Unused TierNBlockThresholdCount attributes shall be set to zero.</description>
    </attribute>
    <attribute code="0x0200" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Start of Block Period</name>
        <description>The StartofBlockPeriod attribute represents the start time of the current block tariff period. A change indicates that a new Block Period is in effect.</description>
    </attribute>
    <attribute code="0x0201" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Block Period Duration</name>
        <description>The BlockPeriodDuration attribute represents the current block tariff period duration in units defined by the BlockPeriodDurationType attribute. A change indicates that only the duration of the current Block Period has been modified. A client device shall expect a new Block Period following the expiration of the new duration.</description>
    </attribute>
    <attribute code="0x0202" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Threshold Multiplier</name>
        <description>ThresholdMultiplier provides a value to be multiplied against Threshold attributes. If present, this attribute must be applied to all Block Threshold values to derive values that can be compared against the CurrentBlockPeriodConsumptionDelivered attribute within the Metering cluster. This attribute must be used in conjunction with the ThresholdDivisor attribute. An attribute value of zero shall result in a unitary multiplier (0x000001).</description>
    </attribute>
    <attribute code="0x0203" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Threshold Divisor</name>
        <description>ThresholdDivisor provides a value to divide the result of applying the ThresholdMultiplier attribute to Block Threshold values to derive values that can be compared against the CurrentBlockPeriodConsumptionDelivered attribute within the Metering cluster. This attribute must be used in conjunction with the ThresholdMultiplier attribute. An attribute value of zero shall result in a unitary divisor (0x000001).</description>
    </attribute>
    <attribute code="0x0204" type="BITMAP_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Block Period Duration Type</name>
        <description>The BlockPeriodDurationType attribute indicates the timebase used for the BlockPeriodDuration attribute. A default value of 0x00 (Minutes) shall be assumed if this attribute is not present.</description>
    </attribute>
    <attribute code="0x0300" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Commodity Type Server</name>
        <description>CommodityType provides a label for identifying the type of pricing CLIENT present. The attribute is an enumerated value representing the commodity.</description>
    </attribute>
    <attribute code="0x0301" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Standing Charge</name>
        <description>The value of the Standing Charge is a daily fixed charge associated with supplying the commodity, measured in base unit of Currency with the decimal point located as indicated by the Trailing Digits field of a Publish Price command or PriceTrailingDigit attribute. A value of 0xFFFFFFFF indicates attribute not used.</description>
    </attribute>
    <attribute code="0x0302" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Conversion Factor</name>
    </attribute>
    <attribute code="0x0303" type="BITMAP_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Conversion Factor Trailing Digit</name>
    </attribute>
    <attribute code="0x0304" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Calorific Value</name>
    </attribute>
    <attribute code="0x0305" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Calorific Value Unit</name>
    </attribute>
    <attribute code="0x0306" type="BITMAP_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Calorific Value Trailing Digit</name>
    </attribute>
    <attribute code="0x0400" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>No Tier Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0410" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 1 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0420" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 2 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0430" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 3 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0440" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 4 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0450" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 5 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0460" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 6 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0470" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 7 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0480" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 8 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x0490" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 9 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04A0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 10 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04B0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 11 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04C0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 12 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04D0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 13 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04E0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 14 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x04F0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Tier 15 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x050F" arraystart="16" arraycount="32" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Price Tier {{count}}</name>
        <description>Attributes PriceTier16 through PriceTier48 represent the price of Energy, Gas, or Water delivered to the premises (i.e. delivered to the customer from the utility) at a specific price tier.</description>
    </attribute>
    <attribute code="0x05FE" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Cpp 1 Price</name>
        <description>Attribute CPP1 Price represents the price of Energy, Gas, or Water delivered to the premises (i.e. delivered to the customer from the utility) while Critical Peak Pricing &#8216;CPP1&#8217; is being applied.</description>
    </attribute>
    <attribute code="0x05FF" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Cpp 2 Price</name>
        <description>Attribute CPP2 Price represents the price of Energy, Gas, or Water delivered to the premises (i.e. delivered to the customer from the utility) while Critical Peak Pricing &#8216;CPP2&#8217; is being applied.</description>
    </attribute>
    <attribute code="0x0610" type="CHARACTER_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Tariff Label</name>
    </attribute>
    <attribute code="0x0611" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Numberof Price Tiers In Use</name>
    </attribute>
    <attribute code="0x0612" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Numberof Block Thresholds In Use</name>
    </attribute>
    <attribute code="0x0613" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Tier Block Mode</name>
    </attribute>
    <attribute code="0x0615" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Unit Of Measure</name>
    </attribute>
    <attribute code="0x0616" type="UNSIGNED_16_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Currency</name>
    </attribute>
    <attribute code="0x0617" type="BITMAP_16_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Price Trailing Digit</name>
    </attribute>
    <attribute code="0x0619" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Tariff Resolution Period</name>
        <description>An 8 bit enumeration identifying the resolution period for Block Tariff</description>
    </attribute>
    <attribute code="0x0620" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>CO2</name>
        <description>Used to calculate the amount of carbon dioxide (CO2) produced from energy use. Natural gas has a conversion factor of about 0.185, e.g. 1,000 kWh of gas used is responsible for the production of 185kg CO2 (0.185 x 1000 kWh). The CO2 attribute represents the current active value</description>
    </attribute>
    <attribute code="0x0621" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>CO2 Unit</name>
        <description>This attribute is an 8-bit enumeration which defines the unit for the CO2 attribute. The values and descriptions for this attribute are listed in Table D-83 below. The CO2Unit attribute represents the current active value.</description>
    </attribute>
    <attribute code="0x0622" type="BITMAP_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>CO2 Trailing Digit</name>
    </attribute>
    <attribute code="0x0700" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Current Billing Period Start</name>
        <description>The CurrentBillingPeriodStart attribute represents the start time of the current billing period.</description>
    </attribute>
    <attribute code="0x0701" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Current Billing Period Duration</name>
        <description>The CurrentBillingPeriodDuration attribute represents the current billing period duration in minutes.</description>
    </attribute>
    <attribute code="0x0702" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Last Billing Period Start</name>
        <description>The LastBillingPeriodStart attribute represents the start time of the last billing period.</description>
    </attribute>
    <attribute code="0x0703" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Last Billing Period Duration</name>
        <description>The LastBillingPeriodDuration attribute is the duration of the last billing period in minutes (start to end of last billing period).</description>
    </attribute>
    <attribute code="0x0704" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Last Billing Period Consolidated Bill</name>
        <description>The LastBillingPeriodConsolidatedBill attribute is an amount for the cost of the energy supplied from the date of the LastBillingPeriodStart attribute and until the duration of the LastBillingPeriodDuration attribute expires, measured in base unit of Currency with the decimal point located as indicated by the Trailing Digits attribute.</description>
    </attribute>
    <attribute code="0x0800" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Payment Due Date</name>
        <description>The CreditPaymentDueDate attribute indicates the date and time when the next credit payment is due to be paid by the consumer to the supplier.</description>
    </attribute>
    <attribute code="0x0801" type="ENUMERATION_8_BIT" side="server" class="CreditPaymentStatusEnum" optional="true" writable="false" reportable="false">
        <name>Credit Payment Status</name>
        <description>The CreditPaymentStatus attribute indicates the current status of the last payment.</description>
    </attribute>
    <attribute code="0x0802" type="SIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Payment Over Due Amount</name>
        <description>This is the total of the consolidated bill amounts accumulated since the last payment.</description>
    </attribute>
    <attribute code="0x080A" type="SIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Payment Discount</name>
        <description>The PaymentDiscount attribute indicates the discount that the energy supplier has applied to the consolidated bill.</description>
    </attribute>
    <attribute code="0x080B" type="ENUMERATION_8_BIT" side="server" class="PaymentDiscountPeriodEnum" optional="true" writable="false" reportable="false">
        <name>Payment Discount Period</name>
        <description>The PaymentDiscountPeriod attribute indicates the period for which this discount shall be applied for.</description>
    </attribute>
    <attribute code="0x0810" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment 1</name>
    </attribute>
    <attribute code="0x0811" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Date 1</name>
    </attribute>
    <attribute code="0x0812" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Ref 1</name>
    </attribute>
    <attribute code="0x0820" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment 2</name>
    </attribute>
    <attribute code="0x0821" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Date 2</name>
    </attribute>
    <attribute code="0x0822" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Ref 2</name>
    </attribute>
    <attribute code="0x0830" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment 3</name>
    </attribute>
    <attribute code="0x0831" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Date 3</name>
    </attribute>
    <attribute code="0x0832" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Ref 3</name>
    </attribute>
    <attribute code="0x0840" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment 4</name>
    </attribute>
    <attribute code="0x0841" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Date 4</name>
    </attribute>
    <attribute code="0x0842" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Ref 4</name>
    </attribute>
    <attribute code="0x0850" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment 5</name>
    </attribute>
    <attribute code="0x0851" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Date 5</name>
    </attribute>
    <attribute code="0x0852" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Credit Card Payment Ref 5</name>
    </attribute>
    <attribute code="0x8000" arraystart="1" arraycount="48" type="OCTET_STRING" side="server" optional="true" writable="true" reportable="false">
        <name>Received Tier {{count}} Price Label</name>
    </attribute>
    <attribute code="0x8100" arraystart="1" arraycount="16" type="UNSIGNED_48_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Block {{count}} Threshold</name>
    </attribute>
    <attribute code="0x8200" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Received Start Of Block Period</name>
    </attribute>
    <attribute code="0x8201" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Block Period Duration</name>
    </attribute>
    <attribute code="0x8202" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Threshold Multiplier</name>
    </attribute>
    <attribute code="0x8203" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Threshold Divisor</name>
    </attribute>
    <attribute code="0x8400" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx No Tier Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8410" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 1 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8420" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 2 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8430" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 3 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8440" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 4 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8450" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 5 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8460" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 6 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8470" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 7 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8480" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 8 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x8490" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 9 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84A0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 10 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84B0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 11 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84C0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 12 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84D0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 13 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84E0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 14 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x84F0" arraystart="1" arraycount="16" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Rx Tier 15 Block {{count}} Price</name>
    </attribute>
    <attribute code="0x850F" arraystart="16" arraycount="48" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Price Tier {{count}}</name>
    </attribute>
    <attribute code="0x8610" type="OCTET_STRING" side="server" optional="true" writable="false" reportable="false">
        <name>Received Tariff Label</name>
    </attribute>
    <attribute code="0x8611" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Number Of Price Tiers In Use</name>
    </attribute>
    <attribute code="0x8612" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Number Of Block Thresholds In Use</name>
    </attribute>
    <attribute code="0x8613" type="UNSIGNED_8_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Tier Block Mode</name>
    </attribute>
    <attribute code="0x8625" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received CO2</name>
    </attribute>
    <attribute code="0x8626" type="ENUMERATION_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Received CO2 Unit</name>
    </attribute>
    <attribute code="0x8627" type="BITMAP_8_BIT" side="server" optional="true" writable="false" reportable="false">
        <name>Received CO2 Trailing Digit</name>
    </attribute>
    <attribute code="0x8700" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Received Current Billing Period Start</name>
    </attribute>
    <attribute code="0x8701" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Current Billing Period Duration</name>
    </attribute>
    <attribute code="0x8702" type="UTCTIME" side="server" optional="true" writable="false" reportable="false">
        <name>Received Last Billing Period Start</name>
    </attribute>
    <attribute code="0x8703" type="UNSIGNED_24_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Last Billing Period Duration</name>
    </attribute>
    <attribute code="0x8704" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="true" writable="false" reportable="false">
        <name>Received Last Billing Period Consolidated Bill</name>
    </attribute>

    <constant type="ENUMERATION_8_BIT" class="PaymentDiscountPeriodEnum">
        <name>Payment Discount Period</name>
        <value code="0x00" name="Current Billing Period">
        </value>
        <value code="0x01" name="Current Consolidated Bill">
        </value>
        <value code="0x02" name="One Month">
        </value>
        <value code="0x03" name="One Quarter">
        </value>
        <value code="0x04" name="One Year">
        </value>
    </constant>
    <constant type="BITMAP_32_BIT" class="CreditPaymentStatusEnum">
        <name>Credit Payment Status</name>
        <value code="0x00" name="Pending">
        </value>
        <value code="0x01" name="Received/Paid">
        </value>
        <value code="0x02" name="Overdue">
        </value>
        <value code="0x03" name="Two Payments Overdue">
        </value>
        <value code="0x04" name="Three Payments Overdue">
        </value>
    </constant>
    <constant type="UNSIGNED_32_BIT_INTEGER" class="CurrencyChangeControlEnum">
        <name>Currency Change Control</name>
        <value code="0x00000001" name="Clear Billing Info">
        </value>
        <value code="0x00000002" name="Convert Billing Info Using New Currency">
        </value>
        <value code="0x00000004" name="Clear Old Consumption Data">
        </value>
        <value code="0x00000008" name="Convert Old Consumption Data Using New Currency">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="ExtendedNumberOfPriceTiersEnum">
        <name>Extended Number Of Price Tiers</name>
        <value code="0x00" name="Refer To Number Of Price Tiers Field">
        </value>
        <value code="0x01" name="Number Of Price Tiers 16">
        </value>
        <value code="0x02" name="Number Of Price Tiers 17">
        </value>
        <value code="0x03" name="Number Of Price Tiers 18">
        </value>
        <value code="0x04" name="Number Of Price Tiers 19">
        </value>
        <value code="0x05" name="Number Of Price Tiers 20">
        </value>
        <value code="0x06" name="Number Of Price Tiers 21">
        </value>
        <value code="0x07" name="Number Of Price Tiers 22">
        </value>
        <value code="0x08" name="Number Of Price Tiers 23">
        </value>
        <value code="0x09" name="Number Of Price Tiers 24">
        </value>
        <value code="0x0A" name="Number Of Price Tiers 25">
        </value>
        <value code="0x0B" name="Number Of Price Tiers 26">
        </value>
        <value code="0x0C" name="Number Of Price Tiers 27">
        </value>
        <value code="0x0D" name="Number Of Price Tiers 28">
        </value>
        <value code="0x0E" name="Number Of Price Tiers 29">
        </value>
        <value code="0x0F" name="Number Of Price Tiers 30">
        </value>
        <value code="0x10" name="Number Of Price Tiers 31">
        </value>
        <value code="0x11" name="Number Of Price Tiers 32">
        </value>
        <value code="0x12" name="Number Of Price Tiers 33">
        </value>
        <value code="0x13" name="Number Of Price Tiers 34">
        </value>
        <value code="0x14" name="Number Of Price Tiers 35">
        </value>
        <value code="0x15" name="Number Of Price Tiers 36">
        </value>
        <value code="0x16" name="Number Of Price Tiers 37">
        </value>
        <value code="0x17" name="Number Of Price Tiers 38">
        </value>
        <value code="0x18" name="Number Of Price Tiers 39">
        </value>
        <value code="0x19" name="Number Of Price Tiers 40">
        </value>
        <value code="0x1A" name="Number Of Price Tiers 41">
        </value>
        <value code="0x1B" name="Number Of Price Tiers 42">
        </value>
        <value code="0x1C" name="Number Of Price Tiers 43">
        </value>
        <value code="0x1D" name="Number Of Price Tiers 44">
        </value>
        <value code="0x1E" name="Number Of Price Tiers 45">
        </value>
        <value code="0x1F" name="Number Of Price Tiers 46">
        </value>
        <value code="0x20" name="Number Of Price Tiers 47">
        </value>
        <value code="0x21" name="Number Of Price Tiers 48">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="ExtendedPriceTierEnum">
        <name>Extended Price Tier</name>
        <value code="0x00" name="Refer To Price Tier Field">
        </value>
        <value code="0x01" name="Tier 16 Price Label">
        </value>
        <value code="0x02" name="Tier 17 Price Label">
        </value>
        <value code="0x03" name="Tier 18 Price Label">
        </value>
        <value code="0x04" name="Tier 19 Price Label">
        </value>
        <value code="0x05" name="Tier 20 Price Label">
        </value>
        <value code="0x06" name="Tier 21 Price Label">
        </value>
        <value code="0x07" name="Tier 22 Price Label">
        </value>
        <value code="0x08" name="Tier 23 Price Label">
        </value>
        <value code="0x09" name="Tier 24 Price Label">
        </value>
        <value code="0x0A" name="Tier 25 Price Label">
        </value>
        <value code="0x0B" name="Tier 26 Price Label">
        </value>
        <value code="0x0C" name="Tier 27 Price Label">
        </value>
        <value code="0x0D" name="Tier 28 Price Label">
        </value>
        <value code="0x0E" name="Tier 29 Price Label">
        </value>
        <value code="0x0F" name="Tier 30 Price Label">
        </value>
        <value code="0x10" name="Tier 31 Price Label">
        </value>
        <value code="0x11" name="Tier 32 Price Label">
        </value>
        <value code="0x12" name="Tier 33 Price Label">
        </value>
        <value code="0x13" name="Tier 34 Price Label">
        </value>
        <value code="0x14" name="Tier 35 Price Label">
        </value>
        <value code="0x15" name="Tier 36 Price Label">
        </value>
        <value code="0x16" name="Tier 37 Price Label">
        </value>
        <value code="0x17" name="Tier 38 Price Label">
        </value>
        <value code="0x18" name="Tier 39 Price Label">
        </value>
        <value code="0x19" name="Tier 40 Price Label">
        </value>
        <value code="0x1A" name="Tier 41 Price Label">
        </value>
        <value code="0x1B" name="Tier 42 Price Label">
        </value>
        <value code="0x1C" name="Tier 43 Price Label">
        </value>
        <value code="0x1D" name="Tier 44 Price Label">
        </value>
        <value code="0x1E" name="Tier 45 Price Label">
        </value>
        <value code="0x1F" name="Tier 46 Price Label">
        </value>
        <value code="0x20" name="Tier 47 Price Label">
        </value>
        <value code="0x21" name="Tier 48 Price Label">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="ExtendedRegisterTierEnum">
        <name>Extended Register Tier</name>
        <value code="0x00" name="Refer To Register Tier Field">
        </value>
        <value code="0x01" name="Current Tier 16 Summation Delivered Attribute">
        </value>
        <value code="0x02" name="Current Tier 17 Summation Delivered Attribute">
        </value>
        <value code="0x03" name="Current Tier 18 Summation Delivered Attribute">
        </value>
        <value code="0x04" name="Current Tier 19 Summation Delivered Attribute">
        </value>
        <value code="0x05" name="Current Tier 20 Summation Delivered Attribute">
        </value>
        <value code="0x06" name="Current Tier 21 Summation Delivered Attribute">
        </value>
        <value code="0x07" name="Current Tier 22 Summation Delivered Attribute">
        </value>
        <value code="0x08" name="Current Tier 23 Summation Delivered Attribute">
        </value>
        <value code="0x09" name="Current Tier 24 Summation Delivered Attribute">
        </value>
        <value code="0x0A" name="Current Tier 25 Summation Delivered Attribute">
        </value>
        <value code="0x0B" name="Current Tier 26 Summation Delivered Attribute">
        </value>
        <value code="0x0C" name="Current Tier 27 Summation Delivered Attribute">
        </value>
        <value code="0x0D" name="Current Tier 28 Summation Delivered Attribute">
        </value>
        <value code="0x0E" name="Current Tier 29 Summation Delivered Attribute">
        </value>
        <value code="0x0F" name="Current Tier 30 Summation Delivered Attribute">
        </value>
        <value code="0x10" name="Current Tier 31 Summation Delivered Attribute">
        </value>
        <value code="0x11" name="Current Tier 32 Summation Delivered Attribute">
        </value>
        <value code="0x12" name="Current Tier 33 Summation Delivered Attribute">
        </value>
        <value code="0x13" name="Current Tier 34 Summation Delivered Attribute">
        </value>
        <value code="0x14" name="Current Tier 35 Summation Delivered Attribute">
        </value>
        <value code="0x15" name="Current Tier 36 Summation Delivered Attribute">
        </value>
        <value code="0x16" name="Current Tier 37 Summation Delivered Attribute">
        </value>
        <value code="0x17" name="Current Tier 38 Summation Delivered Attribute">
        </value>
        <value code="0x18" name="Current Tier 39 Summation Delivered Attribute">
        </value>
        <value code="0x19" name="Current Tier 40 Summation Delivered Attribute">
        </value>
        <value code="0x1A" name="Current Tier 41 Summation Delivered Attribute">
        </value>
        <value code="0x1B" name="Current Tier 42 Summation Delivered Attribute">
        </value>
        <value code="0x1C" name="Current Tier 43 Summation Delivered Attribute">
        </value>
        <value code="0x1D" name="Current Tier 44 Summation Delivered Attribute">
        </value>
        <value code="0x1E" name="Current Tier 45 Summation Delivered Attribute">
        </value>
        <value code="0x1F" name="Current Tier 46 Summation Delivered Attribute">
        </value>
        <value code="0x20" name="Current Tier 47 Summation Delivered Attribute">
        </value>
        <value code="0x21" name="Current Tier 48 Summation Delivered Attribute">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="GenerationTierEnum">
        <name>Generation Tier</name>
        <value code="0x01" name="Current Tier 1 Summation Received Attribute">
        </value>
        <value code="0x02" name="Current Tier 2 Summation Received Attribute">
        </value>
        <value code="0x03" name="Current Tier 3 Summation Received Attribute">
        </value>
        <value code="0x04" name="Current Tier 4 Summation Received Attribute">
        </value>
        <value code="0x05" name="Current Tier 5 Summation Received Attribute">
        </value>
        <value code="0x06" name="Current Tier 6 Summation Received Attribute">
        </value>
        <value code="0x07" name="Current Tier 7 Summation Received Attribute">
        </value>
        <value code="0x08" name="Current Tier 8 Summation Received Attribute">
        </value>
        <value code="0x09" name="Current Tier 9 Summation Received Attribute">
        </value>
        <value code="0x0A" name="Current Tier 10 Summation Received Attribute">
        </value>
        <value code="0x0B" name="Current Tier 11 Summation Received Attribute">
        </value>
        <value code="0x0C" name="Current Tier 12 Summation Received Attribute">
        </value>
        <value code="0x0D" name="Current Tier 13 Summation Received Attribute">
        </value>
        <value code="0x0E" name="Current Tier 14 Summation Received Attribute">
        </value>
        <value code="0x0F" name="Current Tier 15 Summation Received Attribute">
        </value>
        <value code="0x10" name="Current Tier 16 Summation Received Attribute">
        </value>
        <value code="0x11" name="Current Tier 17 Summation Received Attribute">
        </value>
        <value code="0x12" name="Current Tier 18 Summation Received Attribute">
        </value>
        <value code="0x13" name="Current Tier 19 Summation Received Attribute">
        </value>
        <value code="0x14" name="Current Tier 20 Summation Received Attribute">
        </value>
        <value code="0x15" name="Current Tier 21 Summation Received Attribute">
        </value>
        <value code="0x16" name="Current Tier 22 Summation Received Attribute">
        </value>
        <value code="0x17" name="Current Tier 23 Summation Received Attribute">
        </value>
        <value code="0x18" name="Current Tier 24 Summation Received Attribute">
        </value>
        <value code="0x19" name="Current Tier 25 Summation Received Attribute">
        </value>
        <value code="0x1A" name="Current Tier 26 Summation Received Attribute">
        </value>
        <value code="0x1B" name="Current Tier 27 Summation Received Attribute">
        </value>
        <value code="0x1C" name="Current Tier 28 Summation Received Attribute">
        </value>
        <value code="0x1D" name="Current Tier 29 Summation Received Attribute">
        </value>
        <value code="0x1E" name="Current Tier 30 Summation Received Attribute">
        </value>
        <value code="0x1F" name="Current Tier 31 Summation Received Attribute">
        </value>
        <value code="0x20" name="Current Tier 32 Summation Received Attribute">
        </value>
        <value code="0x21" name="Current Tier 33 Summation Received Attribute">
        </value>
        <value code="0x22" name="Current Tier 34 Summation Received Attribute">
        </value>
        <value code="0x23" name="Current Tier 35 Summation Received Attribute">
        </value>
        <value code="0x24" name="Current Tier 36 Summation Received Attribute">
        </value>
        <value code="0x25" name="Current Tier 37 Summation Received Attribute">
        </value>
        <value code="0x26" name="Current Tier 38 Summation Received Attribute">
        </value>
        <value code="0x27" name="Current Tier 39 Summation Received Attribute">
        </value>
        <value code="0x28" name="Current Tier 40 Summation Received Attribute">
        </value>
        <value code="0x29" name="Current Tier 41 Summation Received Attribute">
        </value>
        <value code="0x2A" name="Current Tier 42 Summation Received Attribute">
        </value>
        <value code="0x2B" name="Current Tier 43 Summation Received Attribute">
        </value>
        <value code="0x2C" name="Current Tier 44 Summation Received Attribute">
        </value>
        <value code="0x2D" name="Current Tier 45 Summation Received Attribute">
        </value>
        <value code="0x2E" name="Current Tier 46 Summation Received Attribute">
        </value>
        <value code="0x2F" name="Current Tier 47 Summation Received Attribute">
        </value>
        <value code="0x30" name="Current Tier 48 Summation Received Attribute">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="PriceControlMaskBitmap">
        <name>Price Control Mask</name>
        <value code="0x01" name="Price Acknowledgement Required">
        </value>
        <value code="0x02" name="Total Tiers Exceeds 15">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="PriceMatrixSubPayloadControlBitmap">
        <name>Price Matrix Sub Payload Control</name>
        <value code="0x01" name="Tou Based">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="PriceNumberOfPriceTiersAndRegisterTierBitmap">
        <name>Price Number Of Price Tiers And Register Tier</name>
        <value code="0x0F" name="Register Tier">
        </value>
        <value code="0xF0" name="Number Of Price Tiers">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="PriceTrailingDigitBitmap">
        <name>Price Trailing Digit</name>
        <value code="0xF0" name="Trailing Digit">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="PriceTrailingDigitAndPriceTierBitmap">
        <name>Price Trailing Digit And Price Tier</name>
        <value code="0x0F" name="Price Tier">
        </value>
        <value code="0xF0" name="Trailing Digit">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="PublishCppEventCppAuthEnum">
        <name>Publish Cpp Event Cpp Auth</name>
        <value code="0x00" name="Pending">
        </value>
        <value code="0x01" name="Accepted">
        </value>
        <value code="0x02" name="Rejected">
        </value>
        <value code="0x03" name="Forced">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="TariffTypeEnum">
        <name>Tariff Type</name>
        <value code="0x00" name="Delivered Tariff">
        </value>
        <value code="0x01" name="Received Tariff">
        </value>
        <value code="0x02" name="Delivered And Received Tariff">
        </value>
    </constant>
    <constant type="BITMAP_8_BIT" class="TariffTypeChargingSchemeBitmap">
        <name>Tariff Type Charging Scheme</name>
        <value code="0x0F" name="Tariff Type">
        </value>
        <value code="0xF0" name="Tariff Charging Scheme">
        </value>
    </constant>
    <constant type="ENUMERATION_8_BIT" class="TierBlockModeEnum">
        <name>Tier Block Mode</name>
        <value code="0x00" name="Active Block">
        </value>
        <value code="0x01" name="Active Block Price Tier">
        </value>
        <value code="0x02" name="Active Block Price Tier Threshold">
        </value>
        <value code="0xFF" name="Not Used">
        </value>
    </constant>

    <struct class="BlockThresholdSubPayload">
        <name>Block Threshold Sub Payload</name>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Tier Number Of Block Thresholds</name>
        </field>
        <field type="UNSIGNED_48_BIT_INTEGER">
            <name>Block Threshold</name>
        </field>
    </struct>
    <struct class="PriceMatrixSubPayload">
        <name>Price Matrix Sub Payload</name>
        <field type="UNSIGNED_8_BIT_INTEGER">
            <name>Tier Block ID</name>
        </field>
        <field type="UNSIGNED_32_BIT_INTEGER">
            <name>Price</name>
        </field>
    </struct>
    
</cluster>
