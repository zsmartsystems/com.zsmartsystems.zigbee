/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.util;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackResponseCode;
import com.zsmartsystems.zigbee.security.ZigBeeKey;

/**
 * Class to implement the Z-Stack command <b>UTIL_APSME_LINK_KEY_DATA_GET</b>.
 * <p>
 * This command retrieves APS link key data, Tx and Rx frame counters.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackUtilApsmeLinkKeyDataGetSrsp extends ZstackFrameResponse {

    /**
     * The ZStatus_t returned by the proxy call to APSME_LinkKeyNVIdGet().
     */
    private ZstackResponseCode status;

    /**
     * On success, the security key looked up; otherwise N/A.
     */
    private ZigBeeKey secKey;

    /**
     * On success, the TX frame counter; otherwise N/A.
     */
    private int txFrmCntr;

    /**
     * On success, the RX frame counter; otherwise N/A.
     */
    private int rxFrmCntr;

    /**
     * Response and Handler constructor
     */
    public ZstackUtilApsmeLinkKeyDataGetSrsp(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        synchronousCommand = true;

        // Deserialize the fields
        status = ZstackResponseCode.valueOf(deserializer.deserializeUInt8());
        secKey = deserializer.deserializeZigBeeKey();
        txFrmCntr = deserializer.deserializeUInt32();
        rxFrmCntr = deserializer.deserializeUInt32();
    }

    /**
     * The ZStatus_t returned by the proxy call to APSME_LinkKeyNVIdGet().
     *
     * @return the current status as {@link ZstackResponseCode}
     */
    public ZstackResponseCode getStatus() {
        return status;
    }

    /**
     * The ZStatus_t returned by the proxy call to APSME_LinkKeyNVIdGet().
     *
     * @param status the Status to set as {@link ZstackResponseCode}
     */
    public void setStatus(ZstackResponseCode status) {
        this.status = status;
    }

    /**
     * On success, the security key looked up; otherwise N/A.
     *
     * @return the current secKey as {@link ZigBeeKey}
     */
    public ZigBeeKey getSecKey() {
        return secKey;
    }

    /**
     * On success, the security key looked up; otherwise N/A.
     *
     * @param secKey the SecKey to set as {@link ZigBeeKey}
     */
    public void setSecKey(ZigBeeKey secKey) {
        this.secKey = secKey;
    }

    /**
     * On success, the TX frame counter; otherwise N/A.
     *
     * @return the current txFrmCntr as {@link int}
     */
    public int getTxFrmCntr() {
        return txFrmCntr;
    }

    /**
     * On success, the TX frame counter; otherwise N/A.
     *
     * @param txFrmCntr the TxFrmCntr to set as {@link int}
     */
    public void setTxFrmCntr(int txFrmCntr) {
        this.txFrmCntr = txFrmCntr;
    }

    /**
     * On success, the RX frame counter; otherwise N/A.
     *
     * @return the current rxFrmCntr as {@link int}
     */
    public int getRxFrmCntr() {
        return rxFrmCntr;
    }

    /**
     * On success, the RX frame counter; otherwise N/A.
     *
     * @param rxFrmCntr the RxFrmCntr to set as {@link int}
     */
    public void setRxFrmCntr(int rxFrmCntr) {
        this.rxFrmCntr = rxFrmCntr;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(136);
        builder.append("ZstackUtilApsmeLinkKeyDataGetSrsp [status=");
        builder.append(status);
        builder.append(", secKey=");
        builder.append(secKey);
        builder.append(", txFrmCntr=");
        builder.append(String.format("%08X", txFrmCntr));
        builder.append(", rxFrmCntr=");
        builder.append(String.format("%08X", rxFrmCntr));
        builder.append(']');
        return builder.toString();
    }
}
