/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sys;

import java.util.HashMap;
import java.util.Map;

/**
 * Class to implement the Z-Stack Enumeration <b>ZstackZdoState</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public enum ZstackZdoState {
    /**
     * Default unknown value
     */
    UNKNOWN(-1),

    /**
     * Initialized - not started automatically
     */
    DEV_HOLD(0x0000),

    /**
     * Initialized - not connected to anything
     */
    DEV_INIT(0x0001),

    /**
     * Discovering PAN's to join
     */
    DEV_NWK_DISC(0x0002),

    /**
     * Joining a PAN
     */
    DEV_NWK_JOINING(0x0003),

    /**
     * ReJoining a PAN, only for end devices
     */
    DEV_NWK_REJOIN(0x0004),

    /**
     * Joined but not yet authenticated by trust center
     */
    DEV_END_DEVICE_UNAUTH(0x0005),

    /**
     * Started as device after authentication
     */
    DEV_END_DEVICE(0x0006),

    /**
     * Device joined, authenticated and is a router
     */
    DEV_ROUTER(0x0007),

    /**
     * Starting as Zigbee Coordinator
     */
    DEV_COORD_STARTING(0x0008),

    /**
     * Started as Zigbee Coordinator
     */
    DEV_ZB_COORD(0x0009),

    /**
     * Device has lost information about its parent
     */
    DEV_NWK_ORPHAN(0x000A);

    /**
     * A mapping between the integer code and its corresponding type to
     * facilitate lookup by code.
     */
    private static Map<Integer, ZstackZdoState> codeMapping;

    private int key;

    static {
        codeMapping = new HashMap<Integer, ZstackZdoState>();
        for (ZstackZdoState s : values()) {
            codeMapping.put(s.key, s);
        }
    }

    private ZstackZdoState(int key) {
        this.key = key;
    }

    /**
     * Lookup function based on the type code. Returns null if the code does not exist.
     *
     * @param code the code to lookup
     * @return enumeration value of the alarm type.
     */
    public static ZstackZdoState valueOf(int code) {
        if (codeMapping.get(code) == null) {
            return UNKNOWN;
        }

        return codeMapping.get(code);
    }

    /**
     * Returns the Z-Stack protocol defined value for this enumeration.
     *
     * @return the Z-Stack protocol key
     */
    public int getKey() {
        return key;
    }
}
