/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.zdo;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;

/**
 * Class to implement the Z-Stack command <b>ZDO_MSG_CB_INCOMING</b>.
 * <p>
 * This message is a ZDO callback for a Cluster Id that the host requested to receive with a ZDO_ MSG_CB_REGISTER request.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackZdoMsgCbIncomingAreq extends ZstackFrameResponse {

    /**
     * Short address (LSB-MSB) of the source of the ZDO message.
     */
    private int srcAddr;

    /**
     * This field indicates whether or not this ZDO message was broadcast.
     */
    private boolean wasBroadcast;

    /**
     * The ZDO Cluster Id of this message.
     */
    private int clusterId;

    /**
     * N/A – not used.
     */
    private boolean securityUse;

    /**
     * The sequence number of this ZDO message.
     */
    private int seqNumber;

    /**
     * The MAC destination short address (LSB-MSB) of the ZDO message.
     */
    private int dstAddr;

    /**
     * The data that corresponds to the Cluster Id of the message
     */
    private int[] data;

    /**
     * Response and Handler constructor
     */
    public ZstackZdoMsgCbIncomingAreq(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        srcAddr = deserializer.deserializeUInt16();
        wasBroadcast = deserializer.deserializeBoolean();
        clusterId = deserializer.deserializeUInt16();
        securityUse = deserializer.deserializeBoolean();
        seqNumber = deserializer.deserializeUInt8();
        dstAddr = deserializer.deserializeUInt16();
        data = deserializer.deserializeUInt8Array();
    }

    /**
     * Short address (LSB-MSB) of the source of the ZDO message.
     *
     * @return the current srcAddr as {@link int}
     */
    public int getSrcAddr() {
        return srcAddr;
    }

    /**
     * Short address (LSB-MSB) of the source of the ZDO message.
     *
     * @param srcAddr the SrcAddr to set as {@link int}
     */
    public void setSrcAddr(int srcAddr) {
        this.srcAddr = srcAddr;
    }

    /**
     * This field indicates whether or not this ZDO message was broadcast.
     *
     * @return the current wasBroadcast as {@link boolean}
     */
    public boolean getWasBroadcast() {
        return wasBroadcast;
    }

    /**
     * This field indicates whether or not this ZDO message was broadcast.
     *
     * @param wasBroadcast the WasBroadcast to set as {@link boolean}
     */
    public void setWasBroadcast(boolean wasBroadcast) {
        this.wasBroadcast = wasBroadcast;
    }

    /**
     * The ZDO Cluster Id of this message.
     *
     * @return the current clusterId as {@link int}
     */
    public int getClusterId() {
        return clusterId;
    }

    /**
     * The ZDO Cluster Id of this message.
     *
     * @param clusterId the ClusterId to set as {@link int}
     */
    public void setClusterId(int clusterId) {
        this.clusterId = clusterId;
    }

    /**
     * N/A – not used.
     *
     * @return the current securityUse as {@link boolean}
     */
    public boolean getSecurityUse() {
        return securityUse;
    }

    /**
     * N/A – not used.
     *
     * @param securityUse the SecurityUse to set as {@link boolean}
     */
    public void setSecurityUse(boolean securityUse) {
        this.securityUse = securityUse;
    }

    /**
     * The sequence number of this ZDO message.
     *
     * @return the current seqNumber as {@link int}
     */
    public int getSeqNumber() {
        return seqNumber;
    }

    /**
     * The sequence number of this ZDO message.
     *
     * @param seqNumber the SeqNumber to set as {@link int}
     */
    public void setSeqNumber(int seqNumber) {
        this.seqNumber = seqNumber;
    }

    /**
     * The MAC destination short address (LSB-MSB) of the ZDO message.
     *
     * @return the current dstAddr as {@link int}
     */
    public int getDstAddr() {
        return dstAddr;
    }

    /**
     * The MAC destination short address (LSB-MSB) of the ZDO message.
     *
     * @param dstAddr the DstAddr to set as {@link int}
     */
    public void setDstAddr(int dstAddr) {
        this.dstAddr = dstAddr;
    }

    /**
     * The data that corresponds to the Cluster Id of the message
     *
     * @return the current data as {@link int[]}
     */
    public int[] getData() {
        return data;
    }

    /**
     * The data that corresponds to the Cluster Id of the message
     *
     * @param data the Data to set as {@link int[]}
     */
    public void setData(int[] data) {
        this.data = data;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(204);
        builder.append("ZstackZdoMsgCbIncomingAreq [srcAddr=");
        builder.append(String.format("%04X", srcAddr));
        builder.append(", wasBroadcast=");
        builder.append(wasBroadcast);
        builder.append(", clusterId=");
        builder.append(String.format("%04X", clusterId));
        builder.append(", securityUse=");
        builder.append(securityUse);
        builder.append(", seqNumber=");
        builder.append(String.format("%02X", seqNumber));
        builder.append(", dstAddr=");
        builder.append(String.format("%04X", dstAddr));
        builder.append(", data=");
        for (int c = 0; c < data.length; c++) {
            if (c > 0) {
                builder.append(' ');
            }
            builder.append(String.format("%02X", data[c]));
        }
        builder.append(']');
        return builder.toString();
    }
}
