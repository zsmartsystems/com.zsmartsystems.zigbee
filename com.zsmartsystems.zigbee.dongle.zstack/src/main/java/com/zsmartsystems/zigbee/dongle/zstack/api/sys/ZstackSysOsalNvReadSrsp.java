/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sys;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackResponseCode;

/**
 * Class to implement the Z-Stack command <b>SYS_OSAL_NV_READ</b>.
 * <p>
 * This command is used to read a single memory item from the target non-volatile memory. The command accepts an attribute Id value
 * and data offset and returns the memory value present in the target for the specified attribute Id.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackSysOsalNvReadSrsp extends ZstackFrameResponse {

    /**
     * Status is either Success (0) or Failure (1).
     */
    private ZstackResponseCode status;

    /**
     * Value of the NV item.
     */
    private int[] value;

    /**
     * Response and Handler constructor
     */
    public ZstackSysOsalNvReadSrsp(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        synchronousCommand = true;

        // Deserialize the fields
        status = ZstackResponseCode.valueOf(deserializer.deserializeUInt8());
        int len = deserializer.deserializeUInt8();
        value = deserializer.deserializeUInt8Array(len);
    }

    /**
     * Status is either Success (0) or Failure (1).
     *
     * @return the current status as {@link ZstackResponseCode}
     */
    public ZstackResponseCode getStatus() {
        return status;
    }

    /**
     * Status is either Success (0) or Failure (1).
     *
     * @param status the status to set as {@link ZstackResponseCode}
     */
    public void setStatus(ZstackResponseCode status) {
        this.status = status;
    }

    /**
     * Value of the NV item.
     *
     * @return the current value as {@link int[]}
     */
    public int[] getValue() {
        return value;
    }

    /**
     * Value of the NV item.
     *
     * @param value the Value to set as {@link int[]}
     */
    public void setValue(int[] value) {
        this.value = value;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(101);
        builder.append("ZstackSysOsalNvReadSrsp [status=");
        builder.append(status);
        builder.append(", value=");
        for (int c = 0; c < value.length; c++) {
            if (c > 0) {
                builder.append(' ');
            }
            builder.append(String.format("%02X", value[c]));
        }
        builder.append(']');
        return builder.toString();
    }
}
