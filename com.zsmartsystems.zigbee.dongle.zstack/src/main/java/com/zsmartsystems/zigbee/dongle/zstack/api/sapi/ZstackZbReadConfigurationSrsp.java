/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sapi;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackResponseCode;
import com.zsmartsystems.zigbee.dongle.zstack.api.sys.ZstackConfigId;

/**
 * Class to implement the Z-Stack command <b>ZB_READ_CONFIGURATION</b>.
 * <p>
 * This command is used to get a configuration property from non-volatile memory.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackZbReadConfigurationSrsp extends ZstackFrameResponse {

    /**
     * This field indicates either SUCCESS (0) or FAILURE (1).
     */
    private ZstackResponseCode status;

    /**
     * Specifies the Identifier for the configuration property.
     */
    private ZstackConfigId configId;

    /**
     * Buffer to hold the configuration property.
     */
    private int[] value;

    /**
     * Response and Handler constructor
     */
    public ZstackZbReadConfigurationSrsp(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        synchronousCommand = true;

        // Deserialize the fields
        status = ZstackResponseCode.valueOf(deserializer.deserializeUInt8());
        configId = ZstackConfigId.valueOf(deserializer.deserializeUInt8());
        int len = deserializer.deserializeUInt8();
        value = deserializer.deserializeUInt8Array(len);
    }

    /**
     * This field indicates either SUCCESS (0) or FAILURE (1).
     *
     * @return the current status as {@link ZstackResponseCode}
     */
    public ZstackResponseCode getStatus() {
        return status;
    }

    /**
     * This field indicates either SUCCESS (0) or FAILURE (1).
     *
     * @param status the Status to set as {@link ZstackResponseCode}
     */
    public void setStatus(ZstackResponseCode status) {
        this.status = status;
    }

    /**
     * Specifies the Identifier for the configuration property.
     *
     * @return the current configId as {@link ZstackConfigId}
     */
    public ZstackConfigId getConfigId() {
        return configId;
    }

    /**
     * Specifies the Identifier for the configuration property.
     *
     * @param configId the ConfigId to set as {@link ZstackConfigId}
     */
    public void setConfigId(ZstackConfigId configId) {
        this.configId = configId;
    }

    /**
     * Buffer to hold the configuration property.
     *
     * @return the current value as {@link int[]}
     */
    public int[] getValue() {
        return value;
    }

    /**
     * Buffer to hold the configuration property.
     *
     * @param value the Value to set as {@link int[]}
     */
    public void setValue(int[] value) {
        this.value = value;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(132);
        builder.append("ZstackZbReadConfigurationSrsp [status=");
        builder.append(status);
        builder.append(", configId=");
        builder.append(configId);
        builder.append(", value=");
        for (int c = 0; c < value.length; c++) {
            if (c > 0) {
                builder.append(' ');
            }
            builder.append(String.format("%02X", value[c]));
        }
        builder.append(']');
        return builder.toString();
    }
}
