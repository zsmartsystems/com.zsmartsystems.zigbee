/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.appcnf;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameRequest;
import com.zsmartsystems.zigbee.dongle.zstack.api.rpc.ZstackRpcSreqErrorSrsp;

/**
 * Class to implement the Z-Stack command <b>APP_CNF_BDB_SET_JOINUSESINSTALLCODEKEY</b>.
 * <p>
 * Sets the policy to mandate or not the usage of an Install Code upon joining.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackAppCnfBdbSetJoinusesinstallcodekeySreq extends ZstackFrameRequest {

    /**
     * If it is equal to TRUE and the installation code derived link key is not stored, the Trust Center SHALL terminate the procedure for
     * adding a new node into the network. If bdbJoinUsesInstall- CodeKey is equal to TRUE and the installation code derived link key is
     * stored, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that corresponds to the joining node and then
     * overwrite the LinkKey entry with the installation code derived link key and set the KeyAttributes field to PROVISIONAL_KEY.
     * The Trust Center MAY then set OutgoingFrame- Counter to 0 and SHALL set IncomingFrameCounter to 0. If
     * bdbJoinUsesInstallCodeKey is equal to FALSE, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that
     * corresponds to the joining node and then overwrite the LinkKey entry with the default global Trust Center link key and set the
     * KeyAttributes field to PROVISIONAL_KEY. The Trust Center MAY then set OutgoingFrameCounter to 0 and SHALL set
     * IncomingFrameCounter to 0.
     */
    private boolean joinUsesInstallCodeKey;

    /**
     * Request constructor
     */
    public ZstackAppCnfBdbSetJoinusesinstallcodekeySreq() {
        synchronousCommand = true;
    }

    /**
     * If it is equal to TRUE and the installation code derived link key is not stored, the Trust Center SHALL terminate the procedure for
     * adding a new node into the network. If bdbJoinUsesInstall- CodeKey is equal to TRUE and the installation code derived link key is
     * stored, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that corresponds to the joining node and then
     * overwrite the LinkKey entry with the installation code derived link key and set the KeyAttributes field to PROVISIONAL_KEY.
     * The Trust Center MAY then set OutgoingFrame- Counter to 0 and SHALL set IncomingFrameCounter to 0. If
     * bdbJoinUsesInstallCodeKey is equal to FALSE, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that
     * corresponds to the joining node and then overwrite the LinkKey entry with the default global Trust Center link key and set the
     * KeyAttributes field to PROVISIONAL_KEY. The Trust Center MAY then set OutgoingFrameCounter to 0 and SHALL set
     * IncomingFrameCounter to 0.
     *
     * @return the current joinUsesInstallCodeKey as {@link boolean}
     */
    public boolean getJoinUsesInstallCodeKey() {
        return joinUsesInstallCodeKey;
    }

    /**
     * If it is equal to TRUE and the installation code derived link key is not stored, the Trust Center SHALL terminate the procedure for
     * adding a new node into the network. If bdbJoinUsesInstall- CodeKey is equal to TRUE and the installation code derived link key is
     * stored, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that corresponds to the joining node and then
     * overwrite the LinkKey entry with the installation code derived link key and set the KeyAttributes field to PROVISIONAL_KEY.
     * The Trust Center MAY then set OutgoingFrame- Counter to 0 and SHALL set IncomingFrameCounter to 0. If
     * bdbJoinUsesInstallCodeKey is equal to FALSE, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that
     * corresponds to the joining node and then overwrite the LinkKey entry with the default global Trust Center link key and set the
     * KeyAttributes field to PROVISIONAL_KEY. The Trust Center MAY then set OutgoingFrameCounter to 0 and SHALL set
     * IncomingFrameCounter to 0.
     *
     * @param joinUsesInstallCodeKey the JoinUsesInstallCodeKey to set as {@link boolean}
     */
    public void setJoinUsesInstallCodeKey(boolean joinUsesInstallCodeKey) {
        this.joinUsesInstallCodeKey = joinUsesInstallCodeKey;
    }

    @Override
    public boolean matchSreqError(ZstackRpcSreqErrorSrsp response) {
        return (((response.getReqCmd0() & 0x1F) == ZSTACK_APP_CNF) && (response.getReqCmd1() == 0x06));
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(ZSTACK_SREQ, ZSTACK_APP_CNF, 0x06);

        // Serialize the fields
        serializer.serializeBoolean(joinUsesInstallCodeKey);
        return getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(72);
        builder.append("ZstackAppCnfBdbSetJoinusesinstallcodekeySreq [joinUsesInstallCodeKey=");
        builder.append(joinUsesInstallCodeKey);
        builder.append(']');
        return builder.toString();
    }
}
