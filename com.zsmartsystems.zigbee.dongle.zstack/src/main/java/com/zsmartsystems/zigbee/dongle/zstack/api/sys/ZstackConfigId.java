/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sys;

import java.util.HashMap;
import java.util.Map;

/**
 * Class to implement the Z-Stack Enumeration <b>ZstackConfigId</b>.
 * <p>
 * Device specific configuration parameters.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public enum ZstackConfigId {
    /**
     * Default unknown value
     */
    UNKNOWN(-1),

    /**
     *
     */
    ZCD_NV_EXTADDR(0x0000),

    /**
     *
     */
    ZCD_NV_BOOTCOUNTER(0x0001),

    /**
     * This parameter controls the device startup options. Size: 1 byte; Default value: 0
     */
    ZCD_NV_STARTUP_OPTION(0x0003),

    /**
     *
     */
    ZCD_NV_START_DELAY(0x0004),

    /**
     * If this parameter is set to a non-zero value, a CC2530-ZNP device that is configured as an end- device will wake up periodically
     * with this duration to check for data with its parent device. This value is specified in milliseconds and can range from 1 to 65000.
     * If this parameter is set to zero, the device will not automatically wake up to poll for data. Instead, an external trigger or an
     * internal event (for example, via a software timer event) can be used to wake up the device. Size: 4 bytes; Default value: 2000
     */
    ZCD_NV_POLL_RATE_OLD16(0x0035),

    /**
     * When an end-device polls for data with its parent and finds that it does have data, it can poll again with a shorter duration in case
     * there is more data queued for it at its parent device. This value is specified in milliseconds. This feature can be turned off by
     * setting this value to zero. Size: 2 bytes; Default value: 100
     */
    ZCD_NV_QUEUED_POLL_RATE(0x0025),

    /**
     * When an end-device sends a data packet, it can poll again with a shorter duration, specified by this parameter, if the
     * application is expecting to receive an application level packet in response. This value is specified in milliseconds. This
     * feature can be turned off by setting the value to zero.
     * <p>
     * <b>Note:</b> The setting of the queued and response poll rates has to be done with caution if the device is sending and receiving
     * at the same time or if the device is sending data too fast. If the device is sending data too fast, setting a queued poll rate with a
     * higher duration than the sending rate will cause the poll event to be continuously rescheduled to the future. Then the device
     * will never poll for data with its parent and consequently it may miss any packets destined for it. Size: 2 bytes; Default value:
     * 100
     */
    ZCD_NV_RESPONSE_POLL_RATE(0x0026),

    /**
     *
     */
    ZCD_NV_REJOIN_POLL_RATE(0x0027),

    /**
     *
     */
    ZCD_NV_DATA_RETRIES(0x0028),

    /**
     * The number of times an end-device will fail when communicating with its parent before invoking the rejoin mechanism to find and
     * join a new parent. Size: 1 byte; Default value: 2.
     */
    ZCD_NV_POLL_FAILURE_RETRIES(0x0029),

    /**
     *
     */
    ZCD_NV_STACK_PROFILE(0x002A),

    /**
     * The amount of time (in seconds) that a router or coordinator device will buffer messages destined to their end-device child
     * nodes. It is recommended that this is at least greater than the poll rate (ZCD_NV_POLL_RATE) to ensure that end-device will have
     * a chance to wakeup and poll for the data. Size: 1 byte; Default value: 7
     */
    ZCD_NV_INDIRECT_MSG_TIMEOUT(0x002B),

    /**
     * The amount of time (in seconds) for which a route must be idle (i.e. no packets are transmitted on that route) before that routing
     * entry is marked as expired. An expired entry may be deleted if the table is full and the space is needed for another new routing
     * entry. This can be set to a special value of 0 to turn off route expiry. In this case, route entries are not expired. Size: 1 byte;
     * Default value: 60.
     */
    ZCD_NV_ROUTE_EXPIRY_TIME(0x002C),

    /**
     * This parameter configures the EXTENDED PAN ID in Z-Stack. The extended pan id is used to further segregate the sub network(s)
     * among a bigger PAN network.
     */
    ZCD_NV_EXTPANID(0x002D),

    /**
     * The maximum number of retransmissions that a device will attempt when trying to transmit a broadcast packet. The typical range
     * is from 1 through 3. Size: 1 byte; Default value: 2.
     */
    ZCD_NV_BCAST_RETRIES(0x002E),

    /**
     * The amount of time (in units of 100milliseconds) a device will wait before retransmitting a broadcast packet. The
     * retransmission will not happen if the node hears that each of its neighbor nodes have all transmitted that packet. Size: 1 byte;
     * Default value: 5
     */
    ZCD_NV_PASSIVE_ACK_TIMEOUT(0x002F),

    /**
     * The maximum amount of time (in units of 100ms) that it can take for a broadcast packet to propagate through the entire network.
     * This includes time for all retransmissions.
     * <p>
     * <b>Note:</b> This parameter must be set with caution. It must be set to a value of at least (ZCD_NV_BCAST_RETRIES + 1) *
     * ZCD_NV_PASSIVE_ACK_TIMEOUT To be safe, the actual value should be higher than the above minimum by about 500ms or more. Size: 1
     * byte; Default value: 30.
     */
    ZCD_NV_BCAST_DELIVERY_TIME(0x0030),

    /**
     * Holds the value of the network operational mode. The default value is NWK_MODE_MESH and must not be modified.
     */
    ZCD_NV_NWK_MODE(0x0031),

    /**
     *
     */
    ZCD_NV_CONCENTRATOR_ENABLE(0x0032),

    /**
     *
     */
    ZCD_NV_CONCENTRATOR_DISCOVERY(0x0033),

    /**
     *
     */
    ZCD_NV_CONCENTRATOR_RADIUS(0x0034),

    /**
     * If this parameter is set to a non-zero value, a CC2530-ZNP device that is configured as an end- device will wake up periodically
     * with this duration to check for data with its parent device. This value is specified in milliseconds and can range from 1 to 65000.
     * If this parameter is set to zero, the device will not automatically wake up to poll for data. Instead, an external trigger or an
     * internal event (for example, via a software timer event) can be used to wake up the device. Size: 4 bytes; Default value: 2000
     */
    ZCD_NV_POLL_RATE(0x0035),

    /**
     * Holds the value of route cache flag. This enables or disables the route cache for coordinator and is FALSE by default.
     */
    ZCD_NV_CONCENTRATOR_RC(0x0036),

    /**
     *
     */
    ZCD_NV_NWK_MGR_MODE(0x0037),

    /**
     *
     */
    ZCD_NV_SRC_RTG_EXPIRY_TIME(0x0038),

    /**
     *
     */
    ZCD_NV_ROUTE_DISCOVERY_TIME(0x0039),

    /**
     *
     */
    ZCD_NV_NWK_ACTIVE_KEY_INFO(0x003A),

    /**
     *
     */
    ZCD_NV_NWK_ALTERN_KEY_INFO(0x003B),

    /**
     *
     */
    ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP(0x003C),

    /**
     *
     */
    ZCD_NV_NWK_LEAVE_REQ_ALLOWED(0x003D),

    /**
     * Holds the value of Child Aging capability flag. This enables or disables child aging and must be set to TRUE for Zigbee 3.0
     * compliance.
     */
    ZCD_NV_NWK_CHILD_AGE_ENABLE(0x003E),

    /**
     *
     */
    ZCD_NV_DEVICE_LIST_KA_TIMEOUT(0x003F),

    /**
     *
     */
    ZCD_NV_BINDING_TABLE(0x0041),

    /**
     *
     */
    ZCD_NV_GROUP_TABLE(0x0042),

    /**
     * The number of retransmissions performed on a data packet at the application layer if the packet was transmitted with the
     * end-to-end acknowledgement option enabled. Size: 1 byte; Default value: 3
     */
    ZCD_NV_APS_FRAME_RETRIES(0x0043),

    /**
     * The amount of time (in milliseconds) a device will wait before re-transmitting a packet that used the APS acknowledgement
     * option. If the APS acknowledgement is not received by this time, the sending device will assume a failure and attempt a
     * re-transmission.
     * <p>
     * <b>Note:</b> This is recommended to be set to approximately the expected round trip time for the packet. Note that if the
     * destination (or source) device is an end-device, the round trip time for the packet will include an additional delay up to the
     * poll duration. This is in addition to the delay normally caused by the network. Size: 2 bytes; Default value: 3000
     */
    ZCD_NV_APS_ACK_WAIT_DURATION(0x0044),

    /**
     *
     */
    ZCD_NV_APS_ACK_WAIT_MULTIPLIER(0x0045),

    /**
     * The amount of time (in milliseconds) a device will wait for a response to a binding request. Size: 2 bytes; Default value: 8000
     */
    ZCD_NV_BINDING_TIME(0x0046),

    /**
     *
     */
    ZCD_NV_APS_USE_EXT_PANID(0x0047),

    /**
     *
     */
    ZCD_NV_COMMISSIONED_NWK_ADDR(0x0049),

    /**
     *
     */
    ZCD_NV_APS_NONMEMBER_RADIUS(0x004B),

    /**
     * Holds the security manager entries of type ZDSecMgrEntry_t to store the TCKL used to talk with devices in the network that
     * require APS security. The number of entries is controled by ZDSECMGR_DEVICE_MAX=3 by default.
     */
    ZCD_NV_APS_LINK_KEY_TABLE(0x004C),

    /**
     *
     */
    ZCD_NV_APS_DUPREJ_TIMEOUT_INC(0x004D),

    /**
     *
     */
    ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT(0x004E),

    /**
     *
     */
    ZCD_NV_APS_DUPREJ_TABLE_SIZE(0x004F),

    /**
     *
     */
    ZCD_NV_DIAGNOSTIC_STATS(0x0050),

    /**
     *
     */
    ZCD_NV_NWK_PARENT_INFO(0x0051),

    /**
     *
     */
    ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF(0x0052),

    /**
     * Holds the value of Child Aging Timeout. This is the time in seconds used by END DEVICE when sending End Device Timeout Request that
     * tells a COORDINATOR the timeout to remove this END DEVICE after no data poll is received.
     */
    ZCD_NV_END_DEV_TIMEOUT_VALUE(0x0053),

    /**
     * Holds the value of End Device Configuration field when END DEVICE when sending End Device Timeout Request. Is set to 0x00 by
     * default which is the only valid value accourding to Zigbee Core spec R21.
     */
    ZCD_NV_END_DEV_CONFIGURATION(0x0054),

    /**
     *
     */
    ZCD_NV_BDBNODEISONANETWORK(0x0055),

    /**
     *
     */
    ZCD_NV_BDBREPORTINGCONFIG(0x0056),

    /**
     * holds the value of network key that is generated by default. The key can be set to a fixed value by setting DEFAULT_KEY macro. This
     * is used for securing and un-securing packets in the network, if security is enabled for the network.
     * <p>
     * <b>Note:</b> Use of this configuration item requires the ZNP code to be built with the SECURE=1 compile option. Size: 16 bytes;
     * Default value: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]
     */
    ZCD_NV_PRECFGKEY(0x0062),

    /**
     * If security functionality is enabled, there are two options to distribute the security key to all devices in the network. If this
     * parameter is true, the same security key is assumed to be pre-configured in all devices in the network.If it is set to false, then
     * the key only needs to be configured on the coordinator device. In this case, the key is distributed to each device upon joining by
     * the coordinator. This key distribution will happen in the “clear” on the last hop of the packet transmission and this
     * constitutes a brief “period of vulnerability” during which a malicious device can capture the key. Hence it is not recommended
     * unless it can be ensured that there are no malicious devices in the vicinity at the time of network formation.
     * <p>
     * <b>Note:</b> Use of this configuration item requires the ZNP code to be built with the SECURE=1 compile option. Size: 1 byte;
     * Default value: TRUE
     */
    ZCD_NV_PRECFGKEYS_ENABLE(0x0063),

    /**
     * This parameter determines if security is used or not in this network. It can be set to 0 (to turn off NWK security) or 1 (to turn on NWK
     * security). Size: 1 byte; Default value: 0.
     */
    ZCD_NV_SECURITY_MODE(0x0064),

    /**
     * This value tells if only secure joins are allowed. Set to TRUE by default which is the only valid value according to Zigbee Core
     * spec R21.
     */
    ZCD_NV_SECURE_PERMIT_JOIN(0x0065),

    /**
     * Is equal to ZG_GLOBAL_LINK_KEY=1 and must not be modified according to Zigbee Core spec R21.
     */
    ZCD_NV_APS_LINK_KEY_TYPE(0x0066),

    /**
     *
     */
    ZCD_NV_APS_ALLOW_R19_SECURITY(0x0067),

    /**
     * Default distributed nwk key Id. Nv ID not in use
     */
    ZCD_NV_DISTRIBUTED_KEY(0x0068),

    /**
     *
     */
    ZCD_NV_IMPLICIT_CERTIFICATE(0x0069),

    /**
     *
     */
    ZCD_NV_DEVICE_PRIVATE_KEY(0x006A),

    /**
     *
     */
    ZCD_NV_CA_PUBLIC_KEY(0x006B),

    /**
     *
     */
    ZCD_NV_KE_MAX_DEVICES(0x006C),

    /**
     * Controls whether a single pre-configured trust center link key is used or whether multiple pre- configured trust center link
     * keys are used, hereby referred to as Single Key Mode and Multiple Key Mode, respectively. In multiple key mode, unique
     * pre-configured trust center link keys are used between the trust center and each individual device joining the network.
     * Multiple key mode is required by the recommended secure procedure in ZigBeeSE profile Specification. In single key mode, all
     * devices are using the same pre-configured trust center link key to join the network. The single key mode provides a simplified
     * alternative procedure to set up the network. It can be used for testing and debugging purpose. Size: 1 byte; Default value: TRUE
     */
    ZCD_NV_USE_DEFAULT_TCLK(0x006D),

    /**
     *
     */
    ZCD_NV_RNG_COUNTER(0x006F),

    /**
     *
     */
    ZCD_NV_RANDOM_SEED(0x0070),

    /**
     *
     */
    ZCD_NV_TRUSTCENTER_ADDR(0x0071),

    /**
     *
     */
    ZCD_NV_CERT_283(0x0072),

    /**
     *
     */
    ZCD_NV_PRIVATE_KEY_283(0x0073),

    /**
     *
     */
    ZCD_NV_PUBLIC_KEY_283(0x0074),

    /**
     *
     */
    ZCD_NV_NWK_SEC_MATERIAL_TABLE_START(0x0075),

    /**
     *
     */
    ZCD_NV_NWK_SEC_MATERIAL_TABLE_END(0x0080),

    /**
     * An optional user-defined data (up to 16bytes) that can be configured in a CC2530-ZNP device so that it can easily identified or
     * described later. The first byte is the length of the user descriptor data and must not be greater than 16. Size: 17 bytes; Default
     * value: “CC2530-ZNP x......” (dots represent the device IEEE address)
     */
    ZCD_NV_USERDESC(0x0081),

    /**
     * This holds the value of nwkActiveKeyItems structure and restores the NWK key counter after power cycles.
     */
    ZCD_NV_NWKKEY(0x0082),

    /**
     * This parameter identifies the ZigBee network. This should be set to a value between 0 and 0x3FFF. Networks that exist in the same
     * vicinity must have different values for this parameter. It can be set to a special value of 0xFFFF to indicate “don’t care”. Size:
     * 2 bytes; Default value: 0xFFFF
     */
    ZCD_NV_PANID(0x0083),

    /**
     * This parameter is a bit mask of the channels on which this network can operate (note that multiple channels can be selected). See
     * section 4.5.16 for a table of the bitmap representation that maps to each channel. Multiple networks that exist in the same
     * vicinity are encouraged to have different values. If multiple channels are selected, the coordinator will pick one of the
     * channels for network operation. First, an energy scan is performed on each channel and those channels with a high energy level
     * are discarded. Then, the coordinator determines the number of existing ZigBee networks on each of the remaining channels and
     * picks the one with the fewest networks. For routers and end-devices, the device will simply scan all the selected channels until
     * it finds the ZigBee network. Size: 4 bytes; Default value: 0x00000800
     */
    ZCD_NV_CHANLIST(0x0084),

    /**
     *
     */
    ZCD_NV_SCAN_DURATION(0x0086),

    /**
     * This is the logical type of the device in the ZigBee network. This can be set to a COORDINATOR (0x00), ROUTER (0x01) or ENDDEVICE
     * (0x02).
     * <p>
     * <b>Note:</b> This parameter is read by the CC2530-ZNP device immediately when it powers up after a reset. Size: 1 byte; Default
     * value: 0x00
     */
    ZCD_NV_LOGICAL_TYPE(0x0087),

    /**
     *
     */
    ZCD_NV_NWKMGR_MIN_TX(0x0088),

    /**
     *
     */
    ZCD_NV_NWKMGR_ADDR(0x0089),

    /**
     * This configures the manner in which ZDO responses (hereby referred to as callbacks) are issued to the host processor. By
     * default, this item is set to FALSE, which means that the host processor must use the ZDO_MSG_CB_REGISTER command to subscribe to
     * a specific ZDO callback in order to receive it. The ZDO callback is then conveyed as part of the ZDO_MSG_CB_INCOMING command. If
     * ZCD_NV_ZDO_DIRECT_CB is set TRUE, then the host processor will receive the “verbose” response. For example, the host
     * processor would receive the ZDO_IEEE_ADDR_RSP command in response to ZDO_IEEE_ADDR_REQ. Size: 1 byte; Default value: FALSE
     */
    ZCD_NV_ZDO_DIRECT_CB(0x008F),

    /**
     *
     */
    ZCD_NV_SAS_SHORT_ADDR(0x00B1),

    /**
     *
     */
    ZCD_NV_SAS_EXT_PANID(0x00B2),

    /**
     *
     */
    ZCD_NV_SAS_PANID(0x00B3),

    /**
     *
     */
    ZCD_NV_SAS_CHANNEL_MASK(0x00B4),

    /**
     *
     */
    ZCD_NV_SAS_PROTOCOL_VER(0x00B5),

    /**
     *
     */
    ZCD_NV_SAS_STACK_PROFILE(0x00B6),

    /**
     *
     */
    ZCD_NV_SAS_STARTUP_CTRL(0x00B7),

    /**
     *
     */
    ZCD_NV_SAS_TC_ADDR(0x00C1),

    /**
     *
     */
    ZCD_NV_SAS_TC_MASTER_KEY(0x00C2),

    /**
     *
     */
    ZCD_NV_SAS_NWK_KEY(0x00C3),

    /**
     *
     */
    ZCD_NV_SAS_USE_INSEC_JOIN(0x00C4),

    /**
     *
     */
    ZCD_NV_SAS_PRECFG_LINK_KEY(0x00C5),

    /**
     *
     */
    ZCD_NV_SAS_NWK_KEY_SEQ_NUM(0x00C6),

    /**
     *
     */
    ZCD_NV_SAS_NWK_KEY_TYPE(0x00C7),

    /**
     *
     */
    ZCD_NV_SAS_NWK_MGR_ADDR(0x00C8),

    /**
     *
     */
    ZCD_NV_SAS_CURR_TC_MASTER_KEY(0x00D1),

    /**
     *
     */
    ZCD_NV_SAS_CURR_NWK_KEY(0x00D2),

    /**
     *
     */
    ZCD_NV_TCLK_TABLE_START(0x0101),

    /**
     *
     */
    ZCD_NV_TCLK_TABLE_END(0x01FF),

    /**
     *
     */
    ZCD_NV_APS_LINK_KEY_DATA_START(0x0201),

    /**
     *
     */
    ZCD_NV_APS_LINK_KEY_DATA_END(0x02FF);

    /**
     * A mapping between the integer code and its corresponding type to
     * facilitate lookup by code.
     */
    private static Map<Integer, ZstackConfigId> codeMapping;

    private int key;

    static {
        codeMapping = new HashMap<Integer, ZstackConfigId>();
        for (ZstackConfigId s : values()) {
            codeMapping.put(s.key, s);
        }
    }

    private ZstackConfigId(int key) {
        this.key = key;
    }

    /**
     * Lookup function based on the type code. Returns null if the code does not exist.
     *
     * @param code the code to lookup
     * @return enumeration value of the alarm type.
     */
    public static ZstackConfigId valueOf(int code) {
        if (codeMapping.get(code) == null) {
            return UNKNOWN;
        }

        return codeMapping.get(code);
    }

    /**
     * Returns the Z-Stack protocol defined value for this enumeration.
     *
     * @return the Z-Stack protocol key
     */
    public int getKey() {
        return key;
    }
}
