/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sys;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameRequest;

/**
 * Class to implement the Z-Stack command <b>SYS_RESET_REQ</b>.
 * <p>
 * This command is issued by the application processor to reset the CC2530 device. The reset is achieved through an internal
 * watchdog reset on the CC2530. Note that the hardware reset interface is recommended over using this interface.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackSysResetReqAcmd extends ZstackFrameRequest {

    /**
     * This requests a target device reset (0) or serial bootloader reset (1). If the target device does not support serial
     * bootloading, bootloader reset commands are ignored and no response is sent from the target.
     */
    private ZstackResetType type;

    /**
     * Request constructor
     */
    public ZstackSysResetReqAcmd() {
    }

    /**
     * This requests a target device reset (0) or serial bootloader reset (1). If the target device does not support serial
     * bootloading, bootloader reset commands are ignored and no response is sent from the target.
     *
     * @return the current type as {@link ZstackResetType}
     */
    public ZstackResetType getType() {
        return type;
    }

    /**
     * This requests a target device reset (0) or serial bootloader reset (1). If the target device does not support serial
     * bootloading, bootloader reset commands are ignored and no response is sent from the target.
     *
     * @param type the Type to set as {@link ZstackResetType}
     */
    public void setType(ZstackResetType type) {
        this.type = type;
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(ZSTACK_ACMD, ZSTACK_SYS, 0x00);

        // Serialize the fields
        serializer.serializeUInt8(type.getKey());
        return getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(49);
        builder.append("ZstackSysResetReqAcmd [type=");
        builder.append(type);
        builder.append(']');
        return builder.toString();
    }
}
