/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.appcnf;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameRequest;
import com.zsmartsystems.zigbee.dongle.zstack.api.rpc.ZstackRpcSreqErrorSrsp;

/**
 * Class to implement the Z-Stack command <b>APP_CNF_BDB_SET_ACTIVE_DEFAULT_CENTRALIZED_KEY</b>.
 * <p>
 * Sets the policy to mandate or not the usage of an Install Code upon joining.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackAppCnfBdbSetActiveDefaultCentralizedKeySreq extends ZstackFrameRequest {

    /**
     * This parameter controls which key will be used when performing association to a centralized network.
     */
    private ZstackCentralizedLinkKeyMode centralizedLinkKeyMode;

    /**
     * Buffer with the key in any of its formats.
     */
    private int[] installCode;

    /**
     * Request constructor
     */
    public ZstackAppCnfBdbSetActiveDefaultCentralizedKeySreq() {
        synchronousCommand = true;
    }

    /**
     * This parameter controls which key will be used when performing association to a centralized network.
     *
     * @return the current centralizedLinkKeyMode as {@link ZstackCentralizedLinkKeyMode}
     */
    public ZstackCentralizedLinkKeyMode getCentralizedLinkKeyMode() {
        return centralizedLinkKeyMode;
    }

    /**
     * This parameter controls which key will be used when performing association to a centralized network.
     *
     * @param centralizedLinkKeyMode the CentralizedLinkKeyMode to set as {@link ZstackCentralizedLinkKeyMode}
     */
    public void setCentralizedLinkKeyMode(ZstackCentralizedLinkKeyMode centralizedLinkKeyMode) {
        this.centralizedLinkKeyMode = centralizedLinkKeyMode;
    }

    /**
     * Buffer with the key in any of its formats.
     *
     * @return the current installCode as {@link int[]}
     */
    public int[] getInstallCode() {
        return installCode;
    }

    /**
     * Buffer with the key in any of its formats.
     *
     * @param installCode the InstallCode to set as {@link int[]}
     */
    public void setInstallCode(int[] installCode) {
        this.installCode = installCode;
    }

    @Override
    public boolean matchSreqError(ZstackRpcSreqErrorSrsp response) {
        return (((response.getReqCmd0() & 0x1F) == ZSTACK_APP_CNF) && (response.getReqCmd1() == 0x07));
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(ZSTACK_SREQ, ZSTACK_APP_CNF, 0x07);

        // Serialize the fields
        serializer.serializeUInt8(centralizedLinkKeyMode.getKey());
        serializer.serializeUInt8Array(installCode);
        return getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(102);
        builder.append("ZstackAppCnfBdbSetActiveDefaultCentralizedKeySreq [centralizedLinkKeyMode=");
        builder.append(centralizedLinkKeyMode);
        builder.append(", installCode=");
        for (int c = 0; c < installCode.length; c++) {
            if (c > 0) {
                builder.append(' ');
            }
            builder.append(String.format("%02X", installCode[c]));
        }
        builder.append(']');
        return builder.toString();
    }
}
