/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.util;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameRequest;
import com.zsmartsystems.zigbee.dongle.zstack.api.rpc.ZstackRpcSreqErrorSrsp;

/**
 * Class to implement the Z-Stack command <b>UTIL_LED_CONTROL</b>.
 * <p>
 * This command is used by the tester to control the LEDs on the board.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackUtilLedControlSreq extends ZstackFrameRequest {

    /**
     * The LED number.
     */
    private int ledId;

    /**
     * 0: OFF, 1: ON.
     */
    private boolean mode;

    /**
     * Request constructor
     */
    public ZstackUtilLedControlSreq() {
        synchronousCommand = true;
    }

    /**
     * The LED number.
     *
     * @return the current ledId as {@link int}
     */
    public int getLedId() {
        return ledId;
    }

    /**
     * The LED number.
     *
     * @param ledId the LedId to set as {@link int}
     */
    public void setLedId(int ledId) {
        this.ledId = ledId;
    }

    /**
     * 0: OFF, 1: ON.
     *
     * @return the current mode as {@link boolean}
     */
    public boolean getMode() {
        return mode;
    }

    /**
     * 0: OFF, 1: ON.
     *
     * @param mode the Mode to set as {@link boolean}
     */
    public void setMode(boolean mode) {
        this.mode = mode;
    }

    @Override
    public boolean matchSreqError(ZstackRpcSreqErrorSrsp response) {
        return (((response.getReqCmd0() & 0x1F) == ZSTACK_UTIL) && (response.getReqCmd1() == 0x09));
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(ZSTACK_SREQ, ZSTACK_UTIL, 0x09);

        // Serialize the fields
        serializer.serializeUInt8(ledId);
        serializer.serializeBoolean(mode);
        return getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(77);
        builder.append("ZstackUtilLedControlSreq [ledId=");
        builder.append(ledId);
        builder.append(", mode=");
        builder.append(mode);
        builder.append(']');
        return builder.toString();
    }
}
