/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.zdo;

import com.zsmartsystems.zigbee.IeeeAddress;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;

/**
 * Class to implement the Z-Stack command <b>ZDO_LEAVE_IND</b>.
 * <p>
 * This message is an indication to inform the host of a device leaving the network.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackZdoLeaveIndAreq extends ZstackFrameResponse {

    /**
     * Short address (LSB-MSB) of the source of the leave indication.
     */
    private int srcAddr;

    /**
     * Extended address (LSB-MSB) of the source of the leave indication.
     */
    private IeeeAddress extAddr;

    /**
     * Boolean, TRUE = request, FALSE = indication.
     */
    private boolean request;

    /**
     * Boolean, TRUE = remove children.
     */
    private boolean remove;

    /**
     * Boolean, TRUE = rejoin.
     */
    private boolean rejoin;

    /**
     * Response and Handler constructor
     */
    public ZstackZdoLeaveIndAreq(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        srcAddr = deserializer.deserializeUInt16();
        extAddr = deserializer.deserializeIeeeAddress();
        request = deserializer.deserializeBoolean();
        remove = deserializer.deserializeBoolean();
        rejoin = deserializer.deserializeBoolean();
    }

    /**
     * Short address (LSB-MSB) of the source of the leave indication.
     *
     * @return the current srcAddr as {@link int}
     */
    public int getSrcAddr() {
        return srcAddr;
    }

    /**
     * Short address (LSB-MSB) of the source of the leave indication.
     *
     * @param srcAddr the SrcAddr to set as {@link int}
     */
    public void setSrcAddr(int srcAddr) {
        this.srcAddr = srcAddr;
    }

    /**
     * Extended address (LSB-MSB) of the source of the leave indication.
     *
     * @return the current extAddr as {@link IeeeAddress}
     */
    public IeeeAddress getExtAddr() {
        return extAddr;
    }

    /**
     * Extended address (LSB-MSB) of the source of the leave indication.
     *
     * @param extAddr the ExtAddr to set as {@link IeeeAddress}
     */
    public void setExtAddr(IeeeAddress extAddr) {
        this.extAddr = extAddr;
    }

    /**
     * Boolean, TRUE = request, FALSE = indication.
     *
     * @return the current request as {@link boolean}
     */
    public boolean getRequest() {
        return request;
    }

    /**
     * Boolean, TRUE = request, FALSE = indication.
     *
     * @param request the Request to set as {@link boolean}
     */
    public void setRequest(boolean request) {
        this.request = request;
    }

    /**
     * Boolean, TRUE = remove children.
     *
     * @return the current remove as {@link boolean}
     */
    public boolean getRemove() {
        return remove;
    }

    /**
     * Boolean, TRUE = remove children.
     *
     * @param remove the Remove to set as {@link boolean}
     */
    public void setRemove(boolean remove) {
        this.remove = remove;
    }

    /**
     * Boolean, TRUE = rejoin.
     *
     * @return the current rejoin as {@link boolean}
     */
    public boolean getRejoin() {
        return rejoin;
    }

    /**
     * Boolean, TRUE = rejoin.
     *
     * @param rejoin the Rejoin to set as {@link boolean}
     */
    public void setRejoin(boolean rejoin) {
        this.rejoin = rejoin;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(149);
        builder.append("ZstackZdoLeaveIndAreq [srcAddr=");
        builder.append(String.format("%04X", srcAddr));
        builder.append(", extAddr=");
        builder.append(extAddr);
        builder.append(", request=");
        builder.append(request);
        builder.append(", remove=");
        builder.append(remove);
        builder.append(", rejoin=");
        builder.append(rejoin);
        builder.append(']');
        return builder.toString();
    }
}
