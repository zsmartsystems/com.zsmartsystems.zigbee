/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.appcnf;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;
import com.zsmartsystems.zigbee.dongle.zstack.api.appcnf.ZstackBdbRemainingCommissioningModes;
import java.util.HashSet;
import java.util.Set;

/**
 * Class to implement the Z-Stack command <b>APP_CNF_BDB_COMMISSIONING_NOTIFICATION</b>.
 * <p>
 * Callback to receive notifications from BDB process.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackAppCnfBdbCommissioningNotificationAreq extends ZstackFrameResponse {

    /**
     * Status of the commissioning mode being notified
     */
    private ZstackBdbStatus status;

    /**
     * Commissioning mode for which the notification is done and to which the status is related
     */
    private ZstackBdbCommissioningMode commissioningMode;

    /**
     * Bitmask of the remaining commissioning modes after this notification.
     * <p>
     * Parameter allows multiple options so implemented as a {@link Set}.
     */
    private Set<ZstackBdbRemainingCommissioningModes> remainingCommissioningModes = new HashSet<>();

    /**
     * Response and Handler constructor
     */
    public ZstackAppCnfBdbCommissioningNotificationAreq(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        status = ZstackBdbStatus.valueOf(deserializer.deserializeUInt8());
        commissioningMode = ZstackBdbCommissioningMode.valueOf(deserializer.deserializeUInt8());
        int tmpRemainingCommissioningModes = deserializer.deserializeUInt8();
        for (ZstackBdbRemainingCommissioningModes value : ZstackBdbRemainingCommissioningModes.values()) {
            if ((tmpRemainingCommissioningModes & value.getKey()) != 0) {
                remainingCommissioningModes.add(value);
            }
        }
    }

    /**
     * Status of the commissioning mode being notified
     *
     * @return the current status as {@link ZstackBdbStatus}
     */
    public ZstackBdbStatus getStatus() {
        return status;
    }

    /**
     * Status of the commissioning mode being notified
     *
     * @param status the Status to set as {@link ZstackBdbStatus}
     */
    public void setStatus(ZstackBdbStatus status) {
        this.status = status;
    }

    /**
     * Commissioning mode for which the notification is done and to which the status is related
     *
     * @return the current commissioningMode as {@link ZstackBdbCommissioningMode}
     */
    public ZstackBdbCommissioningMode getCommissioningMode() {
        return commissioningMode;
    }

    /**
     * Commissioning mode for which the notification is done and to which the status is related
     *
     * @param commissioningMode the CommissioningMode to set as {@link ZstackBdbCommissioningMode}
     */
    public void setCommissioningMode(ZstackBdbCommissioningMode commissioningMode) {
        this.commissioningMode = commissioningMode;
    }

    /**
     * Bitmask of the remaining commissioning modes after this notification.
     *
     * @return the current remainingCommissioningModes as {@link Set} of {@link ZstackBdbRemainingCommissioningModes}
     */
    public Set<ZstackBdbRemainingCommissioningModes> getRemainingCommissioningModes() {
        return remainingCommissioningModes;
    }

    /**
     * Bitmask of the remaining commissioning modes after this notification.
     *
     * @param remainingCommissioningModes the RemainingCommissioningModes to add to the {@link Set} as {@link ZstackBdbRemainingCommissioningModes}
     */
    public void addRemainingCommissioningModes(ZstackBdbRemainingCommissioningModes remainingCommissioningModes) {
        this.remainingCommissioningModes.add(remainingCommissioningModes);
    }

    /**
     * Bitmask of the remaining commissioning modes after this notification.
     *
     * @param remainingCommissioningModes the RemainingCommissioningModes to remove to the {@link Set} as {@link ZstackBdbRemainingCommissioningModes}
     */
    public void removeRemainingCommissioningModes(ZstackBdbRemainingCommissioningModes remainingCommissioningModes) {
        this.remainingCommissioningModes.remove(remainingCommissioningModes);
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(122);
        builder.append("ZstackAppCnfBdbCommissioningNotificationAreq [status=");
        builder.append(status);
        builder.append(", commissioningMode=");
        builder.append(commissioningMode);
        builder.append(", remainingCommissioningModes=");
        builder.append(remainingCommissioningModes);
        builder.append(']');
        return builder.toString();
    }
}
