/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.sys;

import com.zsmartsystems.zigbee.dongle.zstack.api.appcnf.ZstackAuthenticationOption;
import com.zsmartsystems.zigbee.dongle.zstack.internal.serializer.ZstackDeserializer;
import com.zsmartsystems.zigbee.dongle.zstack.internal.serializer.ZstackSerializer;

/**
 * Class to implement the Z-Stack structure <b>ZstackSecMgrEntry</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackSecMgrEntry {

    /**
     * Address manager index that holds the IEEE address of destination device. INVALID_NODE_ADDR = 0xFFFE
     */
    private int ami;

    /**
     * Index to the Link Key table in NV
     */
    private int keyNvId;

    /**
     */
    private ZstackAuthenticationOption authenticateOption;

    /**
     * Address manager index that holds the IEEE address of destination device. INVALID_NODE_ADDR = 0xFFFE
     *
     * @return the current ami as {@link int}
     */
    public int getAmi() {
        return ami;
    }

    /**
     * Address manager index that holds the IEEE address of destination device. INVALID_NODE_ADDR = 0xFFFE
     *
     * @param ami the ami to set as {@link int}
     */
    public void setAmi(int ami) {
        this.ami = ami;
    }

    /**
     * Index to the Link Key table in NV
     *
     * @return the current keyNvId as {@link int}
     */
    public int getKeyNvId() {
        return keyNvId;
    }

    /**
     * Index to the Link Key table in NV
     *
     * @param keyNvId the keyNvId to set as {@link int}
     */
    public void setKeyNvId(int keyNvId) {
        this.keyNvId = keyNvId;
    }

    /**
     *
     *
     * @return the current authenticateOption as {@link ZstackAuthenticationOption}
     */
    public ZstackAuthenticationOption getAuthenticateOption() {
        return authenticateOption;
    }

    /**
     *
     *
     * @param authenticateOption the authenticateOption to set as {@link ZstackAuthenticationOption}
     */
    public void setAuthenticateOption(ZstackAuthenticationOption authenticateOption) {
        this.authenticateOption = authenticateOption;
    }

    /**
     * Serialize the data from this structure class to an integer array
     *
     * @param serializer the {@link ZstackSerializer} to use
     */
    public int[] serialize(ZstackSerializer serializer) {
        // Serialize the fields
        serializer.serializeUInt16(ami);
        serializer.serializeUInt16(keyNvId);
        serializer.serializeUInt8(authenticateOption.getKey());
        return serializer.getBuffer();
    }

    /**
     * Deserialize the data into this structure class
     *
     * @param deserializer the {@link ZstackDeserializer} to use
     */
    public void deserialize (ZstackDeserializer deserializer) {
        // Deserialize the fields
        ami = deserializer.deserializeUInt16();
        keyNvId = deserializer.deserializeUInt16();
        authenticateOption = ZstackAuthenticationOption.valueOf(deserializer.deserializeUInt8());
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(95);
        builder.append("ZstackSecMgrEntry [ami=");
        builder.append(ami);
        builder.append(", keyNvId=");
        builder.append(keyNvId);
        builder.append(", authenticateOption=");
        builder.append(authenticateOption);
        builder.append(']');
        return builder.toString();
    }
}
