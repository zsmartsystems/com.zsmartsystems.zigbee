/**
 * Copyright (c) 2016-2022 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.appcnf;

import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameRequest;
import com.zsmartsystems.zigbee.dongle.zstack.api.rpc.ZstackRpcSreqErrorSrsp;
import javax.annotation.Generated;

/**
 * Class to implement the Z-Stack command <b>APP_CNF_BDB_SET_CHANNEL</b>.
 * <p>
 * This command is used to store a channel select bit-mask to be used in commissioning.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 */

@Generated(value = "com.zsmartsystems.zigbee.dongle.zstack.autocode.CommandGenerator", date = "Sun Mar 26 09:52:48 CEST 2023")
public class ZstackAppCnfBdbSetChannelSreq extends ZstackFrameRequest {

    /**
     * Mask is used for primary channel selection.
     */
    private boolean isPrimary;

    /**
     * A bit-mask representing the channel(s) to scan the next time the target device resets.
     */
    private int channels;

    /**
     * Request constructor
     */
    public ZstackAppCnfBdbSetChannelSreq() {
        synchronousCommand = true;
    }

    /**
     * Mask is used for primary channel selection.
     *
     * @return the current isPrimary as {@link boolean}
     */
    public boolean getIsPrimary() {
        return isPrimary;
    }

    /**
     * Mask is used for primary channel selection.
     *
     * @param isPrimary the IsPrimary to set as {@link boolean}
     */
    public void setIsPrimary(boolean isPrimary) {
        this.isPrimary = isPrimary;
    }

    /**
     * A bit-mask representing the channel(s) to scan the next time the target device resets.
     *
     * @return the current channels as {@link int}
     */
    public int getChannels() {
        return channels;
    }

    /**
     * A bit-mask representing the channel(s) to scan the next time the target device resets.
     *
     * @param channels the Channels to set as {@link int}
     */
    public void setChannels(int channels) {
        this.channels = channels;
    }

    @Override
    public boolean matchSreqError(ZstackRpcSreqErrorSrsp response) {
        return (((response.getReqCmd0() & 0x1F) == ZSTACK_APP_CNF) && (response.getReqCmd1() == 0x08));
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(ZSTACK_SREQ, ZSTACK_APP_CNF, 0x08);

        // Serialize the fields
        serializer.serializeBoolean(isPrimary);
        serializer.serializeUInt32(channels);
        return getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(82);
        builder.append("ZstackAppCnfBdbSetChannelSreq [isPrimary=");
        builder.append(isPrimary);
        builder.append(", channels=");
        builder.append(channels);
        builder.append(']');
        return builder.toString();
    }
}
