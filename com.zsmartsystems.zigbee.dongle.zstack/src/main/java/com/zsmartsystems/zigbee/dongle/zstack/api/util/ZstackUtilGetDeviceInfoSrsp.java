/**
 * Copyright (c) 2016-2019 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.zstack.api.util;

import com.zsmartsystems.zigbee.IeeeAddress;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackFrameResponse;
import com.zsmartsystems.zigbee.dongle.zstack.api.ZstackResponseCode;
import com.zsmartsystems.zigbee.dongle.zstack.api.sys.ZstackZdoState;

/**
 * Class to implement the Z-Stack command <b>UTIL_GET_DEVICE_INFO</b>.
 * <p>
 * This command is used to retrieve the device info.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson
 */
public class ZstackUtilGetDeviceInfoSrsp extends ZstackFrameResponse {

    /**
     * Status is a one byte field and is either success(0) or fail(1). The fail status is returned if the address value in the command
     * message was not within the valid range.
     */
    private ZstackResponseCode status;

    /**
     * IEEE address of the device.
     */
    private IeeeAddress ieeeAddress;

    /**
     * Short address of the device.
     */
    private int shortAddr;

    /**
     * Indicates device type, where bits 0 to 2 indicate the capability for the device to operate as a coordinator, router, or end
     * device, respectively.
     */
    private int deviceType;

    /**
     * Indicates the state of the device.
     */
    private ZstackZdoState deviceState;

    /**
     * Array of 16-bits specifies the network address associated with the device.
     */
    private int[] assocDevicesList;

    /**
     * Response and Handler constructor
     */
    public ZstackUtilGetDeviceInfoSrsp(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        synchronousCommand = true;

        // Deserialize the fields
        status = ZstackResponseCode.valueOf(deserializer.deserializeUInt8());
        ieeeAddress = deserializer.deserializeIeeeAddress();
        shortAddr = deserializer.deserializeUInt16();
        deviceType = deserializer.deserializeUInt8();
        deviceState = ZstackZdoState.valueOf(deserializer.deserializeUInt8());
        int numAssocDevices = deserializer.deserializeUInt8();
        assocDevicesList = deserializer.deserializeUInt16Array(numAssocDevices);
    }

    /**
     * Status is a one byte field and is either success(0) or fail(1). The fail status is returned if the address value in the command
     * message was not within the valid range.
     *
     * @return the current status as {@link ZstackResponseCode}
     */
    public ZstackResponseCode getStatus() {
        return status;
    }

    /**
     * Status is a one byte field and is either success(0) or fail(1). The fail status is returned if the address value in the command
     * message was not within the valid range.
     *
     * @param status the Status to set as {@link ZstackResponseCode}
     */
    public void setStatus(ZstackResponseCode status) {
        this.status = status;
    }

    /**
     * IEEE address of the device.
     *
     * @return the current ieeeAddress as {@link IeeeAddress}
     */
    public IeeeAddress getIeeeAddress() {
        return ieeeAddress;
    }

    /**
     * IEEE address of the device.
     *
     * @param ieeeAddress the IeeeAddress to set as {@link IeeeAddress}
     */
    public void setIeeeAddress(IeeeAddress ieeeAddress) {
        this.ieeeAddress = ieeeAddress;
    }

    /**
     * Short address of the device.
     *
     * @return the current shortAddr as {@link int}
     */
    public int getShortAddr() {
        return shortAddr;
    }

    /**
     * Short address of the device.
     *
     * @param shortAddr the ShortAddr to set as {@link int}
     */
    public void setShortAddr(int shortAddr) {
        this.shortAddr = shortAddr;
    }

    /**
     * Indicates device type, where bits 0 to 2 indicate the capability for the device to operate as a coordinator, router, or end
     * device, respectively.
     *
     * @return the current deviceType as {@link int}
     */
    public int getDeviceType() {
        return deviceType;
    }

    /**
     * Indicates device type, where bits 0 to 2 indicate the capability for the device to operate as a coordinator, router, or end
     * device, respectively.
     *
     * @param deviceType the DeviceType to set as {@link int}
     */
    public void setDeviceType(int deviceType) {
        this.deviceType = deviceType;
    }

    /**
     * Indicates the state of the device.
     *
     * @return the current deviceState as {@link ZstackZdoState}
     */
    public ZstackZdoState getDeviceState() {
        return deviceState;
    }

    /**
     * Indicates the state of the device.
     *
     * @param deviceState the DeviceState to set as {@link ZstackZdoState}
     */
    public void setDeviceState(ZstackZdoState deviceState) {
        this.deviceState = deviceState;
    }

    /**
     * Array of 16-bits specifies the network address associated with the device.
     *
     * @return the current assocDevicesList as {@link int[]}
     */
    public int[] getAssocDevicesList() {
        return assocDevicesList;
    }

    /**
     * Array of 16-bits specifies the network address associated with the device.
     *
     * @param assocDevicesList the AssocDevicesList to set as {@link int[]}
     */
    public void setAssocDevicesList(int[] assocDevicesList) {
        this.assocDevicesList = assocDevicesList;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(205);
        builder.append("ZstackUtilGetDeviceInfoSrsp [status=");
        builder.append(status);
        builder.append(", ieeeAddress=");
        builder.append(ieeeAddress);
        builder.append(", shortAddr=");
        builder.append(String.format("%04X", shortAddr));
        builder.append(", deviceType=");
        builder.append(deviceType);
        builder.append(", deviceState=");
        builder.append(deviceState);
        builder.append(", assocDevicesList=");
        for (int c = 0; c < assocDevicesList.length; c++) {
            if (c > 0) {
                builder.append(' ');
            }
            builder.append(String.format("%02X", assocDevicesList[c]));
        }
        builder.append(']');
        return builder.toString();
    }
}
