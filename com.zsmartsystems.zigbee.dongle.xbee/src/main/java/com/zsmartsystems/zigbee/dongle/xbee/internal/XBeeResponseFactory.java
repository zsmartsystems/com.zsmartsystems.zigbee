/**
 * Copyright (c) 2016-2018 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.xbee.internal;

import java.lang.reflect.Constructor;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeAtResponse;
import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeDetailedVersionResponse;
import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeFirmwareVersionResponse;
import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeHardwareVersionResponse;
import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeResponse;
import com.zsmartsystems.zigbee.dongle.xbee.internal.protocol.XBeeZigbeeTransmitStatusResponse;

/**
 * Helper factory class to create {@link XBeeResponse} classes.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class XBeeResponseFactory {
    private final static Logger logger = LoggerFactory.getLogger(XBeeEventFactory.class);

    private static Map<Integer, Class<?>> events = new ConcurrentHashMap<Integer, Class<?>>();
    private static Map<Integer, Class<?>> atCommands = new ConcurrentHashMap<Integer, Class<?>>();

    static {
        // Define the API commands
        events.put(0x88, XBeeAtResponse.class);
        events.put(0x8B, XBeeZigbeeTransmitStatusResponse.class);

        // Define the AT commands
        atCommands.put(0x4856, XBeeHardwareVersionResponse.class); // HV
        atCommands.put(0x564C, XBeeDetailedVersionResponse.class); // VL
        atCommands.put(0x5652, XBeeFirmwareVersionResponse.class); // VR
    }

    public static XBeeResponse getXBeeFrame(int[] data) {
        Class<?> xbeeClass = null;

        // Try and correlate any AT command responses first
        if (data[2] == 0x88) {
            xbeeClass = atCommands.get((data[4] << 8) + data[5]);
        }

        // If not found, then use the API commands
        if (xbeeClass == null) {
            xbeeClass = events.get(data[2]);
        }

        // No handler found
        if (xbeeClass == null) {
            return null;
        }

        Constructor<?> ctor;
        try {
            ctor = xbeeClass.getConstructor();
            XBeeResponse xbeeFrame = (XBeeResponse) ctor.newInstance();
            xbeeFrame.deserialize(data);
            return xbeeFrame;
        } catch (Exception e) {
            logger.debug("Error creating instance of XBeeResponse", e);
        }

        return null;
    }
}
