<protocol>
	<!-- PRC ERROR INTERFACE COMMANDS -->
	<command>
		<name>RPC_SREQ_ERROR</name>
		<subsystem>RPC</subsystem>
		<id>0x00</id>
		<description>When the ZNP cannot recognize an SREQ command from the host processor, the following SRSP is returned.
		</description>
		<type>SYNC</type>
		<response>
			<parameter>
				<data_type>ZstackSreqErrorCode</data_type>
				<name>ErrorCode</name>
				<description>The error code maps to one of the enumerated values.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ReqCmd0</name>
				<display>hex[2]</display>
				<description>The Cmd0 value of the processed SREQ</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ReqCmd1</name>
				<display>hex[2]</display>
				<description>The Cmd1 value of the processed SREQ</description>
			</parameter>
		</response>
	</command>

	<!-- SYS INTERFACE COMMANDS -->
	<command>
		<name>SYS_RESET_REQ</name>
		<subsystem>SYS</subsystem>
		<id>0x00</id>
		<description>This command is issued by the application processor to reset the CC2530 device. The reset is achieved
			through an internal watchdog reset on the CC2530. Note that the hardware reset interface is recommended over using
			this interface.
		</description>
		<type>ASYNCMD</type>
		<request>
			<parameter>
				<data_type>ZstackResetType</data_type>
				<name>Type</name>
				<description>This requests a target device reset (0) or serial bootloader reset (1). If the target device does not
					support serial bootloading, bootloader reset commands are ignored and no response is sent from the target.
				</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>SYS_VERSION</name>
		<subsystem>SYS</subsystem>
		<id>0x02</id>
		<description>This command is used to request for the device’s version string.</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>uint8</data_type>
				<name>TransportRev</name>
				<description>Transport protocol revision</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Product</name>
				<description>Product Id</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MajorRel</name>
				<description>Software major release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MinorRel</name>
				<description>Software minor release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>HwRev</name>
				<description>Hardware revision number.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_RESET_IND</name>
		<subsystem>SYS</subsystem>
		<id>0x80</id>
		<description>This command is generated by the CC2530 device automatically immediately after a reset.</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>ZstackResetReason</data_type>
				<name>Reason</name>
				<description>One of the following values indicating the reason for the reset. Power=0x00, External=0x01,
					Watchdog=0x02
				</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>TransportRev</name>
				<description>Transport protocol revision</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Product</name>
				<description>Product Id</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MajorRel</name>
				<description>Software major release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MinorRel</name>
				<description>Software minor release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>HwRev</name>
				<description>Hardware revision number.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>SYS_PING</name>
		<subsystem>SYS</subsystem>
		<id>0x01</id>
		<description>This command issues PING requests to verify if a device is active and check the capability of the device.
		</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>uint16</data_type>
				<name>Capabilities</name>
				<description>This field represents the interfaces that this device can handle (compiled into the device).
				</description>
				<display>hex[4]</display>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_VERSION</name>
		<subsystem>SYS</subsystem>
		<id>0x02</id>
		<description>This command issues PING requests to verify if a device is active and check the capability of the device.
		</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>uint8</data_type>
				<name>TransportRev</name>
				<description>Transport protocol revision</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Product</name>
				<description>Product Id</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MajorRel</name>
				<description>Software major release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MinorRel</name>
				<description>Software minor release number</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>MaintRel</name>
				<description>Software maintenance release number</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_SET_EXT_ADDR</name>
		<subsystem>SYS</subsystem>
		<id>0x03</id>
		<description>This command is used to set the extended address of the device.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddress</name>
				<description>The device’s extended address.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (1) or Failure (0)</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_GET_EXT_ADDR</name>
		<subsystem>SYS</subsystem>
		<id>0x04</id>
		<description>This command is used to set the extended address of the device.</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddress</name>
				<description>The device’s extended address.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_OSAL_NV_READ</name>
		<subsystem>SYS</subsystem>
		<id>0x08</id>
		<description>This command is used to read a single memory item from the target non-volatile memory. The command
			accepts an attribute Id value and data offset and returns the memory value present in the target for the specified
			attribute Id.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackConfigId</data_type>
				<name>id</name>
				<description>The Id of the NV item.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Offset</name>
				<description>Number of bytes offset from the beginning or the NV value.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Len</name>
				<auto_size>Value</auto_size>
				<description>Length of the NV value.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Value</name>
				<description>Value of the NV item.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_OSAL_NV_WRITE</name>
		<subsystem>SYS</subsystem>
		<id>0x09</id>
		<description>This command is used to write to a particular item in non-volatile memory. The command accepts an
			attribute Id, data offset, data length, and attribute value. The attribute value is written to the location specified
			for the attribute Id in the target.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackConfigId</data_type>
				<name>Id</name>
				<description>The Id of the NV item.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Offset</name>
				<description>Number of bytes offset from the beginning or the NV value.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Length</name>
				<auto_size>Value</auto_size>
				<description>Length of the NV value.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Value</name>
				<description>Value of the NV item.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_SET_TX_POWER</name>
		<subsystem>SYS</subsystem>
		<id>0x14</id>
		<description>This command is used by the tester to set the target system radio transmit power. The returned TX power
			is the actual setting applied to the radio – nearest characterized value for the specific radio.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>int8</data_type>
				<name>TxPower</name>
				<description>Requested TX power setting, in dBm.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>int8</data_type>
				<name>TxPower</name>
				<description>Requested TX power setting, in dBm.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_ZDIAGS_INIT_STATS</name>
		<subsystem>SYS</subsystem>
		<id>0x17</id>
		<description>This command is used to initialize the statistics table in NV memory.</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_ZDIAGS_CLEAR_STATS</name>
		<subsystem>SYS</subsystem>
		<id>0x18</id>
		<description>This command is used to clear the statistics table. To clear data in NV (including the Boot Counter) the
			clearNV flag shall be set to TRUE.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>boolean</data_type>
				<name>clearNV</name>
				<description>TRUE – Clears statistics in NV memory including Boot Counter.
					FALSE – Clears statistics in RAM only.
					Boot Counter is preserved.
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>uint32</data_type>
				<name>SysClock</name>
				<description>Milliseconds since last reset.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_ZDIAGS_GET_STATS</name>
		<subsystem>SYS</subsystem>
		<id>0x19</id>
		<description>This command is used to read a specific system (attribute) ID statistics and/or metrics value.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackDiagnosticAttribute</data_type>
				<name>AttributeID</name>
				<description>System Diagnostics (ZDiags) attribute ID, as defined in ZDiags.h module.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>uint32</data_type>
				<name>AttributeValue</name>
				<description>Value of the requested attribute.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_ZDIAGS_RESTORE_STATS_NV</name>
		<subsystem>SYS</subsystem>
		<id>0x1A</id>
		<description>This command is used to restore the statistics table from NV into the RAM table.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackDiagnosticAttribute</data_type>
				<name>AttributeID</name>
				<description>System Diagnostics (ZDiags) attribute ID, as defined in ZDiags.h module.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SYS_ZDIAGS_SAVE_STATS_TO_NV</name>
		<subsystem>SYS</subsystem>
		<id>0x1B</id>
		<description>This command is used to save the statistics table from RAM to NV.</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>uint32</data_type>
				<name>SysClock</name>
				<description>Milliseconds since last reset.</description>
			</parameter>
		</response>
	</command>

	<!-- MAC INTERFACE COMMANDS -->

	<!-- NWK INTERFACE COMMANDS -->

	<!-- AF INTERFACE COMMANDS -->
	<command>
		<name>AF_REGISTER</name>
		<subsystem>AF</subsystem>
		<id>0x00</id>
		<description>This command enables the host processor to register an application’s endpoint description (and its simple
			descriptor). Multiple endpoints may be registered with the AF by making multiple calls to AF_REGISTER. This could be
			useful in the case where the device needs to support multiple application profiles, where each AF_REGISTER call would
			register a unique endpoint description per application profile.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint8</data_type>
				<name>EndPoint</name>
				<display>hex[2]</display>
				<description>Specifies the endpoint of this simple descriptor.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>AppProfId</name>
				<display>hex[4]</display>
				<description>Specifies the profile id of the application.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>AppDeviceId</name>
				<description>Specifies the device description id for this endpoint.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>AppDevVer</name>
				<description>Specifies the device version number.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>LatencyReq</name>
				<description>Specifies latency. For ZigBee the only applicable value is 0x00.
					0x00-No latency 0x01-fast beacons
					0x02-slow beacons
				</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>AppNumInClusters</name>
				<auto_size>AppInClusterList</auto_size>
				<description>the number of Input cluster Ids following in the AppInClusterList</description>
			</parameter>
			<parameter>
				<data_type>uint16[]</data_type>
				<name>AppInClusterList</name>
				<description>Specifies the list of Input Cluster Ids (2 bytes each).</description>
				<display>hex[4]</display>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>AppNumOutClusters</name>
				<auto_size>AppOutClusterList</auto_size>
				<description>Specifies the number of Output cluster Ids following in the AppOutClusterList.</description>
			</parameter>
			<parameter>
				<data_type>uint16[]</data_type>
				<name>AppOutClusterList</name>
				<description>Specifies the list of Output Cluster Ids (2 bytes each)</description>
				<display>hex[4]</display>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>AF_DATA_REQUEST</name>
		<subsystem>AF</subsystem>
		<id>0x01</id>
		<description>This command is used by the App processor to build and send a message through AF layer.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>DstAddr</name>
				<display>hex[4]</display>
				<description>Short address of the destination device.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>DestEndpoint</name>
				<display>hex[2]</display>
				<description>Endpoint of the destination device.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SrcEndpoint</name>
				<display>hex[2]</display>
				<description>Endpoint of the source device.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>ClusterID</name>
				<display>hex[4]</display>
				<description>Specifies the cluster ID.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>TransID</name>
				<display>hex[2]</display>
				<description>Specifies the transaction sequence number of the message. The corresponding AF_DATA_CONFIRM will have
					the same TransID. This can be useful if the application wishes to match up AF_DATA_REQUESTs with AF_DATA_CONFIRMs.
				</description>
			</parameter>
			<parameter>
				<data_type multiple="true">AfDataOptions</data_type>
				<name>Options</name>
				<description>The transmit options field is organized as a bitmask. The following enumerates the values for the
					various supported bitmasks. For example, a value of 0x10 means that bit 4 is set.
				</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Radius</name>
				<description>Specifies the list of Input Cluster Ids ( 2bytes each ).</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Len</name>
				<auto_size>Data</auto_size>
				<description>Length of the data.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Data</name>
				<description>0-99 bytes data. Without any security (99 bytes), with NWK security (81 bytes), with NWK and APS
					security (64 bytes).
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>AF_DATA_CONFIRM</name>
		<subsystem>AF</subsystem>
		<id>0x80</id>
		<description>This command is sent by the device to the user after it receives an AF_DATA_REQUEST. For each
			AF_DATA_REQUEST, a AF_DATA_CONFIRM is always returned. If APS acknowledgement was used for the AF_DATA_REQUEST, the
			confirm carries the status of whether the APS acknowledgement was received or not (ZApsNoAck – 0xb7). If APS
			acknowledgement was not used, then the confirm carries the status of whether the MAC acknowledgement (“next hop”
			acknowledgment) was received or not (ZMacNoACK – 0xe9). This also applies to packets that are sent using
			AF_DATA_REQUEST_EXT and AF_DATA_STORE. For APS fragmented packets, the value of the configuration item
			ZCD_NV_APSF_WINDOW_SIZE determines when an AF_DATA_CONFIRM that carries the status of the APS acknowledgement is
			received.
		</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Endpoint</name>
				<display>hex[2]</display>
				<description>Endpoint of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>TransId</name>
				<display>hex[2]</display>
				<description>Specifies the transaction sequence number of the message.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>AF_INCOMING_MSG</name>
		<subsystem>AF</subsystem>
		<id>0x81</id>
		<description>This callback message is in response to incoming data to any of the registered endpoints on this device.
		</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>GroupId</name>
				<display>hex[4]</display>
				<description>Specifies the group ID of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>ClusterId</name>
				<display>hex[4]</display>
				<description>Specifies the cluster ID.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>SrcAddr</name>
				<display>hex[4]</display>
				<description>Specifies the ZigBee network address of the source device sending the message.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SrcEndpoint</name>
				<display>hex[2]</display>
				<description>Specifies the source endpoint of the message.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>DestEndpoint</name>
				<display>hex[2]</display>
				<description>Specifies the destination endpoint of the message.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>WasBroadcast</name>
				<description>Specifies if the message was a broadcast or not.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>LinkQuality</name>
				<description>Indicates the link quality measured during reception.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>SecurityUse</name>
				<description>Specifies if the security is used or not.</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>TimeStamp</name>
				<display>hex[8]</display>
				<description>Specifies the timestamp of the message.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SeqNumber</name>
				<display>hex[2]</display>
				<description>Specifies transaction sequence number of the message.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Len</name>
				<auto_size>Data</auto_size>
				<description>Specifies the length of the data.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Data</name>
				<description>Contains 0 to 99 bytes of data. Without any security (99 bytes), with NWK security (81 bytes), with NWK
					and APS security (64 bytes).
				</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<!-- ZDO INTERFACE COMMANDS -->
	<command>
		<name>ZDO_SET_LINK_KEY</name>
		<subsystem>ZDO</subsystem>
		<id>0x23</id>
		<description>This command sets the application link key for a given device.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>ShortAddr</name>
				<display>hex[4]</display>
				<description>Specifies the short address of the pair device of the link key.</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddr</name>
				<description>Specifies the IEEE address of the pair device of the link key</description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>LinkKeyData</name>
				<description>128 bit link key data of the device.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 – Success. 0x01 – Fail to add to address manager. 0x11 – Security manager key table full
				</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_REMOVE_LINK_KEY</name>
		<subsystem>ZDO</subsystem>
		<id>0x24</id>
		<description>This command removes the application link key of a given device.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddr</name>
				<description>Specifies the IEEE address of the pair device of the link key</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 – Success. 0xC8 – Unknown device.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_GET_LINK_KEY</name>
		<subsystem>ZDO</subsystem>
		<id>0x25</id>
		<description>This command retrieves the application link key of a given device.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddr</name>
				<description>Specifies the IEEE address of the pair device of the link key</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 – Success. 0xC8 – Unknown device.</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddr</name>
				<description>Specifies the IEEE address of the pair device of the link key</description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>LinkKeyData</name>
				<description>Link key data of the device</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_NWK_DISCOVERY_REQ</name>
		<subsystem>ZDO</subsystem>
		<id>0x26</id>
		<description>This command is used to initiate a network discovery (active scan).</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint32</data_type>
				<name>ScanChannels</name>
				<description>Bit mask for channels to scan. </description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ScanDuration</name>
				<description>A value used to calculate the length of time to spend scanning each channel</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Success (0)
					Invalid_Parameter (0x02).
					ZNwkInvalidRequest (0xC2) if the device is already on a network.
					User ZDO_MGMT_NWK_DISC_REQ instead. Or leave the network first, then
					initiate the request.
					MAC_SCAN_IN_PROGRESS
					(0xFC) if a channel change is in progress.
					MAC_NO_RESOURCE (0x1A) if the operation could not complete because no
					memory resource were available.
				</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_MSG_CB_REGISTER</name>
		<subsystem>ZDO</subsystem>
		<id>0x3E</id>
		<description>This command registers for a ZDO callback.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>ClusterId</name>
				<display>hex[4]</display>
				<description>Specifies the ZDO Cluster Id for which to receive a ZDO callback.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 – Success.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_STARTUP_FROM_APP</name>
		<subsystem>ZDO</subsystem>
		<id>0x40</id>
		<description>This command starts the device in the network.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>StartDelay</name>
				<description>Specifies the time delay before the device starts in milliseconds.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>This field indicates either SUCCESS (0) or FAILURE (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZDO_STATE_CHANGE_IND</name>
		<subsystem>ZDO</subsystem>
		<id>0xC0</id>
		<description>This callback message indicates the ZDO state change.</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>ZstackZdoState</data_type>
				<name>State</name>
				<description>Specifies the changed ZDO state. An enumerated list starting from 0.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>ZDO_LEAVE_IND</name>
		<subsystem>ZDO</subsystem>
		<id>0xC9</id>
		<description>This message is an indication to inform the host of a device leaving the network.</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>SrcAddr</name>
				<display>hex[4]</display>
				<description>Short address (LSB-MSB) of the source of the leave indication.</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddr</name>
				<description>Extended address (LSB-MSB) of the source of the leave indication.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>Request</name>
				<description>Boolean, TRUE = request, FALSE = indication.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>Remove</name>
				<description>Boolean, TRUE = remove children.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>Rejoin</name>
				<description>Boolean, TRUE = rejoin.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>ZDO_TC_DEV_IND</name>
		<subsystem>ZDO</subsystem>
		<id>0xCA</id>
		<description>This message is a ZDO callback for TC Device Indication. This is an indication that the TC has delivered
			the key to a recently joined device.
		</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>SrcAddr</name>
				<display>hex[4]</display>
				<description>Source network Address</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddr</name>
				<description>IEEE Address of the source</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>ParentAddr</name>
				<display>hex[4]</display>
				<description>Network address of the parent</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<command>
		<name>ZDO_MSG_CB_INCOMING</name>
		<subsystem>ZDO</subsystem>
		<id>0xFF</id>
		<description>This message is a ZDO callback for a Cluster Id that the host requested to receive with a ZDO_
			MSG_CB_REGISTER request.
		</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>SrcAddr</name>
				<display>hex[4]</display>
				<description>Short address (LSB-MSB) of the source of the ZDO message.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>WasBroadcast</name>
				<description>This field indicates whether or not this ZDO message was broadcast.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>ClusterId</name>
				<display>hex[4]</display>
				<description>The ZDO Cluster Id of this message.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>SecurityUse</name>
				<description>N/A – not used.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SeqNumber</name>
				<display>hex[2]</display>
				<description>The sequence number of this ZDO message.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>DstAddr</name>
				<display>hex[4]</display>
				<description>The MAC destination short address (LSB-MSB) of the ZDO message.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Data</name>
				<description>The data that corresponds to the Cluster Id of the message</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>



	<!-- SAPI INTERFACE COMMANDS -->
	<command>
		<name>ZB_READ_CONFIGURATION</name>
		<subsystem>SAPI</subsystem>
		<id>0x04</id>
		<description>This command is used to get a configuration property from non-volatile memory.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackConfigId</data_type>
				<name>ConfigId</name>
				<description>Specifies the Identifier for the configuration property.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>This field indicates either SUCCESS (0) or FAILURE (1).</description>
			</parameter>
			<parameter>
				<data_type>ZstackConfigId</data_type>
				<name>ConfigId</name>
				<description>Specifies the Identifier for the configuration property.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Len</name>
				<auto_size>Value</auto_size>
				<description>Specifies the size of the Value buffer in bytes.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Value</name>
				<description>Buffer to hold the configuration property.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZB_WRITE_CONFIGURATION</name>
		<subsystem>SAPI</subsystem>
		<id>0x05</id>
		<description>This command is used to write a configuration property to nonvolatile memory.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackConfigId</data_type>
				<name>ConfigId</name>
				<description>Specifies the Identifier for the configuration property.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>Len</name>
				<description>Specifies the size of the Value buffer in bytes.</description>
				<auto_size>Value</auto_size>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Value</name>
				<description>Buffer to hold the configuration property.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>This field indicates either SUCCESS (0) or FAILURE (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>ZB_GET_DEVICE_INFO</name>
		<subsystem>SAPI</subsystem>
		<id>0x06</id>
		<description>This command retrieves a Device Information Property.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint8</data_type>
				<name>Param</name>
				<description>The Identifier for the device information.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>uint8</data_type>
				<name>Param</name>
				<description>The Identifier for the device information.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>Value</name>
				<description>A buffer to hold the device information</description>
			</parameter>
		</response>
	</command>



	<!-- UTIL INTERFACE COMMANDS -->
	<command>
		<name>UTIL_GET_DEVICE_INFO</name>
		<subsystem>UTIL</subsystem>
		<id>0x00</id>
		<description>This command is used to retrieve the device info.</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is a one byte field and is either success(0) or fail(1). The fail status is returned if the
					address value in the command message was not within the valid range.
				</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddress</name>
				<description>IEEE address of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>ShortAddr</name>
				<display>hex[4]</display>
				<description>Short address of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>DeviceType</name>
				<description>Indicates device type, where bits 0 to 2 indicate the capability for the device to operate as a
					coordinator, router, or end device, respectively.
				</description>
			</parameter>
			<parameter>
				<data_type>ZstackZdoState</data_type>
				<name>DeviceState</name>
				<description>Indicates the state of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>NumAssocDevices</name>
				<description>Specifies the number of devices being associated to the target device.</description>
				<auto_size>AssocDevicesList</auto_size>
			</parameter>
			<parameter>
				<data_type>uint16[]</data_type>
				<name>AssocDevicesList</name>
				<description>Array of 16-bits specifies the network address associated with the device.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_GET_NV_INFO</name>
		<subsystem>UTIL</subsystem>
		<id>0x01</id>
		<description>This command is used to read a block of parameters from non-volatile storage of the target device.
		</description>
		<type>SYNC</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>uint8</data_type>
				<name>Status</name>
				<description>A value of zero indicates success. Failure is indicated by a non-zero value, representing a bit mask of
					each item that failed to be retrieved from NV memory. Bit0 is used for the first item (IEEEAddress), bit1 for the
					second item (ScanChannels), and so forth. Data values for failed items are returned as one or more bytes of 0xFF,
					the typical value read from erased NV memory.
				</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddress</name>
				<description>IEEE address of the device.</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>ScanChannels</name>
				<description>This represents a bit-mask of channels to be scanned when starting the device.</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>PanId</name>
				<display>hex[4]</display>
				<description>Specifies the Pan Id to start or join. Set to 0xFFFF to select a PAN after scanning.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SecurityLevel</name>
				<description>This specifies the network messaging security level, zero disables security.</description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>PreConfigKey</name>
				<description>This specifies the pre-configured security key.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_SET_PANID</name>
		<subsystem>UTIL</subsystem>
		<id>0x02</id>
		<description>Store a PanId value into Non-Volatile memory to be used the next time the target device resets.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint16</data_type>
				<name>PanId</name>
				<display>hex[4]</display>
				<description>PanId that will be set.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_SET_CHANNELS</name>
		<subsystem>UTIL</subsystem>
		<id>0x03</id>
		<description>This command is used to store a channel select bit-mask into Non-Volatile memory to be used the next time
			the target device resets.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint32</data_type>
				<name>Channels</name>
				<description>A bit-mask representing the channel(s) to scan the next time the target device resets.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_SET_SECLEVEL</name>
		<subsystem>UTIL</subsystem>
		<id>0x04</id>
		<description>This command is used to store a channel select bit-mask into Non-Volatile memory to be used the next time
			the target device resets.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint8</data_type>
				<name>SecLevel</name>
				<description>Security level to use the next time the target device resets. Zero is used to disable security.
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_SET_PRECFGKEY</name>
		<subsystem>UTIL</subsystem>
		<id>0x05</id>
		<description>This command is used to store a pre-configured key array into Non-Volatile memory to be used the next
			time the target device resets.
		</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>PreCfgKey</name>
				<description>An array representing the pre-configured key to use the next time the target device resets.
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_LED_CONTROL</name>
		<subsystem>UTIL</subsystem>
		<id>0x09</id>
		<description>This command is used by the tester to control the LEDs on the board.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint8</data_type>
				<name>LedId</name>
				<description>The LED number.</description>
			</parameter>
			<parameter>
				<data_type>boolean</data_type>
				<name>Mode</name>
				<description>0: OFF, 1: ON.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_APSME_LINK_KEY_DATA_GET</name>
		<subsystem>UTIL</subsystem>
		<id>0x44</id>
		<description>This command retrieves APS link key data, Tx and Rx frame counters.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddr</name>
				<description>The extended address for which to get the link key data.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>The ZStatus_t returned by the proxy call to APSME_LinkKeyNVIdGet().</description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>SecKey</name>
				<description>On success, the security key looked up; otherwise N/A.</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>TxFrmCntr</name>
				<display>hex[8]</display>
				<description>On success, the TX frame counter; otherwise N/A.</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>RxFrmCntr</name>
				<display>hex[8]</display>
				<description>On success, the RX frame counter; otherwise N/A.</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>UTIL_APSME_LINK_KEY_NV_ID_GET</name>
		<subsystem>UTIL</subsystem>
		<id>0x45</id>
		<description>This command is a proxy call to the APSME_LinkKeyNvIdGet() function.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>ExtAddr</name>
				<description>The extended address for which to get the link key NV Id.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>The ZStatus_t returned by the proxy call to APSME_LinkKeyNVIdGet().</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>LinkKeyNvId</name>
				<description>On success, link key NV ID. Otherwise 0xFFFF</description>
			</parameter>
		</response>
	</command>

	<!-- MAC INTERFACE COMMANDS -->
	<command>
		<name>MAC_SCAN_REQ</name>
		<subsystem>MAC</subsystem>
		<id>0x0C</id>
		<description>This command is used to send a request to the device to perform a network scan.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>uint32</data_type>
				<name>ScanChannels</name>
				<description>This represents a bit-mask of channels to be scanned when starting the device:
					NONE = 0x00000000,
					ALL_CHANNELS = 0x07FFF800,
					CHANNEL 11 = 0x00000800,
					CHANNEL 12 = 0x00001000,
					CHANNEL 13 = 0x00002000,
					CHANNEL 14 =
					0x00004000,
					CHANNEL 15 = 0x00008000,
					CHANNEL 16 = 0x00010000,
					CHANNEL 17 = 0x00020000,
					CHANNEL 18 = 0x00040000,
					CHANNEL_19 = 0x00080000,
					CHANNEL 20 = 0x00100000,
					CHANNEL 21 = 0x00200000,
					CHANNEL 22 = 0x00400000,
					CHANNEL 23 =
					0x00800000,
					CHANNEL 24 = 0x01000000
					CHANNEL 25 = 0x02000000,
					CHANNEL 26 = 0x04000000
				</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ScanType</name>
				<description>Specifies the scan type:</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ScanDuration</name>
				<description>Duration of the scan - The exponent used in the scan duration calculation.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>ChannelPage</name>
				<description>The channel page on which to perform the scan.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>KeySource</name>
				<description>Key Source of this data frame.</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>SecurityLevel</name>
				<description>Security Level of this data frame:</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>KeyIdMode</name>
				<description>Key Id Mode of this data frame:</description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>KeyIndex</name>
				<description>Key Index of this data frame.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>


	<!-- DEBUG INTERFACE COMMANDS -->

	<!-- APP INTERFACE COMMANDS -->

	<!-- APP_CNF INTERFACE COMMANDS -->
	<command>
		<name>APP_CNF_SET_ALLOWREJOIN_TC_POLICY</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x03</id>
		<description>Sets the AllowRejoin TC policy.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>boolean</data_type>
				<name>AllowRejoin</name>
				<description>This value specifies whether or not the Trust Center allows devices to rejoin.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>
	
	<command>
		<name>APP_CNF_BDB_ADD_INSTALLCODE</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x04</id>
		<description>Add a preconfigured key (plain key or IC) to Trust Center device.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackInstallCodeFormat</data_type>
				<name>InstallCodeFormat</name>
				<description>This value specifies the format in which the install code is being added. The following list contains the values corresponding to the supported formats:
0x01 Install Code + CRC
0x02 Key derived from Install Code</description>
			</parameter>
			<parameter>
				<data_type>IeeeAddress</data_type>
				<name>IeeeAddress</name>
				<description>Full IEEE address for the device joining the network</description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>InstallCode</name>
				<description>16 Bytes for the Key derived from the IC.
18 Bytes for the Install Code +CRC</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status values:
0x00 Success. 
0x01 Failure (IC not supported) 0x02 Invalid parameter (bad CRC).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>APP_CNF_BDB_SET_JOINUSESINSTALLCODEKEY</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x06</id>
		<description>Sets the policy to mandate or not the usage of an Install Code upon joining.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>boolean</data_type>
				<name>JoinUsesInstallCodeKey</name>
				<description>If it is equal to TRUE and the installation code derived link key is not stored, the Trust Center SHALL
					terminate the procedure for adding a new node into the network. If bdbJoinUsesInstall- CodeKey is equal to TRUE and
					the installation code derived link key is stored, the Trust Center SHALL first find the entry in
					apsDeviceKeyPairSet that corresponds to the joining node and then overwrite the LinkKey entry with the installation
					code derived link key and set the KeyAttributes field to PROVISIONAL_KEY. The Trust Center MAY then set
					OutgoingFrame- Counter to 0 and SHALL set IncomingFrameCounter to 0. If bdbJoinUsesInstallCodeKey is equal to
					FALSE, the Trust Center SHALL first find the entry in apsDeviceKeyPairSet that corresponds to the joining node and
					then overwrite the LinkKey entry with the default global Trust Center link key and set the KeyAttributes field to
					PROVISIONAL_KEY. The Trust Center MAY then set OutgoingFrameCounter to 0 and SHALL set IncomingFrameCounter to 0.
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>APP_CNF_BDB_SET_ACTIVE_DEFAULT_CENTRALIZED_KEY</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x07</id>
		<description>Sets the policy to mandate or not the usage of an Install Code upon joining.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>ZstackCentralizedLinkKeyMode</data_type>
				<name>CentralizedLinkKeyMode</name>
				<description>This parameter controls which key will be used when performing association to a centralized network.
				</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>InstallCode</name>
				<description>Buffer with the key in any of its formats.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 Success 0x01 Failure (IC not supported) 0x02 Invalid Parameters (bad CRC).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>APP_CNF_BDB_SET_TC_REQUIRE_KEY_EXCHANGE</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x09</id>
		<description>Sets the policy flag on Trust Center device to mandate or not the TCLK exchange procedure.</description>
		<type>SYNC</type>
		<request>
			<parameter>
				<data_type>boolean</data_type>
				<name>TrustCenterRequireKeyExchange</name>
				<description>The bdbTrustCenterRequireKeyExchange attribute specifies whether the Trust Center requires a joining
					device to exchange its initial link key with a new link key generated by the Trust Center. If
					bdbTrustCenterRequireKeyExchange is equal to TRUE, the joining node must undergo the link key exchange procedure;
					failure to exchange the link key will result in the node being removed from the network. If
					bdbTrustCenterRequireKeyExchange is equal to FALSE, the Trust Center will permit the joining node to remain on the
					network without exchanging its initial link key. This attribute is used by ZigBee coordinator nodes.
				</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>Status is either Success (0) or Failure (1).</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>APP_CNF_BDB_COMMISSIONING_NOTIFICATION</name>
		<subsystem>APP_CNF</subsystem>
		<id>0x80</id>
		<description>Callback to receive notifications from BDB process.</description>
		<type>ASYNC</type>
		<request>
			<parameter>
				<data_type>ZstackBdbStatus</data_type>
				<name>Status</name>
				<description>Status of the commissioning mode being notified</description>
			</parameter>
			<parameter>
				<data_type>ZstackBdbCommissioningMode</data_type>
				<name>CommissioningMode</name>
				<description>Commissioning mode for which the notification is done and to which the status is related</description>
			</parameter>
			<parameter>
				<data_type multiple="true">ZstackBdbRemainingCommissioningModes</data_type>
				<name>RemainingCommissioningModes</name>
				<description>Bitmask of the remaining commissioning modes after this notification.</description>
			</parameter>
		</request>
		<response>
		</response>
	</command>

	<!-- SBL INTERFACE COMMANDS -->
	<command>
		<name>SB_WRITE_CMD</name>
		<subsystem>SBL</subsystem>
		<id>0x00</id>
		<description>
		</description>
		<type>BOOT</type>
		<request>
			<parameter>
				<data_type>uint32</data_type>
				<name>Length32</name>
				<auto_size>Payload</auto_size>
				<description>Payload length.</description>
			</parameter>
			<parameter>
				<data_type>uint8[]</data_type>
				<name>Payload</name>
				<description>Payload data.</description>
			</parameter>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 - SUCCESS 0x01 - FAILURE</description>
			</parameter>
		</response>
	</command>

	<command>
		<name>SB_HANDSHAKE_CMD</name>
		<subsystem>SBL</subsystem>
		<id>0x04</id>
		<description>
		</description>
		<type>BOOT</type>
		<request>
		</request>
		<response>
			<parameter>
				<data_type>ZstackResponseCode</data_type>
				<name>Status</name>
				<description>0x00 - SUCCESS 0x01 - FAILURE</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>BootloaderRevision</name>
				<description></description>
			</parameter>
			<parameter>
				<data_type>uint8</data_type>
				<name>DeviceType</name>
				<description></description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>BufferLength</name>
				<description>The maximum data size to use with Read / Write command</description>
			</parameter>
			<parameter>
				<data_type>uint32</data_type>
				<name>PageSize</name>
				<description>0x800 – CC2538 flash page size</description>
			</parameter>
		</response>
	</command>


	<!-- ENUMERATIONS -->
	<enum>
		<name>AfDataOptions</name>
		<data_type>uint8</data_type>
		<description>Options applied when sending frames</description>
		<subsystem>AF</subsystem>
		<values fully_defined="true">
			<value>
				<name>AF_ACK_REQUEST</name>
				<enum_value>0x10</enum_value>
				<description>Set this bit to request APS acknowledgement for this packet</description>
			</value>
			<value>
				<name>AF_DISCV_ROUTE</name>
				<enum_value>0x20</enum_value>
				<description>Set this bit to force route discovery if a routing table entry doesn’t exist</description>
			</value>
			<value>
				<name>AF_EN_SECURITY</name>
				<enum_value>0x40</enum_value>
				<description>Set this bit to enable APS security for this packet.</description>
			</value>
			<value>
				<name>AF_NO_ROUTING</name>
				<enum_value>0x80</enum_value>
				<description>Skip routing.</description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackConfigId</name>
		<data_type>uint8</data_type>
		<description>Device specific configuration parameters.</description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>ZCD_NV_EXTADDR</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_BOOTCOUNTER</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_STARTUP_OPTION</name>
				<enum_value>0x0003</enum_value>
				<description>This parameter controls the device startup options. Size: 1 byte; Default value: 0</description>
			</value>
			<value>
				<name>ZCD_NV_START_DELAY</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_POLL_RATE_OLD16</name>
				<enum_value>0x0035</enum_value>
				<description>If this parameter is set to a non-zero value, a CC2530-ZNP device that is configured as an end- device
					will wake up periodically with this duration to check for data with its parent device. This value is specified in
					milliseconds and can range from 1 to 65000.
					If this parameter is set to zero, the device will not automatically wake
					up to poll for data. Instead, an external
					trigger or an internal event (for example, via a software timer event) can
					be used to wake up the device.
					Size: 4 bytes; Default value: 2000
				</description>
			</value>
			<value>
				<name>ZCD_NV_QUEUED_POLL_RATE</name>
				<enum_value>0x0025</enum_value>
				<description>When an end-device polls for data with its parent and finds that it does have data, it can poll again
					with a shorter duration in case there is more data queued for it at its parent device. This value is specified in
					milliseconds. This feature can be turned off by setting this value to zero.
					Size: 2 bytes; Default value: 100
				</description>
			</value>
			<value>
				<name>ZCD_NV_RESPONSE_POLL_RATE</name>
				<enum_value>0x0026</enum_value>
				<description>When an end-device sends a data packet, it can poll again with a shorter duration, specified by this
					parameter, if the application is expecting to receive an application level packet in response. This value is
					specified in milliseconds. This feature can be turned off by setting the value to zero.
					Note: The setting of the
					queued and response poll rates has to be done with caution if the device is sending and
					receiving at the same time
					or if the device is sending data too fast.
					If the device is sending data too fast, setting a queued poll rate with a
					higher duration than the sending rate will
					cause the poll event to be continuously rescheduled to the future. Then
					the device will never poll for data with
					its parent and consequently it may miss any packets destined for it.
					Size: 2
					bytes; Default value: 100
				</description>
			</value>
			<value>
				<name>ZCD_NV_REJOIN_POLL_RATE</name>
				<enum_value>0x0027</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_DATA_RETRIES</name>
				<enum_value>0x0028</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_POLL_FAILURE_RETRIES</name>
				<enum_value>0x0029</enum_value>
				<description>The number of times an end-device will fail when communicating with its parent before invoking the
					rejoin mechanism to find and join a new parent.
					Size: 1 byte; Default value: 2.
				</description>
			</value>
			<value>
				<name>ZCD_NV_STACK_PROFILE</name>
				<enum_value>0x002A</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_INDIRECT_MSG_TIMEOUT</name>
				<enum_value>0x002B</enum_value>
				<description>The amount of time (in seconds) that a router or coordinator device will buffer messages destined to
					their end-device child nodes. It is recommended that this is at least greater than the poll rate (ZCD_NV_POLL_RATE)
					to ensure that end-device will have a chance to wakeup and poll for the data.
					Size: 1 byte; Default value: 7
				</description>
			</value>
			<value>
				<name>ZCD_NV_ROUTE_EXPIRY_TIME</name>
				<enum_value>0x002C</enum_value>
				<description>The amount of time (in seconds) for which a route must be idle (i.e. no packets are transmitted on that
					route) before that routing entry is marked as expired. An expired entry may be deleted if the table is full and the
					space is needed for another new routing entry.
					This can be set to a special value of 0 to turn off route expiry. In
					this case, route entries are not expired.
					Size: 1 byte; Default value: 60.
				</description>
			</value>
			<value>
				<name>ZCD_NV_EXTPANID</name>
				<enum_value>0x002D</enum_value>
				<description>This parameter configures the EXTENDED PAN ID in Z-Stack. The extended pan id is used to further
					segregate the sub network(s) among a bigger PAN network.
				</description>
			</value>
			<value>
				<name>ZCD_NV_BCAST_RETRIES</name>
				<enum_value>0x002E</enum_value>
				<description>The maximum number of retransmissions that a device will attempt when trying to transmit a broadcast
					packet. The typical range is from 1 through 3.
					Size: 1 byte; Default value: 2.
				</description>
			</value>
			<value>
				<name>ZCD_NV_PASSIVE_ACK_TIMEOUT</name>
				<enum_value>0x002F</enum_value>
				<description>The amount of time (in units of 100milliseconds) a device will wait before retransmitting a broadcast
					packet. The retransmission will not happen if the node hears that each of its neighbor nodes have all transmitted
					that packet.
					Size: 1 byte; Default value: 5
				</description>
			</value>
			<value>
				<name>ZCD_NV_BCAST_DELIVERY_TIME</name>
				<enum_value>0x0030</enum_value>
				<description>The maximum amount of time (in units of 100ms) that it can take for a broadcast packet to propagate
					through the entire network. This includes time for all retransmissions.
					Note: This parameter must be set with
					caution. It must be set to a value of at least
					(ZCD_NV_BCAST_RETRIES + 1) * ZCD_NV_PASSIVE_ACK_TIMEOUT
					To be safe,
					the actual value should be higher than the above minimum by about 500ms or more.
					Size: 1 byte; Default value: 30.
				</description>
			</value>
			<value>
				<name>ZCD_NV_NWK_MODE</name>
				<enum_value>0x0031</enum_value>
				<description>Holds the value of the network operational mode. The default value is NWK_MODE_MESH and must not be modified.</description>
			</value>
			<value>
				<name>ZCD_NV_CONCENTRATOR_ENABLE</name>
				<enum_value>0x0032</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_CONCENTRATOR_DISCOVERY</name>
				<enum_value>0x0033</enum_value>
				<description>
				</description>
			</value>
			<value>
				<name>ZCD_NV_CONCENTRATOR_RADIUS</name>
				<enum_value>0x0034</enum_value>
				<description>
				</description>
			</value>
			<value>
				<name>ZCD_NV_POLL_RATE</name>
				<enum_value>0x0035</enum_value>
				<description>If this parameter is set to a non-zero value, a CC2530-ZNP device that is configured as an end- device
					will wake up periodically with this duration to check for data with its parent device. This value is specified in
					milliseconds and can range from 1 to 65000.
					If this parameter is set to zero, the device will not automatically wake
					up to poll for data. Instead, an external
					trigger or an internal event (for example, via a software timer event) can
					be used to wake up the device.
					Size: 4 bytes; Default value: 2000
				</description>
			</value>
			<value>
				<name>ZCD_NV_CONCENTRATOR_RC</name>
				<enum_value>0x0036</enum_value>
				<description>Holds the value of route cache flag. This enables or disables the route cache for coordinator and is FALSE by default.
				</description>
			</value>
			<value>
				<name>ZCD_NV_NWK_MGR_MODE</name>
				<enum_value>0x0037</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SRC_RTG_EXPIRY_TIME</name>
				<enum_value>0x0038</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_ROUTE_DISCOVERY_TIME</name>
				<enum_value>0x0039</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_ACTIVE_KEY_INFO</name>
				<enum_value>0x003A</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_ALTERN_KEY_INFO</name>
				<enum_value>0x003B</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP</name>
				<enum_value>0x003C</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_LEAVE_REQ_ALLOWED</name>
				<enum_value>0x003D</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_CHILD_AGE_ENABLE</name>
				<enum_value>0x003E</enum_value>
				<description>Holds the value of Child Aging capability flag. This enables or disables child aging and must be set to TRUE for Zigbee 3.0 compliance.</description>
			</value>
			<value>
				<name>ZCD_NV_DEVICE_LIST_KA_TIMEOUT</name>
				<enum_value>0x003F</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_BINDING_TABLE</name>
				<enum_value>0x0041</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_GROUP_TABLE</name>
				<enum_value>0x0042</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_FRAME_RETRIES</name>
				<enum_value>0x0043</enum_value>
				<description>The number of retransmissions performed on a data packet at the application layer if the packet was
					transmitted with the end-to-end acknowledgement option enabled.
					Size: 1 byte; Default value: 3
				</description>
			</value>
			<value>
				<name>ZCD_NV_APS_ACK_WAIT_DURATION</name>
				<enum_value>0x0044</enum_value>
				<description>The amount of time (in milliseconds) a device will wait before re-transmitting a packet that used the
					APS acknowledgement option. If the APS acknowledgement is not received by this time, the sending device will assume
					a failure and attempt a re-transmission.
					Note: This is recommended to be set to approximately the expected round
					trip time for the packet. Note that if the
					destination (or source) device is an end-device, the round trip time for
					the packet will include an additional
					delay up to the poll duration. This is in addition to the delay normally
					caused by the network.
					Size: 2 bytes; Default value: 3000
				</description>
			</value>
			<value>
				<name>ZCD_NV_APS_ACK_WAIT_MULTIPLIER</name>
				<enum_value>0x0045</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_BINDING_TIME</name>
				<enum_value>0x0046</enum_value>
				<description>The amount of time (in milliseconds) a device will wait for a response to a binding request.
					Size: 2
					bytes; Default value: 8000
				</description>
			</value>
			<value>
				<name>ZCD_NV_APS_USE_EXT_PANID</name>
				<enum_value>0x0047</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_COMMISSIONED_NWK_ADDR</name>
				<enum_value>0x0049</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_NONMEMBER_RADIUS</name>
				<enum_value>0x004B</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_LINK_KEY_TABLE</name>
				<enum_value>0x004C</enum_value>
				<description>Holds the security manager entries of type ZDSecMgrEntry_t to store the TCKL used to talk with devices in the network that require APS security. The number of entries is controled by ZDSECMGR_DEVICE_MAX=3 by default.</description>
			</value>
			<value>
				<name>ZCD_NV_APS_DUPREJ_TIMEOUT_INC</name>
				<enum_value>0x004D</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT</name>
				<enum_value>0x004E</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_DUPREJ_TABLE_SIZE</name>
				<enum_value>0x004F</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_DIAGNOSTIC_STATS</name>
				<enum_value>0x0050</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_PARENT_INFO</name>
				<enum_value>0x0051</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF</name>
				<enum_value>0x0052</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_END_DEV_TIMEOUT_VALUE</name>
				<enum_value>0x0053</enum_value>
				<description>Holds the value of Child Aging Timeout. This is the time in seconds used by END DEVICE when sending End Device Timeout Request that tells a COORDINATOR the timeout to remove this END DEVICE after no data poll is received.</description>
			</value>
			<value>
				<name>ZCD_NV_END_DEV_CONFIGURATION</name>
				<enum_value>0x0054</enum_value>
				<description>Holds the value of End Device Configuration field when END DEVICE when sending End Device Timeout Request. Is set to 0x00 by default which is the only valid value accourding to Zigbee Core spec R21.</description>
			</value>
			<value>
				<name>ZCD_NV_BDBNODEISONANETWORK</name>
				<enum_value>0x0055</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_BDBREPORTINGCONFIG</name>
				<enum_value>0x0056</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_PRECFGKEY</name>
				<enum_value>0x0062</enum_value>
				<description>holds the value of network key that is generated by default. The key can be set to a fixed value by setting DEFAULT_KEY macro. This is used for securing and un-securing packets in the network, if security is enabled for the
					network.
					NOTE: Use of this configuration item requires the ZNP code to be built with the SECURE=1 compile option.
					Size: 16 bytes; Default value: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
					0x0E, 0x0F]
				</description>
			</value>
			<value>
				<name>ZCD_NV_PRECFGKEYS_ENABLE</name>
				<enum_value>0x0063</enum_value>
				<description>If security functionality is enabled, there are two options to distribute the security key to all
					devices in the network. If this parameter is true, the same security key is assumed to be pre-configured in all
					devices in the network.If it is set to false, then the key only needs to be configured on the coordinator device.
					In this case, the key is distributed to each device upon joining by the coordinator. This key distribution will
					happen in the “clear” on the last hop of the packet transmission and this constitutes a brief “period of
					vulnerability” during which a malicious device can capture the key. Hence it is not recommended unless it can be
					ensured that there are no malicious devices in the vicinity at the time of network formation.
					NOTE: Use of this
					configuration item requires the ZNP code to be built with the SECURE=1 compile option.
					Size: 1 byte; Default value:
					TRUE
				</description>
			</value>
			<value>
				<name>ZCD_NV_SECURITY_MODE</name>
				<enum_value>0x0064</enum_value>
				<description>This parameter determines if security is used or not in this network. It can be set to 0 (to turn off
					NWK security) or 1 (to turn on NWK security). Size: 1 byte; Default value: 0.
				</description>
			</value>
			<value>
				<name>ZCD_NV_SECURE_PERMIT_JOIN</name>
				<enum_value>0x0065</enum_value>
				<description>This value tells if only secure joins are allowed. Set to TRUE by default which is the only valid value according to Zigbee Core spec R21.</description>
			</value>
			<value>
				<name>ZCD_NV_APS_LINK_KEY_TYPE</name>
				<enum_value>0x0066</enum_value>
				<description>Is equal to ZG_GLOBAL_LINK_KEY=1 and must not be modified according to Zigbee Core spec R21.</description>
			</value>
			<value>
				<name>ZCD_NV_APS_ALLOW_R19_SECURITY</name>
				<enum_value>0x0067</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_DISTRIBUTED_KEY</name>
				<enum_value>0x0068</enum_value>
				<description>Default distributed nwk key Id. Nv ID not in use</description>
			</value>
			<value>
				<name>ZCD_NV_IMPLICIT_CERTIFICATE</name>
				<enum_value>0x0069</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_DEVICE_PRIVATE_KEY</name>
				<enum_value>0x006A</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_CA_PUBLIC_KEY</name>
				<enum_value>0x006B</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_KE_MAX_DEVICES</name>
				<enum_value>0x006C</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_USE_DEFAULT_TCLK</name>
				<enum_value>0x006D</enum_value>
				<description>Controls whether a single pre-configured trust center link key is used or whether multiple pre-
					configured trust center link keys are used, hereby referred to as Single Key Mode and Multiple Key Mode,
					respectively.
					In multiple key mode, unique pre-configured trust center link keys are used between the trust center
					and each individual device joining the network. Multiple key mode is required by the recommended secure procedure
					in ZigBeeSE profile Specification. In single key mode, all devices are using the same pre-configured trust center
					link key to join the network. The single key mode provides a simplified alternative procedure to set up the
					network.
					It can be used for testing and debugging purpose.
					Size: 1 byte; Default value: TRUE
				</description>
			</value>
			<value>
				<name>ZCD_NV_RNG_COUNTER</name>
				<enum_value>0x006F</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_RANDOM_SEED</name>
				<enum_value>0x0070</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_TRUSTCENTER_ADDR</name>
				<enum_value>0x0071</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_CERT_283</name>
				<enum_value>0x0072</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_PRIVATE_KEY_283</name>
				<enum_value>0x0073</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_PUBLIC_KEY_283</name>
				<enum_value>0x0074</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_SEC_MATERIAL_TABLE_START</name>
				<enum_value>0x0075</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWK_SEC_MATERIAL_TABLE_END</name>
				<enum_value>0x0080</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_USERDESC</name>
				<enum_value>0x0081</enum_value>
				<description>An optional user-defined data (up to 16bytes) that can be configured in a CC2530-ZNP device so that it
					can easily identified or described later. The first byte is the length of the user descriptor data and must not be
					greater than 16.
					Size: 17 bytes; Default value: “CC2530-ZNP x......” (dots represent the device IEEE address)
				</description>
			</value>
			<value>
				<name>ZCD_NV_NWKKEY</name>
				<enum_value>0x0082</enum_value>
				<description>This holds the value of nwkActiveKeyItems structure and restores the NWK key counter after power cycles.</description>
			</value>
			<value>
				<name>ZCD_NV_PANID</name>
				<enum_value>0x0083</enum_value>
				<description>This parameter identifies the ZigBee network. This should be set to a value between 0 and 0x3FFF.
					Networks that exist in the same vicinity must have different values for this parameter. It can be set to a special
					value of 0xFFFF to indicate “don’t care”.
					Size: 2 bytes; Default value: 0xFFFF
				</description>
			</value>
			<value>
				<name>ZCD_NV_CHANLIST</name>
				<enum_value>0x0084</enum_value>
				<description>This parameter is a bit mask of the channels on which this network can operate (note that multiple
					channels can be selected). See section 4.5.16 for a table of the bitmap representation that maps to each channel.
					Multiple networks that exist in the same vicinity are encouraged to have different values.
					If multiple channels are
					selected, the coordinator will pick one of the channels for network operation. First, an
					energy scan is performed on
					each channel and those channels with a high energy level are discarded. Then, the
					coordinator determines the number
					of existing ZigBee networks on each of the remaining channels and picks the one
					with the fewest networks. For
					routers and end-devices, the device will simply scan all the selected channels until
					it finds the ZigBee network.
					Size: 4 bytes; Default value: 0x00000800
				</description>
			</value>
			<value>
				<name>ZCD_NV_SCAN_DURATION</name>
				<enum_value>0x0086</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_LOGICAL_TYPE</name>
				<enum_value>0x0087</enum_value>
				<description>This is the logical type of the device in the ZigBee network. This can be set to a COORDINATOR
					(0x00),
					ROUTER (0x01) or ENDDEVICE (0x02).
					Note:
					This parameter is read by the CC2530-ZNP device immediately when it powers
					up after a reset.
					Size: 1 byte; Default value: 0x00
				</description>
			</value>
			<value>
				<name>ZCD_NV_NWKMGR_MIN_TX</name>
				<enum_value>0x0088</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_NWKMGR_ADDR</name>
				<enum_value>0x0089</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_ZDO_DIRECT_CB</name>
				<enum_value>0x008F</enum_value>
				<description>This configures the manner in which ZDO responses (hereby referred to as callbacks) are issued to the
					host processor. By default, this item is set to FALSE, which means that the host processor must use the
					ZDO_MSG_CB_REGISTER command to subscribe to a specific ZDO callback in order to receive it. The ZDO callback is
					then conveyed as part of the ZDO_MSG_CB_INCOMING command. If ZCD_NV_ZDO_DIRECT_CB is set TRUE, then the host
					processor will receive the “verbose” response. For example, the host processor would receive the ZDO_IEEE_ADDR_RSP
					command in response to ZDO_IEEE_ADDR_REQ.
					Size: 1 byte; Default value: FALSE
				</description>
			</value>
			<value>
				<name>ZCD_NV_SAS_SHORT_ADDR</name>
				<enum_value>0x00B1</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_EXT_PANID</name>
				<enum_value>0x00B2</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_PANID</name>
				<enum_value>0x00B3</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_CHANNEL_MASK</name>
				<enum_value>0x00B4</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_PROTOCOL_VER</name>
				<enum_value>0x00B5</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_STACK_PROFILE</name>
				<enum_value>0x00B6</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_STARTUP_CTRL</name>
				<enum_value>0x00B7</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_TC_ADDR</name>
				<enum_value>0x00C1</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_TC_MASTER_KEY</name>
				<enum_value>0x00C2</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_NWK_KEY</name>
				<enum_value>0x00C3</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_USE_INSEC_JOIN</name>
				<enum_value>0x00C4</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_PRECFG_LINK_KEY</name>
				<enum_value>0x00C5</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_NWK_KEY_SEQ_NUM</name>
				<enum_value>0x00C6</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_NWK_KEY_TYPE</name>
				<enum_value>0x00C7</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_NWK_MGR_ADDR</name>
				<enum_value>0x00C8</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_CURR_TC_MASTER_KEY</name>
				<enum_value>0x00D1</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_SAS_CURR_NWK_KEY</name>
				<enum_value>0x00D2</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_TCLK_TABLE_START</name>
				<enum_value>0x0101</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_TCLK_TABLE_END</name>
				<enum_value>0x01FF</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_LINK_KEY_DATA_START</name>
				<enum_value>0x0201</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZCD_NV_APS_LINK_KEY_DATA_END</name>
				<enum_value>0x02FF</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackDiagnosticAttribute</name>
		<data_type>uint16</data_type>
		<description>Diagnostics attribute IDs.</description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>ZDIAGS_SYSTEM_CLOCK</name>
				<enum_value>0x0000</enum_value>
				<description>System Clock when stats were saved/cleared</description>
			</value>
			<value>
				<name>ZDIAGS_NUMBER_OF_RESETS</name>
				<enum_value>0x0001</enum_value>
				<description>Increments every time the system resets</description>
			</value>
			<value>
				<name>ZDIAGS_MAC_RX_CRC_PASS</name>
				<enum_value>0x0064</enum_value>
				<description>MAC diagnostic CRC success counter</description>
			</value>
			<value>
				<name>ZDIAGS_MAC_RX_CRC_FAIL</name>
				<enum_value>0x0065</enum_value>
				<description>MAC diagnostic CRC failure counter</description>
			</value>
			<value>
				<name>ZDIAGS_MAC_TX_UCAST_RETRY</name>
				<enum_value>0x006A</enum_value>
				<description>MAC layer retries a unicast</description>
			</value>
			<value>
				<name>ZDIAGS_MAC_TX_UCAST_FAIL</name>
				<enum_value>0x006B</enum_value>
				<description>Mac layer fails to send a unicast</description>
			</value>
			<value>
				<name>ZDIAGS_NWK_DECRYPT_FAILURES</name>
				<enum_value>0x00CF</enum_value>
				<description>NWK packet decryption failed</description>
			</value>
			<value>
				<name>ZDIAGS_PACKET_VALIDATE_DROP_COUNT</name>
				<enum_value>0x00D3</enum_value>
				<description>NWK packet drop because of validation error</description>
			</value>
			<value>
				<name>ZDIAGS_APS_TX_BCAST</name>
				<enum_value>0x012D</enum_value>
				<description>APS layer transmits broadcast</description>
			</value>
			<value>
				<name>ZDIAGS_APS_TX_UCAST_SUCCESS</name>
				<enum_value>0x012F</enum_value>
				<description>APS layer successfully transmits a unicast</description>
			</value>
			<value>
				<name>ZDIAGS_APS_TX_UCAST_RETRY</name>
				<enum_value>0x0130</enum_value>
				<description>APS layer retries the sending of a unicast</description>
			</value>
			<value>
				<name>ZDIAGS_APS_TX_UCAST_FAIL</name>
				<enum_value>0x0131</enum_value>
				<description>APS layer fails to send a unicast</description>
			</value>
			<value>
				<name>ZDIAGS_APS_DECRYPT_FAILURES</name>
				<enum_value>0x0134</enum_value>
				<description>APS packet decryption failed</description>
			</value>
			<value>
				<name>ZDIAGS_APS_INVALID_PACKETS</name>
				<enum_value>0x0135</enum_value>
				<description>APS invalid packet dropped</description>
			</value>
			<value>
				<name>ZDIAGS_MAC_RETRIES_PER_APS_TX_SUCCESS</name>
				<enum_value>0x0136</enum_value>
				<description>Number of MAC retries per APS message</description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackZdoState</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>DEV_HOLD</name>
				<enum_value>0x0000</enum_value>
				<description>Initialized - not started automatically</description>
			</value>
			<value>
				<name>DEV_INIT</name>
				<enum_value>0x0001</enum_value>
				<description>Initialized - not connected to anything</description>
			</value>
			<value>
				<name>DEV_NWK_DISC</name>
				<enum_value>0x0002</enum_value>
				<description>Discovering PAN's to join</description>
			</value>
			<value>
				<name>DEV_NWK_JOINING</name>
				<enum_value>0x0003</enum_value>
				<description>Joining a PAN</description>
			</value>
			<value>
				<name>DEV_NWK_REJOIN</name>
				<enum_value>0x0004</enum_value>
				<description>ReJoining a PAN, only for end devices</description>
			</value>
			<value>
				<name>DEV_END_DEVICE_UNAUTH</name>
				<enum_value>0x0005</enum_value>
				<description>Joined but not yet authenticated by trust center</description>
			</value>
			<value>
				<name>DEV_END_DEVICE</name>
				<enum_value>0x0006</enum_value>
				<description>Started as device after authentication</description>
			</value>
			<value>
				<name>DEV_ROUTER</name>
				<enum_value>0x0007</enum_value>
				<description>Device joined, authenticated and is a router</description>
			</value>
			<value>
				<name>DEV_COORD_STARTING</name>
				<enum_value>0x0008</enum_value>
				<description>Starting as Zigbee Coordinator</description>
			</value>
			<value>
				<name>DEV_ZB_COORD</name>
				<enum_value>0x0009</enum_value>
				<description>Started as Zigbee Coordinator</description>
			</value>
			<value>
				<name>DEV_NWK_ORPHAN</name>
				<enum_value>0x0000A</enum_value>
				<description>Device has lost information about its parent</description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackSystemCapabilities</name>
		<data_type>uint16</data_type>
		<description>Subsystem capabilities bitmap</description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>MT_CAP_SYS</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_MAC</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_NWK</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_AF</name>
				<enum_value>0x0008</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_ZDO</name>
				<enum_value>0x0010</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_SAPI</name>
				<enum_value>0x0020</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_UTIL</name>
				<enum_value>0x0040</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_DEBUG</name>
				<enum_value>0x0080</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_APP</name>
				<enum_value>0x0100</enum_value>
				<description></description>
			</value>
			<value>
				<name>MT_CAP_ZOAD</name>
				<enum_value>0x1000</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackDeviceInformation</name>
		<data_type>uint16</data_type>
		<description>Device Info Constants</description>
		<subsystem>SAPI</subsystem>
		<values>
			<value>
				<name>ZB_INFO_DEV_STATE</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_IEEE_ADDR</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_SHORT_ADDR</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_PARENT_SHORT_ADDR</name>
				<enum_value>0x0003</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_PARENT_IEEE_ADDR</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_CHANNEL</name>
				<enum_value>0x0005</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_PAN_ID</name>
				<enum_value>0x0006</enum_value>
				<description></description>
			</value>
			<value>
				<name>ZB_INFO_EXT_PAN_ID</name>
				<enum_value>0x0007</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackResetType</name>
		<data_type>uint8</data_type>
		<description>Reset Command Type</description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>target device</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>serial bootloader</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackResetReason</name>
		<data_type>uint8</data_type>
		<description>Reasons for reset</description>
		<subsystem>SYS</subsystem>
		<values>
			<value>
				<name>Power-up</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>External</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>Watch-dog</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackSreqErrorCode</name>
		<data_type>uint8</data_type>
		<description>SREQ RPC Error code</description>
		<subsystem>RPC</subsystem>
		<values>
			<value>
				<name>Invalid subsystem</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>Invalid command ID</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>Invalid parameter</name>
				<enum_value>0x0003</enum_value>
				<description></description>
			</value>
			<value>
				<name>Invalid length</name>
				<enum_value>0x0003</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackResponseCode</name>
		<data_type>uint8</data_type>
		<description>Global response codes</description>
		<subsystem></subsystem>
		<values>
			<value>
				<name>Success</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>Failure</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>AF_INVALID_PARAMETER</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>AF_MEM_FAIL</name>
				<enum_value>0x0010</enum_value>
				<description>Security manager key table full</description>
			</value>
			<value>
				<name>Key table full</name>
				<enum_value>0x0011</enum_value>
				<description>Security manager key table full</description>
			</value>
			<value>
				<name>MAC_NO_RESOURCES</name>
				<enum_value>0x001A</enum_value>
				<description>The operation could not be completed because no memory resources were available</description>
			</value>
			<value>
				<name>Invalid Request</name>
				<enum_value>0x00C2</enum_value>
				<description>Invalid Request</description>
			</value>
			<value>
				<name>Not Permitted</name>
				<enum_value>0x00C3</enum_value>
				<description>Not Permitted</description>
			</value>
			<value>
				<name>Unknown Device</name>
				<enum_value>0x00C8</enum_value>
				<description>Unknown Device</description>
			</value>
			<value>
				<name>AF_NO_ROUTE</name>
				<enum_value>0x00CD</enum_value>
				<description></description>
			</value>
			<value>
				<name>MAC_SCAN_IN_PROGRESS</name>
				<enum_value>0x00FC</enum_value>
				<description>The scan request failed because a scan is already in progress</description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackCentralizedLinkKeyMode</name>
		<data_type>uint8</data_type>
		<description>Central link key policies</description>
		<subsystem>APP_CNF</subsystem>
		<values>
			<value>
				<name>Default Global Key</name>
				<enum_value>0x0000</enum_value>
				<description>Instruct joining node to use Default Global Trust Center link key. No key buffer required</description>
			</value>
			<value>
				<name>Provided Install Code</name>
				<enum_value>0x0001</enum_value>
				<description>Instruct the joining node to use the provided install code (16 bytes + 2 CRC bytes) to derive APS Link
					key to be used during joining
				</description>
			</value>
			<value>
				<name>Provided Install Code then default global key</name>
				<enum_value>0x0002</enum_value>
				<description>Instruct the joining node to use the provided install code (16 bytes + 2 CRC bytes) to derive APS Link
					key to be used during joining. If it fails to decrypt Transport Key, it will automatically try Default Global Trust
					Center Link Key
				</description>
			</value>
			<value>
				<name>Provided APS Key</name>
				<enum_value>0x0003</enum_value>
				<description>Instruct the joining node to use the provided APS Link key to be used during joining (key size is 16
					bytes)
				</description>
			</value>
			<value>
				<name>Provided APS Code then default global key</name>
				<enum_value>0x0004</enum_value>
				<description>Instruct the joining node to use the provided APS Link key to be used during joining (key size is 16
					bytes). If it fails to decrypt Transport Key, it will automatically try Default Global Trust Center Link Key
				</description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackBdbStatus</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>APP_CNF</subsystem>
		<values fully_defined="true">
			<value>
				<name>BDB_COMMISSIONING_SUCCESS</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_IN_PROGRESS</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_NO_NETWORK</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TL_TARGET_FAILURE</name>
				<enum_value>0x0003</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TL_NOT_AA_CAPABLE</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TL_NO_SCAN_RESPONSE</name>
				<enum_value>0x0005</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TL_NOT_PERMITTED</name>
				<enum_value>0x0006</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TCLK_EX_FAILURE</name>
				<enum_value>0x0007</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FORMATION_FAILURE</name>
				<enum_value>0x0008</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS</name>
				<enum_value>0x0009</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FB_INITIATOR_IN_PROGRESS</name>
				<enum_value>0x000A</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE</name>
				<enum_value>0x000B</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FB_BINDING_TABLE_FULL</name>
				<enum_value>0x000C</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_NETWORK_RESTORED</name>
				<enum_value>0x000D</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FAILURE</name>
				<enum_value>0x000E</enum_value>
				<description></description>
			</value>
		</values>
	</enum>
	
	<enum>
		<name>ZstackBdbCommissioningMode</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>APP_CNF</subsystem>
		<values fully_defined="true">
			<value>
				<name>BDB_COMMISSIONING_INITIALIZATION</name>
				<enum_value>0x0000</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_NWK_STEERING</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FORMATION</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_FINDING_BINDING</name>
				<enum_value>0x0003</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_TOUCHLINK</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_PARENT_LOST</name>
				<enum_value>0x0005</enum_value>
				<description></description>
			</value>
		</values>
	</enum>
	
	<enum>
		<name>ZstackBdbRemainingCommissioningModes</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>APP_CNF</subsystem>
		<values fully_defined="true">
			<value>
				<name>BDB_COMMISSIONING_MODE_INITIATOR_TL</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_MODE_NWK_STEERING</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_MODE_NWK_FORMATION</name>
				<enum_value>0x0004</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_MODE_FINDING_BINDING</name>
				<enum_value>0x0008</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_MODE_INITIALIZATION</name>
				<enum_value>0x0010</enum_value>
				<description></description>
			</value>
			<value>
				<name>BDB_COMMISSIONING_MODE_PARENT_LOST</name>
				<enum_value>0x0020</enum_value>
				<description></description>
			</value>
		</values>
	</enum>
	
	<enum>
		<name>ZstackInstallCodeFormat</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>APP_CNF</subsystem>
		<values fully_defined="true">
			<value>
				<name>INSTALL_CODE</name>
				<enum_value>0x0001</enum_value>
				<description></description>
			</value>
			<value>
				<name>DERIVED_KEY</name>
				<enum_value>0x0002</enum_value>
				<description></description>
			</value>
		</values>
	</enum>

	<enum>
		<name>ZstackAuthenticationOption</name>
		<data_type>uint8</data_type>
		<description></description>
		<subsystem>APP_CNF</subsystem>
		<values fully_defined="true">
			<value>
				<name>Not_Authenticated</name>
				<enum_value>0x0000</enum_value>
				<description>The device has not been authenticated</description>
			</value>
			<value>
				<name>Authenticated_CBCK</name>
				<enum_value>0x0001</enum_value>
				<description>The device has been authenticated using CBKE</description>
			</value>
			<value>
				<name>Authenticated_EA</name>
				<enum_value>0x0002</enum_value>
				<description>The device has been authenticated using EA</description>
			</value>
		</values>
	</enum>
	
	<structure>
		<name>ZstackNwkKeyDesc</name>
		<subsystem>SYS</subsystem>
		<description></description>
		<parameters>
			<parameter>
				<data_type>uint8</data_type>
				<name>keySeqNum</name>
				<description></description>
			</parameter>
			<parameter>
				<data_type>ZigBeeKey</data_type>
				<name>key</name>
				<description></description>
			</parameter>
		</parameters>
	</structure>

	<structure>
		<name>ZstackSecMgrEntry</name>
		<subsystem>SYS</subsystem>
		<description></description>
		<parameters>
			<parameter>
				<data_type>uint16</data_type>
				<name>ami</name>
				<description>Address manager index that holds the IEEE address of destination device. INVALID_NODE_ADDR = 0xFFFE</description>
			</parameter>
			<parameter>
				<data_type>uint16</data_type>
				<name>keyNvId</name>
				<description>Index to the Link Key table in NV</description>
			</parameter>
			<parameter>
				<data_type>ZstackAuthenticationOption</data_type>
				<name>authenticateOption</name>
				<description></description>
			</parameter>
		</parameters>
	</structure>

</protocol>
