/**
 * Copyright (c) 2016-2018 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.internal.ash;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

public class AshFrameTest {

    @Test
    public void TestPacket_DataStuffed() {
        int[] buffer = new int[] { 0x7d, 0x3a, 0x43, 0xa1, 0xfa, 0x54, 0x0a, 0x15, 0xc9, 0x89 };

        final AshFrame packet = AshFrame.createFromInput(buffer);
        assertNotNull(packet);
        assertTrue(packet instanceof AshFrameData);

        AshFrameData dataPacket = (AshFrameData) packet;
        assertEquals(1, dataPacket.getFrmNum());
        assertEquals(2, dataPacket.getAckNum());
        assertEquals(true, dataPacket.getReTx());
    }

    @Test
    public void testLoopback() {
        AshFrame outFrame = new AshFrameData(new int[] { 0x18, 0x00, 0xFF, 0x00, 0x34, 0x00, 0x87, 0x36, 0x00, 0x00,
                0x21, 0x00, 0x00, 0x00, 0x40, 0x11, 0x00, 0x00, 0x18, 0x18, 0x16, 0x00, 0xA5, 0xFE, 0x09, 0x01, 0x00,
                0x5B, 0xFD, 0x24, 0x01, 0x0F, 0x00, 0x03, 0x90, 0x9D, 0x38, 0xFE, 0xFF, 0x57, 0x0B, 0x00, 0x01 });

        outFrame.setFrmNum(5);
        outFrame.setAckNum(0);
        int[] outBuffer = outFrame.getOutputBuffer();

        // Remove the end flag
        outBuffer = Arrays.copyOfRange(outBuffer, 0, outBuffer.length - 1);

        AshFrame inFrame = AshFrame.createFromInput(outBuffer);

        assertEquals(5, inFrame.getFrmNum());
        assertEquals(0, inFrame.getAckNum());
    }

    @Test
    public void testLoopbackLong() {
        int[] inputBuffer = new int[] { 0x22, 0x63, 0x00, 0xFF, 0x00, 0xED, 0x02, 0x07, 0xA4, 0x45, 0x02, 0x2D, 0x9F,
                0x39, 0xF4, 0x9B, 0xDC, 0x38, 0x38, 0x00, 0x26, 0xA2, 0x7A, 0x9E, 0x0A, 0x17, 0x99, 0x31, 0x3A, 0xB2,
                0x8C, 0x5C, 0x1A, 0x1C, 0x6B, 0x60, 0x51, 0x54, 0xDB, 0x1D, 0xFF, 0x67, 0x52, 0x00, 0x61, 0x7A, 0x40,
                0xDA, 0x06, 0xD0, 0x93, 0x43, 0x0D, 0x08, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x00, 0x5B,
                0x80, 0x3B, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x22, 0xA3, 0x00, 0x00, 0x17, 0x32, 0xBF, 0x08, 0x03,
                0x04, 0xDA, 0x0E, 0xEB, 0x90, 0xD5, 0x70, 0x64, 0x9A, 0x09, 0x14, 0xA9, 0x6B, 0xC8, 0x17, 0xFB, 0x12,
                0xFA, 0x6B, 0xAC, 0x48, 0x99, 0x19, 0x51, 0x3F, 0x6E, 0x44, 0x0E, 0x01, 0x0F, 0x95, 0x2B, 0x6E, 0xAA,
                0xD2, 0xC0, 0x00, 0x81, 0x61, 0x1A, 0x00, 0x8B, 0xC5, 0x21, 0x8F, 0xA2, 0x32, 0x22, 0xA2, 0x81, 0x7D,
                0xAE, 0x39, 0xD8, 0x81, 0x28, 0xC0, 0x29, 0x44, 0x06, 0x36, 0x17, 0x54, 0xFF, 0x94, 0x7A, 0x50, 0x67,
                0x85, 0xA1, 0x8C, 0x7B, 0x00, 0x00 };
        AshFrame outFrame = new AshFrameData(inputBuffer);

        int[] outBuffer = outFrame.getOutputBuffer();

        // Remove the end flag
        outBuffer = Arrays.copyOfRange(outBuffer, 0, outBuffer.length - 1);

        AshFrame inFrame = AshFrame.createFromInput(outBuffer);

        assertEquals(2, inFrame.getFrmNum());
        assertEquals(2, inFrame.getAckNum());
        assertTrue(Arrays.equals(Arrays.copyOfRange(inputBuffer, 1, inputBuffer.length - 2),
                ((AshFrameData) outFrame).getDataBuffer()));
        assertTrue(Arrays.equals(((AshFrameData) outFrame).getDataBuffer(), ((AshFrameData) inFrame).getDataBuffer()));
    }

    @Test
    public void testIncomingLong() {
        int[] buffer = new int[] { 0x21, 0x31, 0x21, 0x57, 0x54, 0xC7, 0x17, 0xB5, 0xFD, 0xD1, 0x48, 0x08, 0x35, 0x6C,
                0x66, 0xD2, 0x40, 0x76, 0x1F, 0xAB, 0xCB, 0x6C, 0x1D, 0x15, 0xF7, 0xD1, 0xFA, 0xB8, 0xC6, 0xCC, 0xB3,
                0xFB, 0xF1, 0xD1, 0xB5, 0x0F, 0xDE, 0xAB, 0x1C, 0xC6, 0x2A, 0xB5, 0x3B, 0x8C, 0x72, 0x86, 0x4A, 0x92,
                0x71, 0x58, 0x3D, 0x5D, 0x78, 0x8A, 0x50, 0x8A, 0x5F, 0x32, 0x06, 0xA7, 0xF7, 0x68, 0x38, 0x47, 0xA4,
                0x63, 0xCD, 0x7D, 0x3A, 0x35, 0x9A, 0x75, 0x45, 0xB8, 0xEE, 0x9E, 0x4F, 0x88, 0xC5, 0x7C, 0xD1, 0xD7,
                0x6C, 0x96, 0x0D, 0x96, 0xE9, 0x09, 0x4F, 0xCB, 0x51, 0x69, 0x07, 0x3D, 0xE3, 0xE7, 0x85, 0x33, 0xC8,
                0xE4, 0x72, 0xAE, 0x1E, 0xF1, 0x53, 0x28, 0x15, 0x66, 0x3D, 0x16, 0x3C, 0x17, 0x73, 0x09, 0xF6, 0x53,
                0x1E, 0xB6, 0x80, 0x15, 0x63, 0xF1, 0x34, 0xED, 0xE0, 0x3C, 0xC8, 0x87, 0xCF, 0xAC, 0x35, 0x90, 0x03,
                0x97, 0x76, 0xDA, 0x26, 0x3E, 0x71, 0x4D, 0xD6, 0xE0, 0x6C, 0x50, 0xC2, 0x40, 0x1E, 0x6A, 0xBE, 0x4A,
                0x75, 0x8F, 0x78, 0x60, 0x1E, 0x69 };

        AshFrame frame = AshFrame.createFromInput(buffer);

        assertEquals(1, frame.ackNum);
        assertEquals(2, frame.frmNum);
        assertEquals(152, frame.dataBuffer.length);
    }
}
