/**
 * Copyright (c) 2016-2023 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameRequest;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember EZSP command <b>setAddressTableRemoteNodeId</b>.
 * <p>
 * Sets the short ID of an address table entry. Usually the application will not need to set the
 * short ID in the address table. Once the remote EUI64 is set the stack is capable of figuring out
 * the short ID on its own. However, in cases where the application does set the short ID, the
 * application must set the remote EUI64 prior to setting the short ID.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspSetAddressTableRemoteNodeIdRequest extends EzspFrameRequest {
    public static final int FRAME_ID = 0x5D;

    /**
     * The index of an address table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     */
    private int addressTableIndex;

    /**
     * The short ID corresponding to the remote node whose EUI64 is stored in the address table at the
     * given index or EMBER_TABLE_ENTRY_UNUSED_NODE_ID which indicates that the entry stored in
     * the address table at the given index is not in use.
     * <p>
     * EZSP type is <i>EmberNodeId</i> - Java type is {@link int}
     */
    private int nodeId;

    /**
     * Serialiser used to serialise to binary line data
     */
    private EzspSerializer serializer;

    /**
     * Request constructor
     */
    public EzspSetAddressTableRemoteNodeIdRequest() {
        frameId = FRAME_ID;
        serializer = new EzspSerializer();
    }

    /**
     * The index of an address table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     *
     * @return the current addressTableIndex as {@link int}
     */
    public int getAddressTableIndex() {
        return addressTableIndex;
    }

    /**
     * The index of an address table entry.
     *
     * @param addressTableIndex the addressTableIndex to set as {@link int}
     */
    public void setAddressTableIndex(int addressTableIndex) {
        this.addressTableIndex = addressTableIndex;
    }

    /**
     * The short ID corresponding to the remote node whose EUI64 is stored in the address table at the
     * given index or EMBER_TABLE_ENTRY_UNUSED_NODE_ID which indicates that the entry stored in
     * the address table at the given index is not in use.
     * <p>
     * EZSP type is <i>EmberNodeId</i> - Java type is {@link int}
     *
     * @return the current nodeId as {@link int}
     */
    public int getNodeId() {
        return nodeId;
    }

    /**
     * The short ID corresponding to the remote node whose EUI64 is stored in the address table at the
     * given index or EMBER_TABLE_ENTRY_UNUSED_NODE_ID which indicates that the entry stored in
     * the address table at the given index is not in use.
     *
     * @param nodeId the nodeId to set as {@link int}
     */
    public void setNodeId(int nodeId) {
        this.nodeId = nodeId;
    }

    @Override
    public int[] serialize(int ezspVersion) {
        // Serialize the header
        serializeHeader(ezspVersion, serializer);

        // Serialize the fields
        serializer.serializeUInt8(addressTableIndex);
        serializer.serializeUInt16(nodeId);
        return serializer.getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(116);
        builder.append("EzspSetAddressTableRemoteNodeIdRequest [networkId=");
        builder.append(networkId);
        builder.append(", addressTableIndex=");
        builder.append(addressTableIndex);
        builder.append(", nodeId=");
        builder.append(String.format("%04X", nodeId));
        builder.append(']');
        return builder.toString();
    }
}
