/**
 * Copyright (c) 2016-2023 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameRequest;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.structure.EzspExtendedValueId;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember EZSP command <b>getExtendedValue</b>.
 * <p>
 * Reads a value from the NCP but passes an extra argument specific to the value being retrieved.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspGetExtendedValueRequest extends EzspFrameRequest {
    public static final int FRAME_ID = 0x03;

    /**
     * Identifies which extended value ID to read.
     * <p>
     * EZSP type is <i>EzspExtendedValueId</i> - Java type is {@link EzspExtendedValueId}
     */
    private EzspExtendedValueId valueId;

    /**
     * Identifies which characteristics of the extended value ID to read. These are specific to the
     * value being read.
     * <p>
     * EZSP type is <i>uint32_t</i> - Java type is {@link int}
     */
    private int characteristics;

    /**
     * Serialiser used to serialise to binary line data
     */
    private EzspSerializer serializer;

    /**
     * Request constructor
     */
    public EzspGetExtendedValueRequest() {
        frameId = FRAME_ID;
        serializer = new EzspSerializer();
    }

    /**
     * Identifies which extended value ID to read.
     * <p>
     * EZSP type is <i>EzspExtendedValueId</i> - Java type is {@link EzspExtendedValueId}
     *
     * @return the current valueId as {@link EzspExtendedValueId}
     */
    public EzspExtendedValueId getValueId() {
        return valueId;
    }

    /**
     * Identifies which extended value ID to read.
     *
     * @param valueId the valueId to set as {@link EzspExtendedValueId}
     */
    public void setValueId(EzspExtendedValueId valueId) {
        this.valueId = valueId;
    }

    /**
     * Identifies which characteristics of the extended value ID to read. These are specific to the
     * value being read.
     * <p>
     * EZSP type is <i>uint32_t</i> - Java type is {@link int}
     *
     * @return the current characteristics as {@link int}
     */
    public int getCharacteristics() {
        return characteristics;
    }

    /**
     * Identifies which characteristics of the extended value ID to read. These are specific to the
     * value being read.
     *
     * @param characteristics the characteristics to set as {@link int}
     */
    public void setCharacteristics(int characteristics) {
        this.characteristics = characteristics;
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(serializer);

        // Serialize the fields
        serializer.serializeEzspExtendedValueId(valueId);
        serializer.serializeUInt32(characteristics);
        return serializer.getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(105);
        builder.append("EzspGetExtendedValueRequest [networkId=");
        builder.append(networkId);
        builder.append(", valueId=");
        builder.append(valueId);
        builder.append(", characteristics=");
        builder.append(characteristics);
        builder.append(']');
        return builder.toString();
    }
}
