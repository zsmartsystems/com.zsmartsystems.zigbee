/**
 * Copyright (c) 2014-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.structure;

import java.util.HashMap;
import java.util.Map;

/**
 * Class to implement the Ember Enumeration <b>EzspDecisionId</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public enum EzspDecisionId {
    /**
     * Default unknown value
     */
    UNKNOWN(-1),

    /**
     * Send the network key in the clear to all joining and rejoining devices.
     */
    EZSP_ALLOW_JOINS(0),

    /**
     * Send the network key in the clear to all joining devices. Rejoining devices are sent the
     * network key encrypted with their trust center link key. The trust center and any rejoining
     * device are assumed to share a link key, either preconfigured or obtained under a previous
     * policy.
     */
    EZSP_ALLOW_JOINS_REJOINS_HAVE_LINK_KEY(4);

    /**
     * A mapping between the integer code and its corresponding type to
     * facilitate lookup by code.
     */
    private static Map<Integer, EzspDecisionId> codeMapping;

    private int key;

    private EzspDecisionId(int key) {
        this.key = key;
    }

    private static void initMapping() {
        codeMapping = new HashMap<Integer, EzspDecisionId>();
        for (EzspDecisionId s : values()) {
            codeMapping.put(s.key, s);
        }
    }

    /**
     * Lookup function based on the EmberStatus type code. Returns null if the
     * code does not exist.
     *
     * @param i
     *            the code to lookup
     * @return enumeration value of the alarm type.
     */
    public static EzspDecisionId getEzspDecisionId(int i) {
        if (codeMapping == null) {
            initMapping();
        }

        if (codeMapping.get(i) == null) {
            return UNKNOWN;
        }

        return codeMapping.get(i);
    }

    /**
     * Returns the EZSP protocol defined value for this enum
     *
     * @return the EZSP protocol key
     */
    public int getKey() {
        return key;
    }
}
