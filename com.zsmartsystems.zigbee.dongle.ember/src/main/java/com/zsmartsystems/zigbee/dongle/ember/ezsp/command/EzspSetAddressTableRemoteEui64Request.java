/**
 * Copyright (c) 2016-2022 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.IeeeAddress;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameRequest;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember EZSP command <b>setAddressTableRemoteEui64</b>.
 * <p>
 * Sets the EUI64 of an address table entry. This function will also check other address table
 * entries, the child table and the neighbor table to see if the node ID for the given EUI64 is
 * already known. If known then this function will also set node ID. If not known it will set the
 * node ID to EMBER_UNKNOWN_NODE_ID.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspSetAddressTableRemoteEui64Request extends EzspFrameRequest {
    public static final int FRAME_ID = 0x5C;

    /**
     * The index of an address table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     */
    private int addressTableIndex;

    /**
     * The EUI64 to use for the address table entry.
     * <p>
     * EZSP type is <i>EmberEUI64</i> - Java type is {@link IeeeAddress}
     */
    private IeeeAddress eui64;

    /**
     * Serialiser used to serialise to binary line data
     */
    private EzspSerializer serializer;

    /**
     * Request constructor
     */
    public EzspSetAddressTableRemoteEui64Request() {
        frameId = FRAME_ID;
        serializer = new EzspSerializer();
    }

    /**
     * The index of an address table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     *
     * @return the current addressTableIndex as {@link int}
     */
    public int getAddressTableIndex() {
        return addressTableIndex;
    }

    /**
     * The index of an address table entry.
     *
     * @param addressTableIndex the addressTableIndex to set as {@link int}
     */
    public void setAddressTableIndex(int addressTableIndex) {
        this.addressTableIndex = addressTableIndex;
    }

    /**
     * The EUI64 to use for the address table entry.
     * <p>
     * EZSP type is <i>EmberEUI64</i> - Java type is {@link IeeeAddress}
     *
     * @return the current eui64 as {@link IeeeAddress}
     */
    public IeeeAddress getEui64() {
        return eui64;
    }

    /**
     * The EUI64 to use for the address table entry.
     *
     * @param eui64 the eui64 to set as {@link IeeeAddress}
     */
    public void setEui64(IeeeAddress eui64) {
        this.eui64 = eui64;
    }

    @Override
    public int[] serialize(int ezspVersion) {
        // Serialize the header
        serializeHeader(ezspVersion, serializer);

        // Serialize the fields
        serializer.serializeUInt8(addressTableIndex);
        serializer.serializeEmberEui64(eui64);
        return serializer.getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(115);
        builder.append("EzspSetAddressTableRemoteEui64Request [networkId=");
        builder.append(networkId);
        builder.append(", addressTableIndex=");
        builder.append(addressTableIndex);
        builder.append(", eui64=");
        builder.append(eui64);
        builder.append(']');
        return builder.toString();
    }
}
