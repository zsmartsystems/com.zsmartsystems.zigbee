/**
 * Copyright (c) 2016-2024 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameRequest;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember EZSP command <b>tokenFactoryReset</b>.
 * <p>
 * Factory reset all configured Zigbee tokens.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspTokenFactoryResetRequest extends EzspFrameRequest {
    public static final int FRAME_ID = 0x77;

    /**
     * Exclude network and APS outgoing frame counter tokens.
     * <p>
     * EZSP type is <i>bool</i> - Java type is {@link boolean}
     */
    private boolean excludeOutgoingFC;

    /**
     * Exclude stack boot counter token.
     * <p>
     * EZSP type is <i>bool</i> - Java type is {@link boolean}
     */
    private boolean excludeBootCounter;

    /**
     * Serialiser used to serialise to binary line data
     */
    private EzspSerializer serializer;

    /**
     * Request constructor
     */
    public EzspTokenFactoryResetRequest() {
        frameId = FRAME_ID;
        serializer = new EzspSerializer();
    }

    /**
     * Exclude network and APS outgoing frame counter tokens.
     * <p>
     * EZSP type is <i>bool</i> - Java type is {@link boolean}
     *
     * @return the current excludeOutgoingFC as {@link boolean}
     */
    public boolean getExcludeOutgoingFC() {
        return excludeOutgoingFC;
    }

    /**
     * Exclude network and APS outgoing frame counter tokens.
     *
     * @param excludeOutgoingFC the excludeOutgoingFC to set as {@link boolean}
     */
    public void setExcludeOutgoingFC(boolean excludeOutgoingFC) {
        this.excludeOutgoingFC = excludeOutgoingFC;
    }

    /**
     * Exclude stack boot counter token.
     * <p>
     * EZSP type is <i>bool</i> - Java type is {@link boolean}
     *
     * @return the current excludeBootCounter as {@link boolean}
     */
    public boolean getExcludeBootCounter() {
        return excludeBootCounter;
    }

    /**
     * Exclude stack boot counter token.
     *
     * @param excludeBootCounter the excludeBootCounter to set as {@link boolean}
     */
    public void setExcludeBootCounter(boolean excludeBootCounter) {
        this.excludeBootCounter = excludeBootCounter;
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(serializer);

        // Serialize the fields
        serializer.serializeBool(excludeOutgoingFC);
        serializer.serializeBool(excludeBootCounter);
        return serializer.getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(106);
        builder.append("EzspTokenFactoryResetRequest [networkId=");
        builder.append(networkId);
        builder.append(", excludeOutgoingFC=");
        builder.append(excludeOutgoingFC);
        builder.append(", excludeBootCounter=");
        builder.append(excludeBootCounter);
        builder.append(']');
        return builder.toString();
    }
}
