/**
 * Copyright (c) 2016-2022 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameResponse;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.structure.EmberStatus;

/**
 * Class to implement the Ember EZSP command <b>getSourceRouteTableEntry</b>.
 * <p>
 * Returns information about a source route table entry.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspGetSourceRouteTableEntryResponse extends EzspFrameResponse {
    public static final int FRAME_ID = 0xC1;

    /**
     * EMBER_SUCCESS if there is source route entry at index. EMBER_SOURCE_ROUTE_FAILURE if
     * there is no source route at index.
     * <p>
     * EZSP type is <i>EmberStatus</i> - Java type is {@link EmberStatus}
     */
    private EmberStatus status;

    /**
     * The node ID of the destination in that entry.
     * <p>
     * EZSP type is <i>EmberNodeId</i> - Java type is {@link int}
     */
    private int destination;

    /**
     * The closer node index for this source route table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     */
    private int closerIndex;

    /**
     * Response and Handler constructor
     */
    public EzspGetSourceRouteTableEntryResponse(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        status = deserializer.deserializeEmberStatus();
        destination = deserializer.deserializeUInt16();
        closerIndex = deserializer.deserializeUInt8();
    }

    /**
     * EMBER_SUCCESS if there is source route entry at index. EMBER_SOURCE_ROUTE_FAILURE if
     * there is no source route at index.
     * <p>
     * EZSP type is <i>EmberStatus</i> - Java type is {@link EmberStatus}
     *
     * @return the current status as {@link EmberStatus}
     */
    public EmberStatus getStatus() {
        return status;
    }

    /**
     * EMBER_SUCCESS if there is source route entry at index. EMBER_SOURCE_ROUTE_FAILURE if
     * there is no source route at index.
     *
     * @param status the status to set as {@link EmberStatus}
     */
    public void setStatus(EmberStatus status) {
        this.status = status;
    }

    /**
     * The node ID of the destination in that entry.
     * <p>
     * EZSP type is <i>EmberNodeId</i> - Java type is {@link int}
     *
     * @return the current destination as {@link int}
     */
    public int getDestination() {
        return destination;
    }

    /**
     * The node ID of the destination in that entry.
     *
     * @param destination the destination to set as {@link int}
     */
    public void setDestination(int destination) {
        this.destination = destination;
    }

    /**
     * The closer node index for this source route table entry.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     *
     * @return the current closerIndex as {@link int}
     */
    public int getCloserIndex() {
        return closerIndex;
    }

    /**
     * The closer node index for this source route table entry.
     *
     * @param closerIndex the closerIndex to set as {@link int}
     */
    public void setCloserIndex(int closerIndex) {
        this.closerIndex = closerIndex;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(139);
        builder.append("EzspGetSourceRouteTableEntryResponse [networkId=");
        builder.append(networkId);
        builder.append(", status=");
        builder.append(status);
        builder.append(", destination=");
        builder.append(String.format("%04X", destination));
        builder.append(", closerIndex=");
        builder.append(closerIndex);
        builder.append(']');
        return builder.toString();
    }
}
