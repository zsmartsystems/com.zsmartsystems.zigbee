/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.internal.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.internal.ezsp.EzspFrameResponse;
import com.zsmartsystems.zigbee.dongle.ember.internal.ezsp.structure.EzspDecisionId;
import com.zsmartsystems.zigbee.dongle.ember.internal.ezsp.structure.EzspStatus;

/**
 * Class to implement the Ember EZSP command <b>getPolicy</b>.
 * <p>
 * Allows the Host to read the policies used by the NCP to make fast decisions.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspGetPolicyResponse extends EzspFrameResponse {
    public static int FRAME_ID = 0x56;

    /**
     * EZSP_SUCCESS if the policy was changed, EZSP_ERROR_INVALID_ID if the NCP does not
     * recognize policyId.
     * <p>
     * EZSP type is <i>EzspStatus</i> - Java type is {@link EzspStatus}
     */
    private EzspStatus status;

    /**
     * The current decision for the specified policy.
     * <p>
     * EZSP type is <i>EzspDecisionId</i> - Java type is {@link EzspDecisionId}
     */
    private EzspDecisionId decisionId;

    /**
     * Response and Handler constructor
     */
    public EzspGetPolicyResponse(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        status = deserializer.deserializeEzspStatus();
        decisionId = deserializer.deserializeEzspDecisionId();
    }

    /**
     * EZSP_SUCCESS if the policy was changed, EZSP_ERROR_INVALID_ID if the NCP does not
     * recognize policyId.
     * <p>
     * EZSP type is <i>EzspStatus</i> - Java type is {@link EzspStatus}
     *
     * @return the current status as {@link EzspStatus}
     */
    public EzspStatus getStatus() {
        return status;
    }

    /**
     * EZSP_SUCCESS if the policy was changed, EZSP_ERROR_INVALID_ID if the NCP does not
     * recognize policyId.
     *
     * @param status the status to set as {@link EzspStatus}
     */
    public void setStatus(EzspStatus status) {
        this.status = status;
    }

    /**
     * The current decision for the specified policy.
     * <p>
     * EZSP type is <i>EzspDecisionId</i> - Java type is {@link EzspDecisionId}
     *
     * @return the current decisionId as {@link EzspDecisionId}
     */
    public EzspDecisionId getDecisionId() {
        return decisionId;
    }

    /**
     * The current decision for the specified policy.
     *
     * @param decisionId the decisionId to set as {@link EzspDecisionId}
     */
    public void setDecisionId(EzspDecisionId decisionId) {
        this.decisionId = decisionId;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(74);
        builder.append("EzspGetPolicyResponse [status=");
        builder.append(status);
        builder.append(", decisionId=");
        builder.append(decisionId);
        builder.append(']');
        return builder.toString();
    }
}
