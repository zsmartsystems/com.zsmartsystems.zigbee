/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameResponse;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.structure.EmberGpAddress;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.structure.EmberStatus;

/**
 * Class to implement the Ember EZSP command <b>childJoinHandler</b>.
 * <p>
 * Indicates that a child has joined or left.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspGpEpIncomingMessageHandler extends EzspFrameResponse {
    public static int FRAME_ID = 0xC5;

    /**
     * The status of the GPDF receive.
     */
    private EmberStatus status;
    
    /**
     * The gpdLink value of the received GPDF.
     */
    private int gpdLink;
    
    /**
     * The GPDF sequence number.
     */
    private int sequenceNumber;
    
    /**
     * The address of the source GPD.
     */
    private EmberGpAddress addr;
    
    /**
     * The security level of the received GPDF.
     */
    private int gpdfSecurityLevel;
    
    /**
     * The securityKeyType used to decrypt/authenticate the incoming GPDF.
     */
    private int gpdfSecurityKeyType;
    
    /**
     * Whether the incoming GPDF had the auto-commissioning bit set.
     */
    private boolean autoCommissioning;
    
    /**
     * Whether the incoming GPDF had the rxAfterTx bit set.
     */
    private boolean rxAfterTx;
    
    /**
     * The security frame counter of the incoming GDPF.
     */
    private int gpdSecurityFrameCounter;
    
    /**
     * The gpdCommandId of the incoming GPDF.
     */
    private int gpdCommandId;
    
    /**
     * The received MIC of the GPDF.
     */
    private int mic; 
    
    /**
     * The proxy table index of the corresponding proxy table entry to the incoming GPDF.
     */
    private int proxyTableIndex;
    
    /**
     * The of the GPD command payload.
     */
    private int gpdCommandPayloadLength;
    
    /**
     * The GPD command payload.
     */
    private int[] gpdCommandPayload;


    /**
     * Response and Handler constructor
     */
    public EzspGpEpIncomingMessageHandler(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        status = deserializer.deserializeEmberStatus();
        gpdLink = deserializer.deserializeUInt8();
        sequenceNumber = deserializer.deserializeUInt8();
        addr = deserializer.deserializeEmberGpAddress();
        gpdfSecurityLevel = deserializer.deserializeUInt8();
        gpdfSecurityKeyType = deserializer.deserializeUInt8();
        autoCommissioning = deserializer.deserializeBool();
        rxAfterTx = deserializer.deserializeBool();
        gpdSecurityFrameCounter = deserializer.deserializeUInt32();
        gpdCommandId = deserializer.deserializeUInt8();
        mic = deserializer.deserializeUInt32(); 
        proxyTableIndex = deserializer.deserializeUInt8();
        gpdCommandPayloadLength = deserializer.deserializeUInt8();
        gpdCommandPayload = deserializer.deserializeUInt8Array(gpdCommandPayloadLength);        
    }

    /**
     * getter / setter
     */

    public static int getFRAME_ID() {
		return FRAME_ID;
	}


	public EmberStatus getStatus() {
		return status;
	}


	public int getGpdLink() {
		return gpdLink;
	}


	public int getSequenceNumber() {
		return sequenceNumber;
	}


	public EmberGpAddress getAddr() {
		return addr;
	}


	public int getGpdfSecurityLevel() {
		return gpdfSecurityLevel;
	}


	public int getGpdfSecurityKeyType() {
		return gpdfSecurityKeyType;
	}


	public boolean isAutoCommissioning() {
		return autoCommissioning;
	}


	public boolean isRxAfterTx() {
		return rxAfterTx;
	}


	public int getGpdSecurityFrameCounter() {
		return gpdSecurityFrameCounter;
	}


	public int getGpdCommandId() {
		return gpdCommandId;
	}


	public int getMic() {
		return mic;
	}


	public int getProxyTableIndex() {
		return proxyTableIndex;
	}


	public int getGpdCommandPayloadLength() {
		return gpdCommandPayloadLength;
	}


	public int[] getGpdCommandPayload() {
		return gpdCommandPayload;
	}


	public static void setFRAME_ID(int fRAME_ID) {
		FRAME_ID = fRAME_ID;
	}


	public void setStatus(EmberStatus status) {
		this.status = status;
	}


	public void setGpdLink(int gpdLink) {
		this.gpdLink = gpdLink;
	}


	public void setSequenceNumber(int sequenceNumber) {
		this.sequenceNumber = sequenceNumber;
	}


	public void setAddr(EmberGpAddress addr) {
		this.addr = addr;
	}


	public void setGpdfSecurityLevel(int gpdfSecurityLevel) {
		this.gpdfSecurityLevel = gpdfSecurityLevel;
	}


	public void setGpdfSecurityKeyType(int gpdfSecurityKeyType) {
		this.gpdfSecurityKeyType = gpdfSecurityKeyType;
	}


	public void setAutoCommissioning(boolean autoCommissioning) {
		this.autoCommissioning = autoCommissioning;
	}


	public void setRxAfterTx(boolean rxAfterTx) {
		this.rxAfterTx = rxAfterTx;
	}


	public void setGpdSecurityFrameCounter(int gpdSecurityFrameCounter) {
		this.gpdSecurityFrameCounter = gpdSecurityFrameCounter;
	}


	public void setGpdCommandId(int gpdCommandId) {
		this.gpdCommandId = gpdCommandId;
	}


	public void setMic(int mic) {
		this.mic = mic;
	}


	public void setProxyTableIndex(int proxyTableIndex) {
		this.proxyTableIndex = proxyTableIndex;
	}


	public void setGpdCommandPayloadLength(int gpdCommandPayloadLength) {
		this.gpdCommandPayloadLength = gpdCommandPayloadLength;
	}


	public void setGpdCommandPayload(int[] gpdCommandPayload) {
		this.gpdCommandPayload = gpdCommandPayload;
	}


	@Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(148);
        builder.append("EzspGpEpIncomingMessageHandler [status=");
        builder.append(status);
        builder.append(", gpdLink=");
        builder.append(gpdLink);
        builder.append(", sequenceNumber=");
        builder.append(sequenceNumber);
        builder.append(", addr=");
        builder.append(addr);
        builder.append(", gpdfSecurityLevel=");
        builder.append(gpdfSecurityLevel);
        builder.append(", gpdfSecurityKeyType=");
        builder.append(gpdfSecurityKeyType);
        builder.append(", autoCommissioning=");
        builder.append(autoCommissioning);
        builder.append(", rxAfterTx=");
        builder.append(rxAfterTx);
        builder.append(", gpdSecurityFrameCounter=");
        builder.append(gpdSecurityFrameCounter);
        builder.append(", gpdCommandId=");
        builder.append(gpdCommandId);
        builder.append(", mic=");
        builder.append(mic);
        builder.append(", proxyTableIndex=");
        builder.append(proxyTableIndex);
        builder.append(", gpdCommandPayloadLength=");
        builder.append(gpdCommandPayloadLength);
        builder.append(", gpdCommandPayload=");
        builder.append(gpdCommandPayload);
        builder.append(']');
        return builder.toString();
    }
} 