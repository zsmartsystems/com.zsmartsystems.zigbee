/**
 * Copyright (c) 2014-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp;

import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameResponse;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.serializer.EzspDeserializer;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Ember EZSP command <b>setExtendedTimeout</b>.
 * <p>
 * Tells the stack whether or not the normal interval between retransmissions of a retried
 * unicast message should be increased by EMBER_INDIRECT_TRANSMISSION_TIMEOUT. The interval
 * needs to be increased when sending to a sleepy node so that the message is not retransmitted
 * until the destination has had time to wake up and poll its parent. The stack will automatically
 * extend the timeout: - For our own sleepy children. - When an address response is received from a
 * parent on behalf of its child. - When an indirect transaction expiry route error is received. -
 * When an end device announcement is received from a sleepy node.
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspSetExtendedTimeoutResponse extends EzspFrameResponse {
    private static final Logger logger = LoggerFactory.getLogger(EzspSetExtendedTimeoutResponse.class);

    /**
     * Response and Handler constructor
     */
    public EzspSetExtendedTimeoutResponse(int[] inputBuffer) {
        super(inputBuffer);
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("]");
        return builder.toString();
    }
}
