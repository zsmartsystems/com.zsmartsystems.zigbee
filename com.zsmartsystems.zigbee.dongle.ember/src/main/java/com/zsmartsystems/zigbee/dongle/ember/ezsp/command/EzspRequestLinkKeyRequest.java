/**
 * Copyright (c) 2016-2018 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.command;

import com.zsmartsystems.zigbee.IeeeAddress;
import com.zsmartsystems.zigbee.dongle.ember.ezsp.EzspFrameRequest;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember EZSP command <b>requestLinkKey</b>.
 * <p>
 * A function to request a Link Key from the Trust Center with another device on the Network
 * (which could be the Trust Center). A Link Key with the Trust Center is possible but the
 * requesting device cannot be the Trust Center. Link Keys are optional in ZigBee Standard
 * Security and thus the stack cannot know whether the other device supports them. If
 * EMBER_REQUEST_KEY_TIMEOUT is non-zero on the Trust Center and the partner device is not the
 * Trust Center, both devices must request keys with their partner device within the time
 * period. The Trust Center only supports one outstanding key request at a time and therefore
 * will ignore other requests. If the timeout is zero then the Trust Center will immediately
 * respond and not wait for the second request. The Trust Center will always immediately
 * respond to requests for a Link Key with it. Sleepy devices should poll at a higher rate until a
 * response is received or the request times out. The success or failure of the request is
 * returned via ezspZigbeeKeyEstablishmentHandler(...).
 * <p>
 * This class provides methods for processing EZSP commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EzspRequestLinkKeyRequest extends EzspFrameRequest {
    public static final int FRAME_ID = 0x14;

    /**
     * This is the IEEE address of the partner device that will share the link key.
     * <p>
     * EZSP type is <i>EmberEUI64</i> - Java type is {@link IeeeAddress}
     */
    private IeeeAddress partner;

    /**
     * Serialiser used to serialise to binary line data
     */
    private EzspSerializer serializer;

    /**
     * Request constructor
     */
    public EzspRequestLinkKeyRequest() {
        frameId = FRAME_ID;
        serializer = new EzspSerializer();
    }

    /**
     * This is the IEEE address of the partner device that will share the link key.
     * <p>
     * EZSP type is <i>EmberEUI64</i> - Java type is {@link IeeeAddress}
     *
     * @return the current partner as {@link IeeeAddress}
     */
    public IeeeAddress getPartner() {
        return partner;
    }

    /**
     * This is the IEEE address of the partner device that will share the link key.
     *
     * @param partner the partner to set as {@link IeeeAddress}
     */
    public void setPartner(IeeeAddress partner) {
        this.partner = partner;
    }

    @Override
    public int[] serialize() {
        // Serialize the header
        serializeHeader(serializer);

        // Serialize the fields
        serializer.serializeEmberEui64(partner);
        return serializer.getPayload();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(53);
        builder.append("EzspRequestLinkKeyRequest [partner=");
        builder.append(partner);
        builder.append(']');
        return builder.toString();
    }
}
