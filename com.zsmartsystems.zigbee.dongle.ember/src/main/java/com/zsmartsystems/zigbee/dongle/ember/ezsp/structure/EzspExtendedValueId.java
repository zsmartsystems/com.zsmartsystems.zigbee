/**
 * Copyright (c) 2016-2024 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.structure;

import java.util.HashMap;
import java.util.Map;

/**
 * Class to implement the Ember Enumeration <b>EzspExtendedValueId</b>.
 * <p>
 * GP proxy table entry status.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public enum EzspExtendedValueId {
    /**
     * Default unknown value
     */
    UNKNOWN(-1),

    /**
     * The flags field associated with the specified endpoint.
     */
    EZSP_EXTENDED_VALUE_ENDPOINT_FLAGS(0x0000),

    /**
     * This is the reason for the node to leave the network as well as the device that told it to leave.
     * The leave reason is the 1st byte of the value while the node ID is the 2nd and 3rd byte. If the
     * leave was caused due to an API call rather than an over the air message, the node ID will be
     * EMBER_UNKNOWN_NODE_ID (0xFFFD).
     */
    EZSP_EXTENDED_VALUE_LAST_LEAVE_REASON(0x0001),

    /**
     * This number of bytes of overhead required in the network frame for source routing to a
     * particular destination.
     */
    EZSP_EXTENDED_VALUE_GET_SOURCE_ROUTE_OVERHEAD(0x0002);

    /**
     * A mapping between the integer code and its corresponding type to
     * facilitate lookup by code.
     */
    private static Map<Integer, EzspExtendedValueId> codeMapping;

    private int key;

    static {
        codeMapping = new HashMap<Integer, EzspExtendedValueId>();
        for (EzspExtendedValueId s : values()) {
            codeMapping.put(s.key, s);
        }
    }

    private EzspExtendedValueId(int key) {
        this.key = key;
    }

    /**
     * Lookup function based on the EmberStatus type code. Returns null if the
     * code does not exist.
     *
     * @param code the code to lookup
     * @return enumeration value of the alarm type.
     */
    public static EzspExtendedValueId getEzspExtendedValueId(int code) {
        if (codeMapping.get(code) == null) {
            return UNKNOWN;
        }

        return codeMapping.get(code);
    }

    /**
     * Returns the EZSP protocol defined value for this enumeration.
     *
     * @return the EZSP protocol key
     */
    public int getKey() {
        return key;
    }
}
