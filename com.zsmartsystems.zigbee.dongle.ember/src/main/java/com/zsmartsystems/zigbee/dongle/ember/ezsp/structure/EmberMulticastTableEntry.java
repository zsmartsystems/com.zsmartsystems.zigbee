/**
 * Copyright (c) 2016-2021 by the respective copyright holders.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zigbee.dongle.ember.ezsp.structure;

import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspDeserializer;
import com.zsmartsystems.zigbee.dongle.ember.internal.serializer.EzspSerializer;

/**
 * Class to implement the Ember Structure <b>EmberMulticastTableEntry</b>.
 * <p>
 * A multicast table entry indicates that a particular endpoint is a member of a particular
 * multicast group. Only devices with an endpoint in a multicast group will receive messages
 * sent to that multicast group.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class EmberMulticastTableEntry {

    /**
     * The multicast group ID.
     * <p>
     * EZSP type is <i>EmberMulticastId</i> - Java type is {@link int}
     */
    private int multicastId;

    /**
     * The endpoint that is a member, or 0 if this entry is not in use (the ZDO is not a member of any
     * multicast groups.)
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     */
    private int endpoint;

    /**
     * The network index of the network the entry is related to.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     */
    private int networkIndex;

    /**
     * Default Constructor
     */
    public EmberMulticastTableEntry() {
    }

    public EmberMulticastTableEntry(EzspDeserializer deserializer) {
        deserialize(deserializer);
    }

    /**
     * The multicast group ID.
     * <p>
     * EZSP type is <i>EmberMulticastId</i> - Java type is {@link int}
     *
     * @return the current multicastId as {@link int}
     */
    public int getMulticastId() {
        return multicastId;
    }

    /**
     * The multicast group ID.
     *
     * @param multicastId the multicastId to set as {@link int}
     */
    public void setMulticastId(int multicastId) {
        this.multicastId = multicastId;
    }

    /**
     * The endpoint that is a member, or 0 if this entry is not in use (the ZDO is not a member of any
     * multicast groups.)
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     *
     * @return the current endpoint as {@link int}
     */
    public int getEndpoint() {
        return endpoint;
    }

    /**
     * The endpoint that is a member, or 0 if this entry is not in use (the ZDO is not a member of any
     * multicast groups.)
     *
     * @param endpoint the endpoint to set as {@link int}
     */
    public void setEndpoint(int endpoint) {
        this.endpoint = endpoint;
    }

    /**
     * The network index of the network the entry is related to.
     * <p>
     * EZSP type is <i>uint8_t</i> - Java type is {@link int}
     *
     * @return the current networkIndex as {@link int}
     */
    public int getNetworkIndex() {
        return networkIndex;
    }

    /**
     * The network index of the network the entry is related to.
     *
     * @param networkIndex the networkIndex to set as {@link int}
     */
    public void setNetworkIndex(int networkIndex) {
        this.networkIndex = networkIndex;
    }

    /**
     * Serialise the contents of the EZSP structure.
     *
     * @param serializer the {@link EzspSerializer} used to serialize
     */
    public int[] serialize(EzspSerializer serializer) {
        // Serialize the fields
        serializer.serializeUInt16(multicastId);
        serializer.serializeUInt8(endpoint);
        serializer.serializeUInt8(networkIndex);
        return serializer.getPayload();
    }

    /**
     * Deserialise the contents of the EZSP structure.
     *
     * @param deserializer the {@link EzspDeserializer} used to deserialize
     */
    public void deserialize(EzspDeserializer deserializer) {
        // Deserialize the fields
        multicastId = deserializer.deserializeUInt16();
        endpoint = deserializer.deserializeUInt8();
        networkIndex = deserializer.deserializeUInt8();
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder(102);
        builder.append("EmberMulticastTableEntry [multicastId=");
        builder.append(String.format("%04X", multicastId));
        builder.append(", endpoint=");
        builder.append(endpoint);
        builder.append(", networkIndex=");
        builder.append(networkIndex);
        builder.append(']');
        return builder.toString();
    }
}
