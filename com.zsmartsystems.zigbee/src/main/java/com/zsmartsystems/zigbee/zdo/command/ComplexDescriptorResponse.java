package com.zsmartsystems.zigbee.zdo.command;

import com.zsmartsystems.zigbee.zcl.ZclFieldSerializer;
import com.zsmartsystems.zigbee.zcl.ZclFieldDeserializer;
import com.zsmartsystems.zigbee.zcl.protocol.ZclDataType;
import com.zsmartsystems.zigbee.zdo.ZdoResponse;
import com.zsmartsystems.zigbee.zdo.descriptors.ComplexDescriptor;

/**
 * Complex Descriptor Response value object class.
 * <p>
 * The Complex_Desc_rsp is generated by a remote device in response to a
 * Complex_Desc_req directed to the remote device. This command shall be unicast
 * to the originator of the Complex_Desc_req command.
 * <p>
 * Code is auto-generated. Modifications may be overwritten!
 */
public class ComplexDescriptorResponse extends ZdoResponse {
    /**
     * NWKAddrOfInterest command message field.
     */
    private Integer nwkAddrOfInterest;

    /**
     * Length command message field.
     */
    private Integer length;

    /**
     * ComplexDescriptor command message field.
     */
    private ComplexDescriptor complexDescriptor;

    /**
     * Default constructor.
     */
    public ComplexDescriptorResponse() {
        clusterId = 0x8010;
    }

    /**
     * Gets NWKAddrOfInterest.
     *
     * @return the NWKAddrOfInterest
     */
    public Integer getNwkAddrOfInterest() {
        return nwkAddrOfInterest;
    }

    /**
     * Sets NWKAddrOfInterest.
     *
     * @param nwkAddrOfInterest the NWKAddrOfInterest
     */
    public void setNwkAddrOfInterest(final Integer nwkAddrOfInterest) {
        this.nwkAddrOfInterest = nwkAddrOfInterest;
    }

    /**
     * Gets Length.
     *
     * @return the Length
     */
    public Integer getLength() {
        return length;
    }

    /**
     * Sets Length.
     *
     * @param length the Length
     */
    public void setLength(final Integer length) {
        this.length = length;
    }

    /**
     * Gets ComplexDescriptor.
     *
     * @return the ComplexDescriptor
     */
    public ComplexDescriptor getComplexDescriptor() {
        return complexDescriptor;
    }

    /**
     * Sets ComplexDescriptor.
     *
     * @param complexDescriptor the ComplexDescriptor
     */
    public void setComplexDescriptor(final ComplexDescriptor complexDescriptor) {
        this.complexDescriptor = complexDescriptor;
    }

    @Override
    public void serialize(final ZclFieldSerializer serializer) {
        super.serialize(serializer);

        serializer.serialize(status, ZclDataType.UNSIGNED_8_BIT_INTEGER);
        serializer.serialize(nwkAddrOfInterest, ZclDataType.NWK_ADDRESS);
        serializer.serialize(length, ZclDataType.UNSIGNED_8_BIT_INTEGER);
        serializer.serialize(complexDescriptor, ZclDataType.COMPLEX_DESCRIPTOR);
    }

    @Override
    public void deserialize(final ZclFieldDeserializer deserializer) {
        super.deserialize(deserializer);

        status = (Integer) deserializer.deserialize(ZclDataType.UNSIGNED_8_BIT_INTEGER);
        if (status != 0) {
            // Don't read the full response if we have an error
            return;
        }
        nwkAddrOfInterest = (Integer) deserializer.deserialize(ZclDataType.NWK_ADDRESS);
        length = (Integer) deserializer.deserialize(ZclDataType.UNSIGNED_8_BIT_INTEGER);
        complexDescriptor = (ComplexDescriptor) deserializer.deserialize(ZclDataType.COMPLEX_DESCRIPTOR);
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("ComplexDescriptorResponse ");
        builder.append(super.toString());
        builder.append(", status=");
        builder.append(status);
        builder.append(", nwkAddrOfInterest=");
        builder.append(nwkAddrOfInterest);
        builder.append(", length=");
        builder.append(length);
        builder.append(", complexDescriptor=");
        builder.append(complexDescriptor);
        return builder.toString();
    }

}
