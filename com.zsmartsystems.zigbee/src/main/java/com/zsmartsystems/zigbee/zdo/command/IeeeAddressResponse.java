package com.zsmartsystems.zigbee.zdo.command;

import com.zsmartsystems.zigbee.zcl.ZclFieldSerializer;
import com.zsmartsystems.zigbee.zcl.ZclFieldDeserializer;
import com.zsmartsystems.zigbee.zcl.protocol.ZclDataType;
import com.zsmartsystems.zigbee.zdo.ZdoResponse;
import com.zsmartsystems.zigbee.IeeeAddress;

/**
 * IEEE Address Response value object class.
 * <p>
 * The IEEE_addr_rsp is generated by a Remote Device in response to an
 * IEEE_addr_req command inquiring as to the 64-bit IEEE address of the Remote
 * Device or the 64-bit IEEE address of an address held in a local discovery cache.
 * The destination addressing on this command shall be unicast.
 * Optional |NumAssocDev                |Unsigned 8-bit integer     |
 * Optional |StartIndex                 |Unsigned 8-bit integer     |
 * Optional |NWKAddrAssocDevList        |N X NWK Address            |
 * <p>
 * Code is auto-generated. Modifications may be overwritten!
 */
public class IeeeAddressResponse extends ZdoResponse {
    /**
     * IEEEAddrRemoteDev command message field.
     */
    private IeeeAddress ieeeAddrRemoteDev;

    /**
     * NWKAddrRemoteDev command message field.
     */
    private Integer nwkAddrRemoteDev;

    /**
     * Default constructor.
     */
    public IeeeAddressResponse() {
        clusterId = 0x8001;
    }

    /**
     * Gets IEEEAddrRemoteDev.
     *
     * @return the IEEEAddrRemoteDev
     */
    public IeeeAddress getIeeeAddrRemoteDev() {
        return ieeeAddrRemoteDev;
    }

    /**
     * Sets IEEEAddrRemoteDev.
     *
     * @param ieeeAddrRemoteDev the IEEEAddrRemoteDev
     */
    public void setIeeeAddrRemoteDev(final IeeeAddress ieeeAddrRemoteDev) {
        this.ieeeAddrRemoteDev = ieeeAddrRemoteDev;
    }

    /**
     * Gets NWKAddrRemoteDev.
     *
     * @return the NWKAddrRemoteDev
     */
    public Integer getNwkAddrRemoteDev() {
        return nwkAddrRemoteDev;
    }

    /**
     * Sets NWKAddrRemoteDev.
     *
     * @param nwkAddrRemoteDev the NWKAddrRemoteDev
     */
    public void setNwkAddrRemoteDev(final Integer nwkAddrRemoteDev) {
        this.nwkAddrRemoteDev = nwkAddrRemoteDev;
    }

    @Override
    public void serialize(final ZclFieldSerializer serializer) {
        serializer.serialize(status, ZclDataType.UNSIGNED_8_BIT_INTEGER);
        serializer.serialize(ieeeAddrRemoteDev, ZclDataType.IEEE_ADDRESS);
        serializer.serialize(nwkAddrRemoteDev, ZclDataType.NWK_ADDRESS);
    }

    @Override
    public void deserialize(final ZclFieldDeserializer deserializer) {
        status = (Integer) deserializer.deserialize(ZclDataType.UNSIGNED_8_BIT_INTEGER);
        ieeeAddrRemoteDev = (IeeeAddress) deserializer.deserialize(ZclDataType.IEEE_ADDRESS);
        nwkAddrRemoteDev = (Integer) deserializer.deserialize(ZclDataType.NWK_ADDRESS);
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("IeeeAddressResponse");
        builder.append(super.toString());
        builder.append(", status=");
        builder.append(status);
        builder.append(", ieeeAddrRemoteDev=");
        builder.append(ieeeAddrRemoteDev);
        builder.append(", nwkAddrRemoteDev=");
        builder.append(nwkAddrRemoteDev);
        return builder.toString();
    }

}
