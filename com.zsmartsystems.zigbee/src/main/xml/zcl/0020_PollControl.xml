<cluster xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="zigbee-description.xsd" code="0x0020">
    <name>Poll Control</name>
    <description>This cluster provides a mechanism for the management of an end device&#8217;s MAC Data Request rate. For the purposes of this cluster, the term &#8220;poll&#8221; always refers to the sending of a MAC Data Request from the end device to the end device&#8217;s parent. This cluster can be used for instance by a configuration device to make an end device responsive for a certain period of time so that the device can be managed by the controller. This cluster is composed of a client and server. The end device implements the server side of this cluster. The server side contains several attributes related to the MAC Data Request rate for the device. The client side implements commands used to manage the poll rate for the device. The end device which implements the server side of this cluster sends a query to the client on a predetermined interval to see if the client would like to manage the poll period of the end device in question. When the client side of the cluster hears from the server it has the opportunity to respond with configuration data to either put the end device in a short poll mode or let the end device continue to function normally.</description>
    <command code="0x00" source="client">
        <name>Check In Response</name>
        <description>The Check-in Response is sent in response to the receipt of a Check-in command. The Check-in Response is used by the Poll Control Client to indicate whether it would like the device implementing the Poll Control Cluster Server to go into a fast poll mode and for how long. If the Poll Control Cluster Client indicates that it would like the device to go into a fast poll mode, it is responsible for telling the device to stop fast polling when it is done sending messages to the fast polling device. &lt;br&gt; If the Poll Control Server receives a Check-In Response from a client for which there is no binding (unbound), it SHOULD respond with a Default Response with a status value indicating ACTION_DENIED. &lt;br&gt; If the Poll Control Server receives a Check-In Response from a client for which there is a binding (bound) with an invalid fast poll interval it SHOULD respond with a Default Response with status INVALID_VALUE. &lt;br&gt; If the Poll Control Server receives a Check-In Response from a bound client after temporary fast poll mode is completed it SHOULD respond with a Default Response with a status value indicating TIMEOUT. &lt;br&gt; In all of the above cases, the Server SHALL respond with a Default Response not equal to ZCL_SUCCESS.</description>
        <field type="BOOLEAN">
            <name>Start Fast Polling</name>
            <description>This Boolean value indicates whether or not the Poll Control Server device SHOULD begin fast polling or not. If the Start Fast Polling value is true, the server device is EXPECTED to begin fast polling until the Fast Poll Timeout has expired. If the Start Fast Polling argument is false, the Poll Control Server MAY continue in normal operation and is not required to go into fast poll mode.</description>
        </field>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>Fast Poll Timeout</name>
            <description>The Fast Poll Timeout value indicates the number of quarterseconds during which the device SHOULD continue fast polling. If the Fast Poll Timeout value is 0, the device is EXPECTED to continue fast polling until the amount of time indicated it the FastPollTimeout attribute has elapsed or it receives a Fast Poll Stop command. If the Start Fast Polling argument is false, the Poll Control Server MAY ignore the Fast Poll Timeout argument.</description>
            <description>The Fast Poll Timeout argument temporarily overrides the FastPollTimeout attribute on the Poll Control Cluster Server for the fast poll mode induced by the Check-in Response command. This value is not EXPECTED to overwrite the stored value in the FastPollTimeout attribute.</description>
            <description>If the FastPollTimeout parameter in the CheckInResponse command is greater than the FastPollTimeoutMax attribute value, the Server Device SHALL respond with a default response of error status not equal to ZCL_SUCCESS. It is suggested to use the Error Status of ZCL_INVALID_FIELD.</description>
        </field>
    </command>
    <command code="0x01" source="client">
        <name>Fast Poll Stop Command</name>
        <description>The Fast Poll Stop command is used to stop the fast poll mode initiated by the Check-in response. The Fast Poll Stop command has no payload. &lt;br&gt; If the Poll Control Server receives a Fast Poll Stop from an unbound client it SHOULD send back a DefaultResponse with a value field indicating &#8220;ACTION_DENIED&#8221; . The Server SHALL respond with a DefaultResponse not equal to ZCL_SUCCESS. &lt;br&gt; If the Poll Control Server receives a Fast Poll Stop command from a bound client but it is unable to stop fast polling due to the fact that there is another bound client which has requested that polling continue it SHOULD respond with a Default Response with a status of &#8220;ACTION_DENIED&#8221; &lt;br&gt; If a Poll Control Server receives a Fast Poll Stop command from a bound client but it is not FastPolling it SHOULD respond with a Default Response with a status of ACTION_DENIED.</description>
    </command>
    <command code="0x02" source="client">
        <name>Set Long Poll Interval Command</name>
        <description>The Set Long Poll Interval command is used to set the Read Only LongPollInterval attribute. &lt;br&gt; When the Poll Control Server receives the Set Long Poll Interval Command, it SHOULD check its internal minimal limit and the attributes relationship if the new Long Poll Interval is acceptable. If the new value is acceptable, the new value SHALL be saved to the LongPollInterval attribute. If the new value is not acceptable, the Poll Control Server SHALL send a default response of INVALID_VALUE and the LongPollInterval attribute value is not updated.</description>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>New Long Poll Interval</name>
        </field>
    </command>
    <command code="0x03" source="client">
        <name>Set Short Poll Interval Command</name>
        <description>The Set Short Poll Interval command is used to set the Read Only ShortPollInterval attribute. &lt;br&gt; When the Poll Control Server receives the Set Short Poll Interval Command, it SHOULD check its internal minimal limit and the attributes relationship if the new Short Poll Interval is acceptable. If the new value is acceptable, the new value SHALL be saved to the ShortPollInterval attribute. If the new value is not acceptable, the Poll Control Server SHALL send a default response of INVALID_VALUE and the ShortPollInterval attribute value is not updated.</description>
        <field type="UNSIGNED_16_BIT_INTEGER">
            <name>New Short Poll Interval</name>
        </field>
    </command>
    <command code="0x00" source="server">
        <name>Check In Command</name>
        <description>The Poll Control Cluster server sends out a Check-in command to the devices to which it is paired based on the server&#8217;s Check-inInterval attribute. It does this to find out if any of the Poll Control Cluster Clients with which it is paired are interested in having it enter fast poll mode so that it can be managed. This request is sent out based on either the Check-inInterval, or the next Check-in value in the Fast Poll Stop Request generated by the Poll Control Cluster Client. &lt;br&gt; The Check-in command expects a Check-in Response command to be sent back from the Poll Control Client. If the Poll Control Server does not receive a Check-in response back from the Poll Control Client up to 7.68 seconds it is free to return to polling according to the LongPollInterval.</description>
    </command>
    <attribute code="0x0000" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="false" writable="true" reportable="true" minimum="0x00000000" maximum="0x006E0000" default="0x00003840">
        <name>Checkin Interval</name>
        <description>The Poll Control server is responsible for checking in with the poll control client periodically to see if the poll control  client wants to modify the poll rate of the poll control server.  This is due to the fact that  the  PollControl server is implemented on an end device that MAY have an unpredictable sleep-wake cycle. The CheckinInterval represents the default amount of time between check-ins by the poll control server with the poll control client. The CheckinInterval is measured in quarter-seconds. A value of 0 indicates that the Poll Control Server is turned off and the poll control server will not check-in with the poll control client. The Poll Control Server checks in with the Poll Control Client by sending a Checkin command to the Client. This value SHOULDbe longer than the LongPoll Interval attribute. If the Client writes an invalid attribute value (Example: Out of Range or a value smaller than the optional Check-inIntervalMinattribute value or a value smaller than the LongPollInterval attribute value), the Server SHOULD return Write Attributes Response with an error status not equal to ZCL_SUCCESS. The Poll Control Client will hold onto the actions or messages for the Poll Control Server at the application level until the Poll Control Server checks in with the Poll Control Client.</description>
    </attribute>
    <attribute code="0x0001" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="false" writable="false" reportable="true" minimum="0x00000004" maximum="0x006E0000" default="0x00000014">
        <name>Long Poll Interval</name>
        <description>An end device that implements the Poll Control server MAY optionally expose a LongPollInterval attribute. The Long Poll Interval represents the maximum amount of time in quarter-seconds between MAC Data Requests from the end device to its parent.</description>
        <description>The LongPollInterval defines the frequency of polling that an end device does when it is NOT in fast poll mode.  The LongPollInterval SHOULD be longer than the ShortPollInterval attribute but shorter than the CheckinInterval attribute.A  value of 0xffffffff is reserved to indicate that the device does not have or does not know its long poll interval</description>
    </attribute>
    <attribute code="0x0002" type="UNSIGNED_16_BIT_INTEGER" side="server" optional="false" writable="false" reportable="true" minimum="0x0001" maximum="0xFFFF" default="0x0002">
        <name>Short Poll Interval</name>
        <description>An  end  device  that  implements  the  Poll  Control  server MAY optionally  expose the ShortPollInterval attribute.  The ShortPollIntervalrepresents  the  number  of  quarterseconds  that  an  end  device  waits  between MAC Data Requests to its parent when it is expecting data (i.e.,in fast poll mode).</description>
    </attribute>
    <attribute code="0x0003" type="UNSIGNED_16_BIT_INTEGER" side="server" optional="false" writable="false" reportable="true" minimum="0x0001" maximum="0xFFFF" default="0x0028">
        <name>Fast Poll Timeout</name>
        <description>The FastPollTimeout attribute represents the number of quarterseconds that an end device will stay in fast poll mode by default. It is suggested that the FastPollTimeoutattribute value be greater than 7.68 seconds.The Poll Control Cluster  Client MAYoverride  this  value  by  indicating  a  different  value  in  the  Fast  Poll Duration argument in the Check-in Response command. If the Client writes a value out of range or greater  than  the  optional FastPollTimeoutMax attribute  value  if  supported, the Server SHOULD return a  Write  Attributes  Response with a status of  INVALID_VALUE30.  An  end  device  that implements the  Poll Control server can be  put into a  fast poll  mode during  which it will send MAC Data Requests  to  its  parent  at  the  frequency  of  its  configured ShortPollInterval attribute.  During this  period  of time, fast polling is considered active. When the device goes into fast poll mode, it is required to send MAC DataRequests to its parent at an accelerated rate and is thus more responsive on the network and can receive data asynchronously from the device implementing the Poll Control Cluster Client.</description>
    </attribute>
    <attribute code="0x0004" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="false" writable="false" reportable="false" default="0x00000000">
        <name>Checkin Interval Min</name>
        <description>The Poll Control Server MAY optionally provide its own minimum value for the Check-inInterval to protect against the Check-inInterval being set too low and draining the battery on the end device implementing the Poll Control Server.</description>
    </attribute>
    <attribute code="0x0005" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="false" writable="false" reportable="false" default="0x00000000">
        <name>Long Poll Interval Min</name>
        <description>The Poll Control Server MAYoptionally provide its own minimum value for the LongPollIntervalto protect against  another  device  setting  the  value  to  too  short  a  time  resulting  in  an  inadvertent  power  drain  on  the device.</description>
    </attribute>
    <attribute code="0x0006" type="UNSIGNED_32_BIT_INTEGER" side="server" optional="false" writable="false" reportable="false" default="0x00000000">
        <name>Fast Poll Timeout Min</name>
        <description>The Poll Control Server MAY optionally provide its own maximum value for the FastPollTimeout to avoid it being set to too high a value resulting in an inadvertent power drain on the device.</description>
    </attribute>

</cluster>
